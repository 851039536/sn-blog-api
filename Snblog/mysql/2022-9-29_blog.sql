-- MySqlBackup.NET 2.3.5
-- Dump Time: 2022-09-29 14:19:57
-- --------------------------------------
-- Server version 8.0.16 MySQL Community Server - GPL


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


-- 
-- Definition of sn_comments
-- 

DROP TABLE IF EXISTS `sn_comments`;
CREATE TABLE IF NOT EXISTS `sn_comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '评论主键',
  `user_id` int(11) NOT NULL COMMENT '用户id',
  `give` int(11) NOT NULL COMMENT '点赞数',
  `text` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容',
  `time_create` datetime NOT NULL COMMENT '评论日期',
  `time_modified` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_comments
-- 

/*!40000 ALTER TABLE `sn_comments` DISABLE KEYS */;

/*!40000 ALTER TABLE `sn_comments` ENABLE KEYS */;

-- 
-- Definition of sn_interface_type
-- 

DROP TABLE IF EXISTS `sn_interface_type`;
CREATE TABLE IF NOT EXISTS `sn_interface_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_interface_type
-- 

/*!40000 ALTER TABLE `sn_interface_type` DISABLE KEYS */;
INSERT INTO `sn_interface_type`(`id`,`name`) VALUES
(1,'header'),
(2,'sidebar');
/*!40000 ALTER TABLE `sn_interface_type` ENABLE KEYS */;

-- 
-- Definition of sn_interface
-- 

DROP TABLE IF EXISTS `sn_interface`;
CREATE TABLE IF NOT EXISTS `sn_interface` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `path` varchar(80) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '路径',
  `type_id` int(5) NOT NULL COMMENT '类别',
  `user_id` int(5) NOT NULL COMMENT '用户',
  `identity` tinyint(1) NOT NULL COMMENT '显示隐藏',
  PRIMARY KEY (`id`),
  KEY `type_id` (`type_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `sn_interface_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`),
  CONSTRAINT `type` FOREIGN KEY (`type_id`) REFERENCES `sn_interface_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_interface
-- 

/*!40000 ALTER TABLE `sn_interface` DISABLE KEYS */;
INSERT INTO `sn_interface`(`id`,`title`,`path`,`type_id`,`user_id`,`identity`) VALUES
(1,'主页','/index/column',1,4,1),
(2,'博文','/tag',2,4,1),
(3,'时间线','/Timeline',1,4,0),
(5,'图册','/Photo',1,4,1),
(6,'导航','/navigation',1,4,0),
(7,'关于','/sAbout',1,4,0),
(8,'日志','/Talk',1,4,0),
(9,'舔狗日记','/one',2,4,1),
(10,'哔哔视频','/video',2,4,1),
(11,'网站导航','/favorite',2,4,1),
(12,'博客导航','/BlogCircles',2,4,1),
(13,'我的书单','/book',2,4,1),
(14,'聚合搜索','/ListContent',2,4,1),
(15,'博客日记','/blogs/BlogsColumn',2,4,0),
(17,'后台管理','/Login',2,4,1),
(18,'代码块','/code',1,4,1);
/*!40000 ALTER TABLE `sn_interface` ENABLE KEYS */;

-- 
-- Definition of sn_labels
-- 

DROP TABLE IF EXISTS `sn_labels`;
CREATE TABLE IF NOT EXISTS `sn_labels` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标签名称',
  `description` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标签描述',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_labels
-- 

/*!40000 ALTER TABLE `sn_labels` DISABLE KEYS */;
INSERT INTO `sn_labels`(`id`,`name`,`description`) VALUES
(1,'Blazor','Blazor'),
(2,'efcore','efcore'),
(4,'webapi','webapi'),
(5,'wpf','wpf'),
(7,'mysql','mysql'),
(9,'ORM','  ORM'),
(10,'JWT','JWT'),
(12,'CSS','CSS'),
(13,'HTML','HTML'),
(14,'WinForm','WinForm'),
(15,'vueperess','vueperess'),
(16,'Vue','Vue'),
(17,'VSCode','VSCode'),
(18,'NetCore','NetCore'),
(19,'工具','1'),
(20,'npm','1'),
(21,' EntityFramework ','1'),
(23,'Csharp','1'),
(24,'Axios ','1'),
(25,'搭建 ','1'),
(27,'linq','c#提供的ling查询极大的遍历了集合的查询过程，且使用简单方便，非常的有用。  下面将分别用简单的例子说明：ling基本查询、延迟查询属性、类型筛选、复合from字句、多级排序、分组查询、联合查询、合并、分页、聚合操作符、并行linq、取消长时间运行的并行ling查询。'),
(28,'Markdown','Markdown 是一种轻量级标记语言,它允许人们使用易读易写的纯文本格式编写文档。');
/*!40000 ALTER TABLE `sn_labels` ENABLE KEYS */;

-- 
-- Definition of sn_navigation_type
-- 

DROP TABLE IF EXISTS `sn_navigation_type`;
CREATE TABLE IF NOT EXISTS `sn_navigation_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_navigation_type
-- 

/*!40000 ALTER TABLE `sn_navigation_type` DISABLE KEYS */;
INSERT INTO `sn_navigation_type`(`id`,`title`) VALUES
(2,'网站'),
(3,'Vue'),
(4,'Net'),
(5,'JavaScript'),
(7,'收藏'),
(8,'博客圈'),
(9,'Css'),
(10,'论坛'),
(11,'导航'),
(12,'Css框架'),
(13,'文档'),
(14,'工具'),
(15,'学习'),
(16,'Mysql'),
(17,'在线刷题'),
(18,'图库'),
(19,'前端框架'),
(20,'Markdown'),
(21,'UniApp'),
(22,'EFCore'),
(23,'Docker'),
(24,'Vue组件库'),
(25,'Net框架'),
(26,'Vite');
/*!40000 ALTER TABLE `sn_navigation_type` ENABLE KEYS */;

-- 
-- Definition of sn_one_type
-- 

DROP TABLE IF EXISTS `sn_one_type`;
CREATE TABLE IF NOT EXISTS `sn_one_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_one_type
-- 

/*!40000 ALTER TABLE `sn_one_type` DISABLE KEYS */;
INSERT INTO `sn_one_type`(`id`,`title`) VALUES
(4,'舔狗日记'),
(5,'毒鸡汤');
/*!40000 ALTER TABLE `sn_one_type` ENABLE KEYS */;

-- 
-- Definition of sn_picture_type
-- 

DROP TABLE IF EXISTS `sn_picture_type`;
CREATE TABLE IF NOT EXISTS `sn_picture_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_picture_type
-- 

/*!40000 ALTER TABLE `sn_picture_type` DISABLE KEYS */;
INSERT INTO `sn_picture_type`(`id`,`name`) VALUES
(1,'article'),
(2,'User'),
(3,'Video');
/*!40000 ALTER TABLE `sn_picture_type` ENABLE KEYS */;

-- 
-- Definition of sn_picture
-- 

DROP TABLE IF EXISTS `sn_picture`;
CREATE TABLE IF NOT EXISTS `sn_picture` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图床名',
  `img_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图片地址',
  `type_id` int(11) NOT NULL COMMENT '分类',
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `prcture_type_id` (`type_id`),
  KEY `pivture_user_id` (`user_id`),
  CONSTRAINT `pivture_user_id` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`),
  CONSTRAINT `prcture_type_id` FOREIGN KEY (`type_id`) REFERENCES `sn_picture_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_picture
-- 

/*!40000 ALTER TABLE `sn_picture` DISABLE KEYS */;
INSERT INTO `sn_picture`(`id`,`name`,`img_url`,`type_id`,`user_id`) VALUES
(2,'blog','/img/blog/1.jpg',1,4),
(3,'blog','/img/blog/2.jpg',1,4),
(4,'blog','/img/blog/3.jpg',1,4),
(6,'blog','/img/blog/4.jpg',1,4),
(7,'blog','/img/blog/5.jpg',1,4);
/*!40000 ALTER TABLE `sn_picture` ENABLE KEYS */;

-- 
-- Definition of sn_setblog_type
-- 

DROP TABLE IF EXISTS `sn_setblog_type`;
CREATE TABLE IF NOT EXISTS `sn_setblog_type` (
  `id` int(11) NOT NULL,
  `name` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_setblog_type
-- 

/*!40000 ALTER TABLE `sn_setblog_type` DISABLE KEYS */;
INSERT INTO `sn_setblog_type`(`id`,`name`) VALUES
(0,'后台设置'),
(1,'主页设置');
/*!40000 ALTER TABLE `sn_setblog_type` ENABLE KEYS */;

-- 
-- Definition of sn_software_type
-- 

DROP TABLE IF EXISTS `sn_software_type`;
CREATE TABLE IF NOT EXISTS `sn_software_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_software_type
-- 

/*!40000 ALTER TABLE `sn_software_type` DISABLE KEYS */;

/*!40000 ALTER TABLE `sn_software_type` ENABLE KEYS */;

-- 
-- Definition of sn_software
-- 

DROP TABLE IF EXISTS `sn_software`;
CREATE TABLE IF NOT EXISTS `sn_software` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '标题',
  `img` varchar(200) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '图片路径',
  `type_id` int(11) DEFAULT NULL COMMENT '分类',
  `comment_id` int(255) DEFAULT NULL COMMENT '评论',
  `time_create` datetime DEFAULT NULL COMMENT '时间',
  `time_modified` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `software_type_id` (`type_id`),
  CONSTRAINT `software_type_id` FOREIGN KEY (`type_id`) REFERENCES `sn_software_type` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_software
-- 

/*!40000 ALTER TABLE `sn_software` DISABLE KEYS */;

/*!40000 ALTER TABLE `sn_software` ENABLE KEYS */;

-- 
-- Definition of sn_sort
-- 

DROP TABLE IF EXISTS `sn_sort`;
CREATE TABLE IF NOT EXISTS `sn_sort` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '分类名称',
  `description` text CHARACTER SET utf8 COLLATE utf8_general_ci COMMENT '分类描述',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=100 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_sort
-- 

/*!40000 ALTER TABLE `sn_sort` DISABLE KEYS */;
INSERT INTO `sn_sort`(`id`,`name`,`description`) VALUES
(1,'随笔','桜華月想 暮色蒼然'),
(2,'搭建','搭建'),
(3,'编程','编程'),
(7,'转载','转载'),
(8,'全部','全部'),
(9,'异常错误','异常错误'),
(10,'Csharp','Csharp'),
(11,'数据库','数据库');
/*!40000 ALTER TABLE `sn_sort` ENABLE KEYS */;

-- 
-- Definition of sn_talk_type
-- 

DROP TABLE IF EXISTS `sn_talk_type`;
CREATE TABLE IF NOT EXISTS `sn_talk_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_talk_type
-- 

/*!40000 ALTER TABLE `sn_talk_type` DISABLE KEYS */;
INSERT INTO `sn_talk_type`(`id`,`name`) VALUES
(3,'版本更新'),
(4,'测试'),
(5,'生活');
/*!40000 ALTER TABLE `sn_talk_type` ENABLE KEYS */;

-- 
-- Definition of sn_talk
-- 

DROP TABLE IF EXISTS `sn_talk`;
CREATE TABLE IF NOT EXISTS `sn_talk` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `describe` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '简介',
  `text` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容',
  `read` int(11) NOT NULL COMMENT '阅读量',
  `give` int(11) NOT NULL COMMENT '点赞',
  `comment_id` int(11) NOT NULL COMMENT '评论',
  `user_id` int(11) NOT NULL COMMENT '用户',
  `type_id` int(11) NOT NULL,
  `time_create` datetime NOT NULL COMMENT '发表时间',
  `time_modified` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `sn_talk_typeId` (`type_id`),
  CONSTRAINT `lalk_user_id` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`),
  CONSTRAINT `talk_type_id` FOREIGN KEY (`type_id`) REFERENCES `sn_talk_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_talk
-- 

/*!40000 ALTER TABLE `sn_talk` DISABLE KEYS */;
INSERT INTO `sn_talk`(`id`,`title`,`describe`,`text`,`read`,`give`,`comment_id`,`user_id`,`type_id`,`time_create`,`time_modified`) VALUES
(3,'Blog-12.18更新','favorite,博客页面样式更新样式更新,内容页面,时间线页面动态加载组件数据提示框更新为骨架框','<h3>1.样式更新</h3><p><span style=\"color: rgb(68, 68, 68);\">favorite</span>,<span style=\"color: rgb(68, 68, 68);\">博客页面样式更新样式更新</span></p><h3>2.内容页改动</h3><p><span style=\"color: rgb(68, 68, 68);\">内容页面,时间线页面动态加载组件数据提示框更新为骨架框</span></p><h3>3.时间线改动</h3><p><span style=\"color: rgb(68, 68, 68);\">增加one日记动态数据时间线增加跳转到页面详情</span></p>',0,0,0,4,3,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(17,'Blog-12.21更新','','<h3>1.增加页面</h3><p>增加日志详情页面-TalkText.vue, OneSidebar.vue 文章侧边栏界面</p><h3>2.Talk页面改动</h3><p>增加页面跳转至TalkText.vue</p><p>About关于界面增加功能跳转</p><p>One文章页面增加 OneSidebar文章侧边栏</p>',0,0,0,4,3,'2020-12-21 00:00:00','2020-12-18 00:00:00'),
(18,'Blog-12.23更新','优化了Indexs,Talk及侧边栏等页面字体样式及抗齿轮,one页面增加点击弹出详情框及更新了css样式','<h3>1.页面优化</h3><ul><li>优化了Indexs,Talk及侧边栏等页面字体样式及抗齿轮</li><li>one页面增加点击弹出详情框及更新了css样式</li><li>OneSidebar侧边栏时间字段格式优化,增加点击弹出详情页</li><li>Snvodeo视频页面及详情页增加时间字段格式优化</li><li>TalkTest页面头部组件更新</li><li>TimeLine时间组件动态字段更新增加(分类,标签,文章,阅读,字段数)</li><li>Sidebarsn css样式更新</li><li>IndexSidebar 站点信息增加动态更新</li></ul><h3>2.新增</h3><ul><li>增加nprogress顶部加载组件</li><li>增加store状态管理</li><li>增加Transfer文章中转站页面</li></ul><p><br></p><h3>3.页面重构</h3><ul><li>app页面js更改为ts方式重写</li></ul><h3>4.其他优化</h3><ul><li>修复Indextext2页面跳转当前页面不刷新</li><li>封装了内容详情(blogs)css样式</li><li>增加视频图片</li></ul>',0,0,0,4,3,'2020-12-23 00:00:00','2020-12-18 00:00:00'),
(19,'Blog-12.25更新','','<h3>1.页面改动</h3><p>app.vue 删除背景颜色设定</p><p>com.scss 封装line-ome index.css</p><p>增加响应式设定</p><p>导航页面css调整</p><p>收藏页面增加动态数据分类框(之前是静态)</p><p>one侧边栏动态增加字段,文章数量,阅读显示</p><p>删除日志Talk页面顶部信息框,删除侧边栏图标框 Headers.vue 样式调整</p><h3>2.新增内容</h3><p>增加新字体 font.css并应用页面</p><p>增加响应式断点主页面已完成响应式设定</p><p>新增字体文件 新增移动端状态下显示底部导航框bootom</p>',0,0,0,4,3,'2020-12-25 00:00:00','2020-12-18 00:00:00'),
(20,'展望','','<p>是佛挡杀佛的范德萨发</p>',0,0,0,4,3,'2020-12-26 00:00:00','2020-12-18 00:00:00'),
(21,'青春真的结束了吗','','',0,0,0,4,3,'2020-12-26 00:00:00','2020-12-18 00:00:00'),
(22,'Blog正式投入使用','','<p>经过接近一个月时间的项目重构(vue2--&gt;vue3+ts),主要部分功能已经完善。</p><p><strong>以下已完成功能</strong></p><p>主页技术方面的文章阅读</p><p>标签页面方面查找对应的文章进行阅读</p><p>时间线</p><p>导航站</p><p>日志-&gt;只做个人文章展示</p><p><strong>娱乐项</strong></p><p>短文仅供一乐(舔狗日志)</p><p>收藏,博客页面分享各路大神技术博客</p><p><strong>待进行功能</strong></p><p>书单--准备进行</p><p>后台-- 后台系统大部分功能已近完善,基本可以投入生产,但是还有很多细节方面没弄好暂不上线</p><p>留言-- 前端已完成,后台api已完成待导入接口</p><p><strong>待优化功能项</strong></p><p>额!!!!!!! 好像都需要优化</p><p>后续增加一个新页面来追踪自己要做什么,做到什么进度。就叫个人项目进度追踪应该也算是新功能了</p><p><strong>项目架构</strong></p><p>前端项目使用到的技术</p><p><span style=\"color: rgb(136, 136, 136);\">VUE3 -- TS -- Router -- Axios -- Store -- AntDesignVue -- TaiwindCss -- animate.css -- marked</span></p><p>后端项目</p><p>NetCore3.1webApi</p><p><strong>本次更新</strong></p><p>1.增加导航侧边栏 FavSidebar.vue</p><p>2.增加书单页面 Book.vue</p><p>3.增加图片视频展示</p><p>4.删除字体(太大了)</p><p>5.Talk.vue 页面进行重构(想好看点)</p><p><br></p>',0,0,0,4,3,'2020-12-26 00:00:00','2020-12-18 00:00:00');
/*!40000 ALTER TABLE `sn_talk` ENABLE KEYS */;

-- 
-- Definition of sn_user
-- 

DROP TABLE IF EXISTS `sn_user`;
CREATE TABLE IF NOT EXISTS `sn_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'ip地址',
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户名称',
  `email` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '邮箱',
  `pwd` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '密码',
  `photo` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '头像',
  `time_create` datetime NOT NULL COMMENT '注册时间',
  `time_modified` datetime NOT NULL COMMENT '更新时间',
  `nickname` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '称呼',
  `brief` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '简介',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_user
-- 

/*!40000 ALTER TABLE `sn_user` DISABLE KEYS */;
INSERT INTO `sn_user`(`id`,`ip`,`name`,`email`,`pwd`,`photo`,`time_create`,`time_modified`,`nickname`,`brief`) VALUES
(1,'ip','1','81929392@qq.con','1','string','2020-10-19 00:00:00','2020-10-19 00:00:00','测试号','哈哈'),
(4,'ip','kai','851039536@qq.com','kai','string','2020-10-19 00:00:00','2020-10-19 00:00:00','少年','人生有梦,各自精彩');
/*!40000 ALTER TABLE `sn_user` ENABLE KEYS */;

-- 
-- Definition of sn_article
-- 

DROP TABLE IF EXISTS `sn_article`;
CREATE TABLE IF NOT EXISTS `sn_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题 ',
  `sketch` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容简述',
  `text` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '博客内容',
  `read` smallint(8) NOT NULL COMMENT '阅读次数',
  `give` smallint(8) NOT NULL COMMENT '点赞',
  `img` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图片',
  `comment_id` smallint(8) NOT NULL COMMENT '评论',
  `label_id` int(5) NOT NULL COMMENT '标签外键',
  `sort_id` int(5) NOT NULL COMMENT '分类外键',
  `user_id` int(5) NOT NULL COMMENT '用户外键id',
  `time_create` datetime NOT NULL COMMENT '发表时间',
  `time_modified` datetime NOT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  KEY `article_labelsId` (`label_id`),
  KEY `article_sortId` (`sort_id`),
  CONSTRAINT `abelsId` FOREIGN KEY (`label_id`) REFERENCES `sn_labels` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `sortId` FOREIGN KEY (`sort_id`) REFERENCES `sn_sort` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `userId` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=344 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_article
-- 

/*!40000 ALTER TABLE `sn_article` DISABLE KEYS */;
INSERT INTO `sn_article`(`id`,`title`,`sketch`,`text`,`read`,`give`,`img`,`comment_id`,`label_id`,`sort_id`,`user_id`,`time_create`,`time_modified`) VALUES
(2,'c#读写INI文件','在开发中，对INI文件的读写操作。','在开发中，对INI文件的读写操作。\n\n### 引用读写入dll\n\n```js\n//写入\n[DllImport(\"kernel32\")]\nprivate static extern long WritePrivateProfileString(string section, string key, string val, string    filePath);\n//读取\n[DllImport(\"kernel32.dll\")]\nprivate static extern int GetPrivateProfileString(string section, string key, string def,  StringBuilder retVal, int size, string INIPath);\n```\n\n\n\n### 写入ini\n\n```js\npublic void IniWriteValue(string Section, string Key, string Value)\n  {\n   string inipath = \".CONFIG.INI\";\n   WritePrivateProfileString(Section, Key, Value, inipath);\n  }\n\npublic void IniWriteValues() {\n   IniWriteValue(\"CONFIG\", \"Comport\", ComPort);\n  }\n```\n\n\n\n### 读取ini\n\n```js\n StringBuilder temp = new StringBuilder(500);\n   GetPrivateProfileString(\"CONFIG\", \"Player\", \"\", temp, 500, \".\\CONFIG.INI\");\n   Player = temp.ToString();\n```',28,3,'blog/2.jpg',0,23,1,4,'2019-09-19 00:00:00','2021-10-21 00:00:00'),
(19,'axios安装及使用','使用npm安装 $ npm install axios  使用 bower安装 $ bower install axios  使用 cdn: <script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>  main.js:导入','\n### 使用npm安装\n\n`$ npm install axios`\n\n### 使用 bower安装\n\n`$ bower install axios`\n\n### 使用 cdn:\n`<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>`\n\n### main.js:导入\n```csharp\nimport axios from ''axios''\n  Vue.prototype.$http = axios\n  Vue.prototype.$http.defaults.baseURL = '''' // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL\n```\n\n**调用接口使用axios：**\n\n### 1： 接口数据读取\n\n```csharp\nquerygraphic () {\n   let _this = this\n   this.$http.get(''https://localhost:44314/api/Values'').then(res => {\n    _this.list = res.data\n   })\n\n data () {\n  return {\n   list: []\n  }\n\n  **调用赋值：**`v-for=\"queryg in list\":key=\"queryg.id\"  {{ queryg.version }}`\n```\n\n### 2：按id数据读取\n\n```csharp\ngetgrid () {\n   this.$http.get(''https://localhost:44314/api/Values/'' + this.id).then(res => {\n    this.gettext = res.data[0]\n    console.log(this.gettext)\n   })\n\n data () {\n  return {\n   id: this.$route.params.id, // 读取路由传过来的id\n   gettext: {}\n  }\n },\n\n **调用赋值：**\n`{{ gettext.text }}`\n```\n\n\n\n### 3：put更新\n\n```csharp\nthis.$http({\n        url: ''https://localhost:44314/api/Gj/'' + this.id,\n        method: ''put'',\n        contentType: ''application/json;charset=UTF-8'',\n\n        data: {\n          ''id'': this.newinfo.id,\n          ''method'': this.newinfo.method,\n          ''text'': this.newinfo.text,\n          ''type'': this.newinfo.type\n        },\n        dataType: ''json''\n      }).then(res => {\n        console.log(res)\n        if (res.status === 204) {\n          this.open1()\n          console.log(''成功'')\n        } else {\n          this.open4()\n          console.log(''失败'')\n        }\n      }).catch(console.error.bind(console)) // 异常\n```\n\n### 4：delete删除\n\n```csharp\nthis.$http.delete(''https://localhost:44314/api/Gj/'' + row.id).then(res => {\n          if (res.status === 204) {\n            this.$message({\n              type: ''success'',\n              message: ''删除成功!''\n            })\n            this.getgjtype(''vue'') // 重新加载数据\n            this.reload() // 刷新页面\n            // location.reload()// 刷新页面\n            // this.$router.go(0)\n          } else {\n            this.open4()\n          }\n        }).catch(console.error.bind(console)) // 异常\n```',30,5,'blog/1.jpg',34,24,3,4,'2020-07-08 00:00:00','2021-08-02 00:00:00'),
(20,'计数总数良率','计数总数良率','<!--markdown-->\n---\n    double num2;\n    double num1;\n    double num;\n    double countpass;\n    double countfail;\n    String time;\n    private void count()\n    {\n      using (XmlWriter writer = XmlWriter.Create(\".\\count.txt\"))\n      {\n        writer.WriteStartElement(\"setting\");\n        writer.WriteElementString(\"countpass\", Convert.ToString(countpass));\n        writer.WriteElementString(\"countfail\", Convert.ToString(countfail));\n        writer.WriteElementString(\"time\", time);\n      }\n      label12.Text = Convert.ToString(countpass);\n      label13.Text = Convert.ToString(countfail);\n      num = countpass + countfail;\n      label14.Text = Convert.ToString(num);\n      num1 = countpass / num;\n      num2 = num1 * 100;\n      string str1 = String.Format(\"{0:F}\", num2);//默认为保留两位\n      label17.Text = Convert.ToString(str1);\n      Application.DoEvents();\n    }\n\n    private void getcount()\n    {\n      using (XmlReader reader = XmlReader.Create(\".\\count.txt\"))\n      {\n        reader.ReadStartElement(\"setting\");\n        countpass = Convert.ToInt16(reader.ReadElementString(\"countpass\"));\n        countfail = Convert.ToInt16(reader.ReadElementString(\"countfail\"));\n        time = reader.ReadElementString(\"time\");\n        reader.Close();\n        if (time != System.DateTime.Now.ToString(\"d\"))\n        {\n          if (!File.Exists(\".\\counter.csv\"))\n          {\n            FileInfo aFile = new FileInfo(\".\\counter.csv\");\n            aFile.CreateText();\n          }\n          using (StreamWriter sw = new StreamWriter(\".\\counter.csv\", true))\n          {\n            sw.WriteLine(time + \",\" + countpass + \",\" + countfail);\n            time = System.DateTime.Now.ToString(\"d\");\n            countfail = 0;\n            countpass = 0;\n            sw.Close();\n            using (XmlWriter writer = XmlWriter.Create(\".\\count.txt\"))\n            {\n              writer.WriteStartElement(\"setting\");\n              writer.WriteElementString(\"countpass\", Convert.ToString(countpass));\n              writer.WriteElementString(\"countfail\", Convert.ToString(countfail));\n              writer.WriteElementString(\"time\", time);\n              writer.Close();\n            }\n          }\n        }\n      }\n\n      label12.Text = Convert.ToString(countpass);\n      label13.Text = Convert.ToString(countfail);\n      num = countpass + countfail;\n      label14.Text = Convert.ToString(num);\n      num1 = countpass/num;\n      num2 = num1 * 100;\n      string str1 = String.Format(\"{0:F}\", num2);//默认为保留两位\n      label17.Text = Convert.ToString(str1);\n    }',11,2,'blog/3.jpg',2,14,10,4,'2020-07-24 00:00:00','2021-08-02 00:00:00'),
(21,'检查PInvoke签名的调用','检查PInvoke签名的调用','### 使用\n\n    [DllImport(\"Dll.dll\")]改为[DllImport(\"Dll.dll\", CallingConvention=CallingConvention.Cdecl)]\n\n    DllImport的CallingConvention的属性,默认值是CallingCovention.Stdcall, 此处更改成Cdecl(c/c++默认调用方式)\n\n\n原文：[https://blog.csdn.net/xfz0330/article/details/51477769][1]\n版权声明：本文为博主原创文章，转载请附上博文链接！\n\n\n  [1]: https://blog.csdn.net/xfz0330/article/details/51477769',10,0,'blog/2.jpg',1,14,10,4,'2020-07-24 00:00:00','2021-08-02 00:00:00'),
(22,'C# 利用委托事件进行窗体间的传值（转）','引言： 窗体间传值是每个学习WinForm新手的常见问题，最初级的方法就是 在窗体中先获取到要接受值窗体。然后通过.得到某个空间或者属性，直接赋值，这个需要接收放的窗体属性或者空间必须是public ',' 原文：[https://www.cnblogs.com/arcticfish/archive/2020/02/12/12297675.html][1]\n\n### 引言：\n　　窗体间传值是每个学习WinForm新手的常见问题，最初级的方法就是 在窗体中先获取到要接受值窗体。然后通过.得到某个空间或者属性，直接赋值，这个需要接收放的窗体属性或者空间必须是public ，是极不安全的一种方式。在升级一下的新手做法就是在接受窗体中定义一个方法然后通过 调用这个方法来给某个控件或者属性赋值。这两种方法都是非安全的低级方式。非常不建议使用。本文我们讲讲如何通过委托事件（非单纯的委托）来解决窗体间信息传递的问题。\n\n### 场景：\n 通过点击主主窗体From_Main的发送按钮，所有子窗体中显示出发送的内容\n\n\n### 学习前提：\n   \n 对委托有初步了解。如果你对委托一点不了解，建议先看一下本人前一篇关于委托的基础介绍文章。\n\n### 正文：\n#### 定一个委托    \npublic delegate void SendMessageToChildForms(string s); //定义了一个参数是string ，无返回值的委托，名为SendMessageToChildForms。\n\n说明：1.他可以定义在项目中任何可以被访问到的地方（如主窗体，某一个子窗体，或者一个类） 。但原则上定义在一直存在的窗体中，本例在主窗体中的命名空间标题下。\n\n​        2.系统内置了两个定义好的委托类型 Action 和Func ,你也可以直接省略这一步。在第3步实例化他就可以了。其中Action是无返回值的委托，Func是带返回值的委托。他们的输入参个数数都是0~16个。\n\n#### 实例化一个此委托类型的事件\n\n public event SendMessageToChildForms smtcf_event; \n\n说明：1.可以省略event ,public有时也不写，就可以简写成 SendMessageToChildForms smtcf;不利于新手理解，其实他本质就是实例化了一个事件event\n\n　　　2.如果我们使用了微软内置的委托类型Action或者Func 则可以写成这样 public event Action<string> SendMessageToChildForms;  这里string 必须要写，因为没有第1步所以这里需要指明参数列表。\n\n​     3.委托与委托事件的关系，本例中使用了委托事件 ，相对于委托更安全。更低耦合。委托是一个类型，例如SendMessageToChildForms类，事件是委托类型的一个实例 如smtcf_event。\n\n#### 定义具体执行的方法 \n\n    public void ToShowGetMessage(string s)\n    {\n         this.lb_收到内容.Text=s;\n    }\n\n说明：1.具体的功能方法，这里那个窗体需要执行就写在哪个窗体里，比如本例是更新子窗体的显示，所以写到子窗体里，如果换成另一场景：子窗体中删除了当前这条信息，需要更新，那么就定义到主窗体中 \n\n​      \n\n 2.方法的参数列表及返回类型必须与委托完全一致。比如本例，参数列表是一个string消息字符串，返回类型是void空，方法必须是public；\n\n#### 方法绑定到委托上\n　\n    Form_Child frm_child = new Form_Child();\n    smtcf_event+= new SendMessageToChildForms(frm_child.ToShowGetMessage); //在一实例化的一个委托事件上绑定子窗体的具体方法\n    frm_child.Show();\n    \n    Form_Child frm_child2 = new Form_Child();\n    smtcf_event+= new SendMessageToChildForms(frm_child2.ToShowGetMessage); //在一实例化的一个委托事件上绑定子窗体的具体方法\n    frm_child2.Show();\n\n注意：1.把要执行的方法在新窗体初始化时绑定到他里面定义好的委托类型事件上，必须要在子窗体Show()时间之前\n\n​     2.一个委托事件smtcf 可以绑定多个方法。\n\n#### 触发委托\n\n    //委托第5步：触发委托\n    if (smtcf_event!= null) //判断委托事件是否为空，如果委托不为空才执行\n    {\n    smtcf_event.Invoke(this.textBox1.Text.Trim());// 可以省略Invoke 简写为smtcf(this.textBox1.Text.Trim());\n    }\n\n说明：1.必须首先判断一下委托事件smtcf是否为空。再执行；\n　    2.一般 简写为smtcf_event(this.textBox1.Text.Trim());\n\n[1]: https://www.cnblogs.com/arcticfish/archive/2020/02/12/12297675.html',58,0,'blog/2.jpg',0,23,7,4,'2020-07-28 00:00:00','2021-08-02 00:00:00'),
(23,'C# 利用委托事件进行窗体间的传值(简化)','定义委托  public delegate void SendMessageToChildForms(string s); //定义了一个参数是string ，无返回值的委托，名为 SendMessageToChildForms。 委托实例化 // 本质就是实例化了一个事件event  public event SendMessageToChildForms smtcf_event;','### 定义委托\n\n```c#\n public delegate void SendMessageToChildForms(string s); //定义了一个参数是string ，无返回值的委托，名为 SendMessageToChildForms。\n```\n\n### 委托实例化\n\n```c#\n// 本质就是实例化了一个事件event\n public event SendMessageToChildForms smtcf_event;\n```\n\n\n\n###   定义具体执行的方法\n\n```c#\npublic void ToShowGetMessage(string s)\n{\n     this.lb_收到内容.Text=s;\n}\n```\n\n### 绑定方法\n\n```c#\n Parameter frm_child = new Parameter();\n            smtcf_event += frm_child.ToShowGetMessage; //在一实例化的一个委托事件上绑定子窗体的具体方法\n            frm_child.Show();\n```\n\n### 触发委托\n\n```c#\n        if (smtcf_event != null) //判断委托事件是否为空，如果委托不为空才执行\n        {\n            smtcf_event.Invoke(\"12212\");// 可以省略Invoke 简写为smtcf(this.textBox1.Text.Trim());\n        }\n```\n\n',17,2,'blog/4.jpg',0,14,10,4,'2020-07-23 00:00:00','2021-08-02 00:00:00'),
(24,' axios基础封装','新建文件夹 network 在文件新建 request.js request.js：  import axios from ''axios'' export function request (config) {   // 1创建axios实例SXASDASD QW123123`1234YUIYU67890','\n\n### request.js\n\n新建文件夹 network 在文件新建 request.js\n\n```js\nimport axios from ''axios''\nexport function request (config) {\n  // 1创建axios实例\n  const intstance = axios.create({\n    baseURL: ''https://localhost:44314'',\n    timeout: 5000\n    // contentType: ''application/json;charset=UTF-8'',\n    // dataType: ''json''\n  })\n  // 1.axios拦截器\n  intstance.interceptors.request.use(config => {\n    return config\n  }, er => {})\n  // 1.axios响应拦截拦截\n  intstance.interceptors.response.use(res => {\n    return res\n  }, er => {\n  })\n  return intstance(config)\n}\nexport default request //导出\n```\n\n### main.挂载配置\n\n```js\nimport request from ''@/network/request''\n\nnew Vue({\n  el: ''#app'',\n  router,\n  store,\n  request, // 封装的axios\n  components: { App },\n  template: ''<App/>''\n\n})\n```\n\n### vue组件调用\n\n在需要使用axios的vue组件调用\n\n```js\nimport request from ''@/network/request''\n\n  request({ // 查询所有\n        url: ''/api/Gj''\n      }).then(res => {\n        this.tableData = res.data\n      })\n\n request({ // 条件查询\n        url: ''/api/Gjtype/'' + gjtype\n      }).then(res => {\n        this.tableData = res.data\n      })\n\n\n request({ // 添加\n        url: ''/api/Gj'',\n        method: ''POST'',\n        data: {\n          ''id'': 0,\n          ''method'': this.method,\n          ''text'': this.content,\n          ''type'': this.value\n        }\n      }).then(res => {\n        console.log(res)\n        if (res.status === 201) {\n          this.open1()\n          console.log(''成功'')\n        } else {\n          this.open4()\n          console.log(''失败'')\n        }\n      }).catch(console.error.bind(console)) // 异常\n\n\nrequest({// 更新\n        url: ''/api/Gj/'' + this.id,\n        method: ''put'',\n        data: {\n          ''id'': this.newinfo.id,\n          ''method'': this.newinfo.method,\n          ''text'': this.newinfo.text,\n          ''type'': this.newinfo.type\n       }\n      }).then(res => {\n        if (res.status === 204) {\n          this.open1()\n          console.log(''成功'')\n        } else {\n          this.open4()\n          console.log(''失败'')\n        }\n      }).catch(console.error.bind(console)) // 异常\n```\n\n ',3,1,'blog/5.jpg',1,24,3,4,'2020-07-23 00:00:00','2021-10-28 00:00:00'),
(30,'Winform委托创建窗体','示例一 //this表示主窗口的类  this.Invoke((MethodInvoker)delegate  {    f = new Form2();    f.Show();  });','### 示例一\n\n```csharp\n//this表示主窗口的类\n this.Invoke((MethodInvoker)delegate\n {\n   f = new Form2();\n   f.Show();\n });\n```\n\n### 示例二\n \n ```csharp\n //也可以这样写\nnew Thread((ThreadStart)delegate\n {\n   Application.Run(new Form2());\n }).Start();\n```',5,1,'blog/2.jpg',0,14,10,4,'2019-08-20 00:00:00','2021-08-02 00:00:00'),
(31,'SubString的用法','String.SubString(int index,int length) index:开始位置，从0开始 length:你要取的子字符串的长度 //如果传入参数为一个长整, 且大于等于0, //则以这个长整的位置为起始, //截取之后余下所有作为字串. //如若传入值小于0, //系统会抛出ArgumentOutOfRange异常 //表明数范围出界 //如果传入了两个长整参数 //前一个为参数子串在原串的起始位置 //后一个参数为子串的长度 //如不合条件同样出现上述异常','  String.SubString(int index,int length)\n\n    index: // 开始位置，从0开始\n    length:// 你要取的子字符串的长度\n    //如果传入参数为一个长整, 且大于等于0,\n    //则以这个长整的位置为起始,\n    //截取之后余下所有作为字串.\n    //如若传入值小于0,\n    //系统会抛出ArgumentOutOfRange异常\n    //表明数范围出界\n    //如果传入了两个长整参数\n    //前一个为参数子串在原串的起始位置\n    //后一个参数为子串的长度\n    //如不合条件同样出现上述异常\n\n    string my = \"daydayup\";\n    string s1 = my.Substring(0);\n    string s2 = my.Substring(3, 5);\n    string s3 = my.Substring(7);\n    Console.WriteLine(s1);\n    Console.WriteLine(s2);\n    Console.WriteLine(s3);\n    Console.Read();\n',2,0,'blog/3.jpg',0,23,10,4,'2020-11-17 00:00:00','2021-08-02 00:00:00'),
(32,'Regex.Replace只替换字符串一次','概述\r\n想说替换一个字符串里的某段字符，并且只替换一次。\r\n想自己写又麻烦，后来看了下才发现Regex.Replace里有很多其他的参数都没注意。','### 概述\n\n想说替换一个字符串里的某段字符，并且只替换一次。\n想自己写又麻烦，后来看了下才发现Regex.Replace里有很多其他的参数都没注意。\nC#执行一次替换，可以使用这则表达式来实现，正则的Replace有6中重载版本，可以指定替换次数了开始位置。比较类型在构造正则表单时时指定，不在Replace方法中指定。\n\n### Regex构造函数\n```csharp\n    Regex(string pattern)\n    Regex(string pattern,RegexOptions options)\n```\n\n### 参数说明\npattern：要匹配的正则表达式模式\noptions：指定是否要编译，忽略大小写等等\nRegex.Replace方法\n### csharp\n```csharp\nRegex.Replace(string input,string replacement)\nRegex.Replace(string input,string replacement,int count)\nRegex.Replace(string input,string replacement,int count,int startat)\nRegex.Replace(string input,MatchEvaluator evaluator)\nRegex.Replace(string input,MatchEvaluator evaluator,int count)\nRegex.Replace(string input,MatchEvaluator evaluator,int count,int startat)\n```\n### 参数说明x\ninput：要修改的字符串\nreplacement：替换字符串\ncount：进行替换的最大次数\nstartat：输入字符串开始搜索的位置\nevaluator：在每一步计算替换的MatchEvaluator。就是一个函数代理，参数为Match类型，匹配的数据。\n\n### csharp\n```csharp\nasp.net--C#字符串只执行一次替换的示例代码\nstring s = \"aaa\";\nRegex r = new Regex(\"a\");\ns=r.Replace(s,\"b\",1);\nResponse.Write(s);//输出baa\n```',3,0,'blog/4.jpg',0,23,3,4,'2018-12-14 00:00:00','2021-08-02 00:00:00'),
(33,'String类的几个方法','String类的几个方法','## String类的几个方法\n\n```csharp\nString.IndexOf\nString.IndexOf 方法 (Char, Int32, Int32)\n```\n> 报告指定字符在此实例中的第一个匹配项的索引。搜索从指定字符位置开始，并检查指定数量的字符位置。\n\n```csharp\nString.IndexOf(value, startIndex, count)\n```\n### 参数\nvalue：要查找的 Unicode 字符。\nstartIndex：搜索起始位置。\ncount：要检查的字符位置数。\n\n**返回值(Int32)**：\n如果找到该字符，则为 value 的索引位置；否则如果未找到，则为 -1。\n\n### 示例\n```csharp\nstring str = \"深圳市盈基实业有限公司国际通邓事文*深圳市盈基实业有限公司国际通邓事文\";\nLabel1.Text = str.IndexOf(\"中国\").ToString();//返回 -1 \nLabel1.Text = str.IndexOf(\"盈基\").ToString();//返回 3 \nLabel1.Text = str.IndexOf(\"盈基\",10).ToString();//返回21 说明：这是从第10个字符开始查起。\nLabel1.Text = str.IndexOf(\"邓\",15,10).ToString();//返回 -1\nLabel1.Text = str.IndexOf(\"邓\",15,20).ToString();//返回 -32 说明：从第15个字符开始查找，要查找的范围是从第15个字符开始后20个字符，即从第15-35个字符中查找。\nString.LastIndexOf\nString.LastIndexOf 方法\n```\n报告指定的 Unicode 字符或 String 在此实例中的最后一个匹配项的索引位置。\n\n### 名称说明\n\nString.LastIndexOf (Char)	报告指定 Unicode 字符在此实例中的最后一个匹配项的索引位置。\n\nString.LastIndexOf (String)	报告指定的 String 在此实例内的最后一个匹配项的索引位置。\n\nString.LastIndexOf (Char, Int32)	报告指定 Unicode 字符在此实例中的最后一个匹配项的索引位置。该搜索从指定字符位置开始。\n\nString.LastIndexOf (String, Int32)	报告指定的 String 在此实例内的最后一个匹配项的索引位置。该搜索从指定字符位置开始。\n\nString.LastIndexOf (String, StringComparison)	报告指定字符串在当前 String 对象中最后一个匹配项的索引。一个参数指定要用于指定字符串的搜索类型。\n\nString.LastIndexOf (Char, Int32, Int32)	报告指定的 Unicode 字符在此实例内的子字符串中的最后一个匹配项的索引位置。搜索从指定字符位置开始，并检查指定数量的字符位置。\n\nString.LastIndexOf (String, Int32, Int32)	报告指定的 String 在此实例内的最后一个匹配项的索引位置。搜索从指定字符位置开始，并检查指定数量的字符位置。\n\nString.LastIndexOf (String, Int32, StringComparison)	报告指定字符串在当前 String 对象中最后一个匹配项的索引。参数指定当前字符串中的起始搜索位置，以及要用于指定字符串的搜索类型。\n\nString.LastIndexOf (String,Int32,Int32,StringComparison)	报告指定的 String 对象在此实例内的最后一个匹配项的索引位置。参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。\n\n\n\n### 示例：\n```csharp\nstring str = \"深圳市盈基实业有限公司国际通邓事文*深圳市盈基实业有限公司国际通邓事文\";\nLabel1.Text = str.LastIndexOf(\"邓文\").ToString();//返回-1\nLabel1.Text = str.LastIndexOf(\"邓\").ToString();//返回32\nLabel1.Text = str.LastIndexOf(\"邓\"，8).ToString();//返回-1\nLabel1.Text = str.LastIndexOf(\"邓\"，20).ToString();//返回14\nLabel1.Text = str.LastIndexOf(\"邓\"，33).ToString();//返回32\n```\n\n说明：在指定的范围内查找字符，这个范围是上面的输入的参数，理解为，从索引0开始到指定的数值位置范围内查找最后一个匹配的的字符串的位置。示例中，0-8中没有“邓”字，所以返回-1，0-20范围中，有一个“邓”字在索引14位置上，0-33范围中有两个“邓”字，因为LastIndexOf是返回最后一个匹配项索引位置，所以返32，而不是14。\n\n\nString.Substring\nString.Substring 方法\n从此实例检索子字符串。\n\n### 名称说明\n\nString.Substring (Int32)	从此实例检索子字符串。子字符串从指定的字符位置开始。\nString.Substring (Int32, Int32)	从此实例检索子字符串。子字符串从指定的字符位置开始且具有指定的长度。\n\n\n### 示例：\n```csharp\nstring str = \"深圳市盈基实业有限公司国际通邓事文*深圳市盈基实业有限公司国际通邓事文\";\nLabel1.Text = str.Substring(11);//返回 “国际通邓事文*深圳市盈基实业有限公司国际通邓事文”\nLabel1.Text = str.Substring(11,7);//返回 “国际通邓事文*”\n```\n\n### 总结一下：\nIndexOf、LastIndexOf都是返回一个位置，是个整数值；找不到都返回-1；\nIndexOf是从左向右查，LastIndexOf是从右向左查，不管是IndexOf还是LastIndexOf，索引序列都是从左到右的(起始值是0)\nSubstring是字符串截取，返回值是一个截取后的字符串。',2,0,'blog/4.jpg',0,23,10,4,'2019-02-22 00:00:00','2021-08-02 00:00:00'),
(34,'TryParse用法','使用 形式（以decimal为例）： decimal.TryParse(str1,out num1) 功能：将str1转化成decimal类型，若转化成功，将值赋给num1，并返回true; 若转化失败，返回false。','### 使用\n\n- 形式（以decimal为例）： decimal.TryParse(str1,out num1)\n- 功能：将str1转化成decimal类型，若转化成功，将值赋给num1，并返回true;\n- 若转化失败，返回false。\n\n\n### 例1.\n\n```csharp\ndecimal num1=0;\nbool a=decimal.TryParse(\"123\",out num1);\n```\n\n> 能够转化成功，结果为 a 的值为true，num1的值为123.\n\n\n### 例2.\n\n```csharp\ndecimal num1=0;\nbool a=decimal.TryParse(\"ABC\",out num1);\n```\n\n> 转化失败，结果为 a 的值为false，num1的值仍为0；.',3,0,'blog/1.jpg',0,23,10,4,'2019-02-23 00:00:00','2021-08-02 00:00:00'),
(35,'C#随机数生成','使用 在C#中，要生成随机数的方法有好几种，其中下面三种是最常使用到的。  使用Random 类 使用Guid 类 使用RNGCryptoServiceProvider 类','### 使用\n在C#中，要生成随机数的方法有好几种，其中下面三种是最常使用到的。\n\n- 使用Random 类\n- 使用Guid 类\n- 使用RNGCryptoServiceProvider 类\n\n### 1、使用Random 类\n> Random类默认的无参构造函数可以根据当前系统时钟为种子,进行一系列算法得出要求范围内的伪随机数\n\n```csharp\nRandom rd = new Random()\nrd.next(1,10)(生成1~10之间的随机数，不包括10)\n```\n\n> 以上是求10以内随机数的例子，这种随机数可以达到一些要求较低的目标,但是如果在高并发的情况下,Random类所取到的系统时钟种子接近甚至完全一样,就很有可能出现重复\n\n**这里用循环来举例**\n\n ```csharp\nfor(int i=0;i<10;i++)\n      {\n        Random rd = new Random();\n        Console.WriteLine(rd.Next(10,100).ToString());\n      }\n```\n\n> 这个例子会得到10个相同的随机数，应循环完成的时间是非常短，所以根据系统时间作为种子算出的随机数就会是一样的。所以Random循环只适用于要求比较低的情况。\n\n\n\n### 2、使用Guid 类\n\n```csharp\nSystem.Guid\nGUID (Globally Unique Identifier) 全球唯一标识符\nGUID的计算使用到了很多在本机可取到的数字,如硬件的ID码,当前时间等.所计算出的128位整数(16字节)可以接近唯一的输出.\nConsole.WriteLine(Guid.NewGuid().ToString());\n```\n\n**计算结果是xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx结构的16进制数字.当然这个格式也是可以更改的.常用的四种格式：**\n\n\n\n```csharp\n var uuid = Guid.NewGuid().ToString(); // 9af7f46a-ea52-4aa3-b8c3-9fd484c2af12\n var uuidN = Guid.NewGuid().ToString(\"N\"); // e0a953c3ee6040eaa9fae2b667060e09\n var uuidD = Guid.NewGuid().ToString(\"D\"); // 9af7f46a-ea52-4aa3-b8c3-9fd484c2af12\n var uuidB = Guid.NewGuid().ToString(\"B\"); // {734fd453-a4f8-4c5d-9c98-3fe2d7079760}\n var uuidP = Guid.NewGuid().ToString(\"P\"); // (ade24d16-db0f-40af-8794-1e08e2040df3)\n var uuidX = Guid.NewGuid().ToString(\"X\"); // {0x3fa412e3,0x8356,0x428f,{0xaa,0x34,0xb7,0x40,0xda,0xaf,0x45,0x6f}}\n```\n\n\n\n### 3、使用RNGCryptoServiceProvider 类\n\n```csharp\nSystem.Security.Cryptography.RNGCryptoServiceProvider \nRNGCryptoServiceProvider 使用加密服务提供程序 (CSP) 提供的实现来实现加密随机数生成器 (RNG)\nRNGCryptoServiceProvider csp = new RNGCryptoServiceProvider();\nbyte[] byteCsp = new byte[10];\ncsp.GetBytes(byteCsp);\nConsole.WriteLine(BitConverter.ToString(byteCsp));\n```\n> 因该类使用更严密的算法.所以即使如下放在循环中,所计算出的随机数也是不同的.\n\n\n\n```csharp\nfor (int i = 0; i < 10; i++)\n{\n  RNGCryptoServiceProvider csp = new RNGCryptoServiceProvider();\n  byte[] byteCsp = new byte[10];\n  csp.GetBytes(byteCsp);\n  Console.WriteLine(BitConverter.ToString(byteCsp));\n}\n```\n\n> 但是RNGCryptoServiceProvider的计算较为繁琐,在循环中使用会消耗造成大量的系统资源开销,使用时需注意.',2,0,'blog/2.jpg',0,23,10,4,'2019-07-04 00:00:00','2021-08-02 00:00:00'),
(36,'创建异步线程Task','使用 无返回值的方式 方式1: var t1 = new Task(() => TaskMethod(\"Task 1\")); t1.Start(); Task.WaitAll(t1);//等待所有任务结束 注:  任务的状态: Start之前为:Created Start之后为:WaitingToRun','### 使用\n-  **无返回值的方式**\n**方式1:**\n```csharp\nvar t1 = new Task(() => TaskMethod(\"Task 1\"));\nt1.Start();\nTask.WaitAll(t1);//等待所有任务结束\n```\n**注:**\n> 任务的状态:\nStart之前为:Created\nStart之后为:WaitingToRun \n\n**方式2:**\n\n```csharp\nTask.Run(() => TaskMethod(\"Task 2\"));\n```\n\n**方式3:**\n\n```csharp\nTask.Factory.StartNew(() => TaskMethod(\"Task 3\")); 直接异步的方法 \n```\n或者\n```csharp\nvar t3=Task.Factory.StartNew(() => TaskMethod(\"Task 3\"));\nTask.WaitAll(t3);//等待所有任务结束\n```\n**注:**\n> 任务的状态:\nStart之前为:Running\nStart之后为:Running\n\n\n//标记为长时间运行任务,则任务不会使用线程池,而在单独的线程中运行。\n\n```csharp\nTask.Factory.StartNew(() => TaskMethod(\"Task 5\"),    T   askCreationOptions.LongRunning);\n```\n\n\n\n### async/await的实现方式:\n```csharp\nasync static void AsyncFunction()\n{\n      await Task.Delay(1);\n      Console.WriteLine(\"使用System.Threading.Tasks.Task执行异步操作.\");\n      for (int i = 0; i < 10; i++)\n      {\n Console.WriteLine(string.Format(\"AsyncFunction:i={0}\", i));\n      }\n}\n\n public static void Main()\n  {\n    Console.WriteLine(\"主线程执行业务处理.\");\n    AsyncFunction();\n    Console.WriteLine(\"主线程执行其他处理\");\n  }\n\n```\n\n**带返回值的方式**\n\n**方式4:**\n\n```csharp\nTask<int> task = CreateTask(\"Task 1\");\ntask.Start(); \nint result = task.Result;\n```\n\n\n** //创建任务**\n\n```csharp\n Task<int> getsumtask = new Task<int>(() => Getsum());\n //启动任务,并安排到当前任务队列线程中执行任务 (System.Threading.Tasks.TaskScheduler)\n getsumtask.Start();\n Console.WriteLine(\"主线程执行其他处理\");\n //等待任务的完成执行过程。\n getsumtask.Wait();\n //获得任务的执行结果\n```\n\n** async/await的实现:**\n\n```csharp\n async static Task<int> AsyncGetsum()\n  {\n    await Task.Delay(1);\n    int sum = 0;\n    return sum;\n  \n public static void Main()\n  {\n    var ret1 = AsyncGetsum();\n    int result = ret1.Result;         //阻塞主线程\n    Console.WriteLine(\"任务执行结果：{0}\", result);\n  }\n\n```\n\n\n\n### 组合任务.ContinueWith\n\n```csharp\n//创建一个任务\nTask<int> task = new Task<int>(() =>\n{\n  int sum = 0;\n  Console.WriteLine(\"使用Task执行异步操作.\");\n  return sum;\n});\n```\n\n //启动任务,并安排到当前任务队列线程中执行任务(System.Threading.Tasks.TaskScheduler)\n\n```csharp\n task.Start();\n Console.WriteLine(\"主线程执行其他处理\");\n //任务完成时执行处理。\n Task cwt = task.ContinueWith(t =>\n {\n   Console.WriteLine(\"任务完成后的执行结果：{0}\", t.Result.ToString());\n });\n task.Wait();\n cwt.Wait();\n```\n\n### 任务的串行: \n\n```csharp\n ConcurrentStack<int> stack = new ConcurrentStack<int>();\n //t1先串行\n var t1 = Task.Factory.StartNew(() =>\n {\n   stack.Push(1);\n   stack.Push(2);\n });\n\n //t2,t3并行执行\n var t2 = t1.ContinueWith(t =>\n {\n   int result;\n   stack.TryPop(out result);\n   Console.WriteLine(\"Task t2 result={0},Thread id {1}\", result, Thread.CurrentThread.ManagedThreadId);\n});\n\n //t2,t3并行执行\n var t3 = t1.ContinueWith(t =>\n {\n   int result;\n   stack.TryPop(out result);\n   Console.WriteLine(\"Task t3 result={0},Thread id {1}\", result, Thread.CurrentThread.ManagedThreadId);\n });\n\n//等待t2和t3执行完\nTask.WaitAll(t2, t3);\n//t7串行执行\nvar t4 = Task.Factory.StartNew(() =>\n{\n  Console.WriteLine(\"当前集合元素个数：{0},Thread id {1}\", stack.Count, Thread.CurrentThread.ManagedThreadId);\n});\n t4.Wait();\n}\n```\n\n###  子任务\n```csharp\nTask<string[]> parent = new Task<string[]>(state =>\n {\n   Console.WriteLine(state);\n   string[] result = new string[2];\n   //创建并启动子任务\n   new Task(() => { result[0] = \"我是子任务1。\"; }, TaskCreationOptions.AttachedToParent).Start();\n  new Task(() => { result[1] = \"我是子任务2。\"; }, TaskCreationOptions.AttachedToParent).Start();\n   return result;\n }, \"我是父任务，并在我的处理过程中创建多个子任务，所有子任务完成以后我才会结束执行。\");\n //任务处理完成后执行的操作\n parent.ContinueWith(t =>\n {\n   Array.ForEach(t.Result, r => Console.WriteLine(r));\n });\n\n //启动父任务\n parent.Start();\n //等待任务结束 Wait只能等待父线程结束,没办法等到父线程的ContinueWith结束\n //parent.Wait();\n Console.ReadLine();\n }\n\n```\n**动态并行(TaskCreationOptions.AttachedToParent) 父任务等待所有子任务完成后 整个任务才算完成**\n\n```csharp\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace ConsoleApp1\n{\n  class Node\n  {\n    public Node Left { get; set; }\n    public Node Right { get; set; }\n    public string Text { get; set; }\n  }\n\nclass Program\n{\n  static Node GetNode()\n  {\n    Node root = new Node\n    {\n      Left = new Node\n      {\n        Left = new Node\n        {\n          Text = \"L-L\"\n        },\n        Right = new Node\n        {\n          Text = \"L-R\"\n        },\n        Text = \"L\"\n      },\n      Right = new Node\n      {\n        Left = new Node\n        {\n          Text = \"R-L\"\n        },\n        Right = new Node\n        {\n          Text = \"R-R\"\n        },\n        Text = \"R\"\n      },\n      Text = \"Root\"\n    };\n    return root;\n  }\n\n    static void Main(string[] args)\n    {\n      Node root = GetNode();\n      DisplayTree(root);\n    }\n    static void DisplayTree(Node root)\n    {\n      var task = Task.Factory.StartNew(() => DisplayNode(root),\n        CancellationToken.None,\n        TaskCreationOptions.None,\n        TaskScheduler.Default);\n      task.Wait();\n    }\n\n    static void DisplayNode(Node current)\n    {\n      if (current.Left != null)\n        Task.Factory.StartNew(() => DisplayNode(current.Left),\n        CancellationToken.None,\n        TaskCreationOptions.AttachedToParent,\n        TaskScheduler.Default);\n      if (current.Right != null)\n        Task.Factory.StartNew(() => DisplayNode(current.Right),\n        CancellationToken.None,\n        TaskCreationOptions.AttachedToParent,\n        TaskScheduler.Default);\n      Console.WriteLine(\"当前节点的值为{0};处理的ThreadId={1}\", current.Text,  Thread.CurrentThread.ManagedThreadId);\n    }\n  }\n}\n```',6,0,'blog/1.jpg',0,23,10,4,'2018-08-16 00:00:00','2021-08-02 00:00:00'),
(37,'字典Dictionary的用法','在C#中,Dictionary提供快速的基于兼职的元素查找',' \n### 使用\n **要使用Dictionary集合，需要导入C#泛型命名空间**\n  `System.Collections.Generic（程序集：mscorlib）`\n\n### Dictionary的描述\n\n- 1、从一组键（Key）到一组值（Value）的映射，每一个添加项都是由一个值及其相关连的键组成\n- 2、任何键都必须是唯一的\n- 3、键不能为空引用null（VB中的Nothing），若值为引用类型，则可以为空值\n- 4、Key和Value可以是任何类型（string，int，custom class 等）\n\n **Dictionary常用用法：以 key 的类型为 int , value的类型为string 为例**\n\n** 1、创建及初始化**\n`Dictionary<int,string>myDictionary=newDictionary<int,string>();`\n\n** 2、添加元素**\n```csharp\nmyDictionary.Add(1,\"C#\");\nmyDictionary.Add(2,\"C++\");\nmyDictionary.Add(3,\"ASP.NET\");\nmyDictionary.Add(4,\"MVC\");\n```\n** 3、通过Key查找元素**\n\n```csharp\nif(myDictionary.ContainsKey(1))\n{\nConsole.WriteLine(\"Key:{0},Value:{1}\",\"1\", myDictionary[1]);\n }\n```\n\n** 4、通过KeyValuePair遍历元素**\n\n```csharp\nforeach(KeyValuePair<int,string>kvp in myDictionary)\n...{\nConsole.WriteLine(\"Key = {0}, Value = {1}\",kvp.Key, kvp.Value);\n}\n```\n\n**5、仅遍历键 Keys 属性**\n\n```csharp\nDictionary<int,string>.KeyCollection keyCol=myDictionary.Keys;\nforeach(intkeyinkeyCol)\n...{\nConsole.WriteLine(\"Key = {0}\", key);\n}\n```\n\n**6、仅遍历值 Valus属性**\n\n```csharp\nDictionary<int,string>.ValueCollection valueCol=myDictionary.Values;\nforeach(stringvalueinvalueCol)\n...{\nConsole.WriteLine(\"Value = {0}\", value);\n}\n```\n\n**7、通过Remove方法移除指定的键值**\n```csharp\nmyDictionary.Remove(1);\nif(myDictionary.ContainsKey(1))\n...{\nConsole.WriteLine(\"Key:{0},Value:{1}\",\"1\", myDictionary[1]);\n}\nelse\n{\nConsole.WriteLine(\"不存在 Key : 1\"); \n }\n```\n\n### 其它常见属性和方法的说明：  \n- Comparer	获取用于确定字典中的键是否相等的 IEqualityComparer\n- Count\n- 获取包含在 Dictionary中的键/值对的数目\n- Item	获取或设置与指定的键相关联的值\n- Keys	获取包含 Dictionary中的键的集合\n- Values 获取包含 Dictionary中的值的集合\n- Add 将指定的键和值添加到字典中\n- Clear 从 Dictionary中移除所有的键和值\n- ContainsKey 确定 Dictionary是否包含指定的键\n- ContainsValue 确定 Dictionary是否包含特定值\n- GetEnumerator 返回循环访问 Dictionary的枚举数\n- GetType 获取当前实例的 Type （从 Object 继承）\n- Remove 从 Dictionary中移除所指定的键的值\n- ToString 返回表示当前 Object的 String （从 Object 继承）\n- TryGetValue 获取与指定的键相关联的值',3,0,'blog/1.jpg',0,23,10,4,'2019-10-19 00:00:00','2021-08-02 00:00:00'),
(38,'c#十进制转换','1.方法定义  /// <summary> /// 十进制转换 /// </summary> /// <param name=\"hexChar\"></param> /// <returns></returns> public static int HexChar2Value(string hexChar) {     switch (hexChar)     {         case \"0\":         case \"1\":         case \"2\":         case \"3\":         case \"4\":         case \"5\":         case \"6\":         case \"7\":         case \"8\":         case \"9\":             return Convert.ToInt32(hexChar);         case \"a\":         case \"A\":             return 10;         case \"b\":         case \"B\":             return 11;','### 使用\n\n**1.方法定义**\n ```csharp\n/// <summary>\n /// 十进制转换\n /// </summary>\n /// <param name=\"hexChar\"></param>\n /// <returns></returns>\n public static int HexChar2Value(string hexChar)\n {\n     switch (hexChar)\n     {\n         case \"0\":\n         case \"1\":\n         case \"2\":\n         case \"3\":\n         case \"4\":\n         case \"5\":\n         case \"6\":\n         case \"7\":\n         case \"8\":\n         case \"9\":\n             return Convert.ToInt32(hexChar);\n         case \"a\":\n         case \"A\":\n             return 10;\n         case \"b\":\n         case \"B\":\n             return 11;\n         case \"c\":\n         case \"C\":\n             return 12;\n         case \"d\":\n         case \"D\":\n             return 13;\n         case \"e\":\n         case \"E\":\n             return 14;\n         case \"f\":\n         case \"F\":\n             return 15;\n         default:\n             return 0;\n     }\n }\n```\n\n\n ```csharp\npublic int Hex2Ten(string hex)\n    {\n        int ten = 0;\n        for (int i = 0, j = hex.Length - 1; i < hex.Length; i++)\n        {\n            ten += HexChar2Value(hex.Substring(i, 1)) * ((int)Math.Pow(16,         j));\n            j--;\n        }\n        return ten;\n    }\n\n```\n\n**2.方法调用**\n\n`(ushort)con.Hex2Ten(con.headset_vid), (ushort)con.Hex2Ten(con.headset_pid)`',4,0,'blog/1.jpg',0,23,10,4,'2019-08-24 00:00:00','2021-08-02 00:00:00'),
(39,'VS2019+EF6连接Mysql','使用 开发环境：Win10 + VS2019 Mysql服务器版本：8.0.16  一、下载并安装插件(必备)  MySQL-Connector-net-6.9.12 链接https://cdn.mysql.com//Downloads/Connector-Net/mysql-connector-net-6.9.12.msi','### 使用\n\n> 开发环境：Win10 + VS2019\nMysql服务器版本：8.0.16\n\n**一、下载并安装插件(必备)**\n\nMySQL-Connector-net-6.9.12  链接`https://cdn.mysql.com//Downloads/Connector-Net/mysql-connector-net-6.9.12.msi`\nMySQL for Visual Studio 2.0.5  链接`https://cdn.mysql.com//Downloads/MySQL-for-VisualStudio/mysql-for-visualstudio-2.0.5.msi`\n\n**二、创建新的（控制台）项目**\n\n用Nuget方式安装MySql.Data.Entity-6.9.12，MySql.Data-6.9.12\n\n注意！！！ 安装的2个dll版本号必须一致（否则各种坑秀的你头皮发麻）以及对应MySQL-Connector-net版本相同\n\n**三、添加 ADO.NET 实体数据模型 选择“MySQL DataBase”，填写信息**\n\n**四、控制台测试运行**\n\n```csharp\nstatic void Main(string[] args)\n{\n    using (var db = new Model1())\n    {\n      var ss = (from t in db.gjs where t.id==2\n                     select t).First();\n      Console.WriteLine( ss.method,ss.text);\n      Console.WriteLine(\"成功\");\n      Console.Read();\n}\n}\n```',1,0,'blog/1.jpg',0,7,3,4,'2019-11-14 00:00:00','2021-08-02 00:00:00'),
(40,'winfrom中WebBrowser调用本地html(转)','相关涉及汇总： C#Webbrowser中屏蔽弹出窗口及脚本错误提示 -> http://blog.csdn.net/wonsoft/article/details/5197015 C# webbrowser中新窗口在Webbrowser内打开屏蔽网页JS错误 ->','### 相关涉及汇总：\n\n C#Webbrowser中屏蔽弹出窗口及脚本错误提示 -> http://blog.csdn.net/wonsoft/article/details/5197015\n C# webbrowser中新窗口在Webbrowser内打开屏蔽网页JS错误 -> http://blog.csdn.net/jiangqin115/article/details/40710883\n\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\n\nnamespace localindex\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n        }\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            webBrowser1.ScriptErrorsSuppressed = true; //禁用错误脚本提示\n            webBrowser1.IsWebBrowserContextMenuEnabled = false; // 禁用右键菜单\n            webBrowser1.WebBrowserShortcutsEnabled = false; //禁用快捷键\n            webBrowser1.AllowWebBrowserDrop = false; // 禁止文件拖动 \n            webBrowser1.Navigate(Application.StartupPath + @\"\\assets\\index.html\");\n            webBrowser1.Navigated += WebBrowserNavigatedEventHandler;\n            webBrowser1.DocumentCompleted += WebBrowserDocumentCompletedEventHandler;\n            webBrowser1.Document.Window.Error += new HtmlElementErrorEventHandler(Window_Error);\n            webBrowser1.NewWindow += CancelEventHandler;\n        }\n        //禁用新窗口打开\n        public void CancelEventHandler(object sender, CancelEventArgs e)\n        {\n            e.Cancel = true;//\n        }\n        private void Window_Error(object sender, HtmlElementErrorEventArgs e)\n        {\n            e.Handled = true;\n        }\n        //后发生\n        public void WebBrowserDocumentCompletedEventHandler(object sender, WebBrowserDocumentCompletedEventArgs e)\n        {\n            MessageBox.Show(\"DocumentCompleted\");\n        }\n        //先发生\n        public void WebBrowserNavigatedEventHandler(object sender, WebBrowserNavigatedEventArgs e)\n        {\n            MessageBox.Show(\"Navigated\");\n        }\n    }\n}\n```\n\n原文链接：https://blog.csdn.net/Joyhen/article/details/78082207',0,0,'blog/1.jpg',0,14,10,4,'2020-09-01 00:00:00','2021-08-02 00:00:00'),
(41,'C# DataTable使用方法详解(转)','在项目中常常常使用到DataTable,假设DataTable使用得当，不仅能使程序简洁有用，并且可以提高性能，达到事半功倍的效果，现对DataTable的使用技巧进行一下总结。','\n### 使用\n在项目中常常常使用到DataTable,假设DataTable使用得当，不仅能使程序简洁有用，并且可以提高性能，达到事半功倍的效果，现对DataTable的使用技巧进行一下总结。\n### 1、添加引用\n```\nusing System.Data;\n```\n\n### 2、创建表\n\n```c++\n//创建一个空表\nDataTable dt = new DataTable();\n//创建一个名为\"Table_New\"的空表\nDataTable dt = new DataTable(\"Table_New\");\n```\n\n### 3、创建列\n\n```c#\n//1.创建空列\nDataColumn dc = ``new` `DataColumn();\ndt.Columns.Add(dc);\n//2.创建带列名和类型名的列(两种方式任选其一)\ndt.Columns.Add(\"column0\", System.Type.GetType(\"System.String\"));\ndt.Columns.Add(\"column0\", typeof(String));\n//3.通过列架构添加列\nDataColumn dc = new DataColumn(\"column1\",System.Type.GetType(\"System.DateTime\"));\nDataColumn dc = new DataColumn(\"column1\", typeof(DateTime));\ndt.Columns.Add(dc);\n```\n\n### 4、创建行\n\n```c#\n//1.创建空行\nDataRow dr = dt.NewRow();\ndt.Rows.Add(dr);\n//2.创建空行\ndt.Rows.Add();\n//3.通过行框架创建并赋值\ndt.Rows.Add(\"张三\",DateTime.Now);//Add里面参数的数据顺序要和dt中的列的顺序对应 \n//4.通过复制dt2表的某一行来创建\ndt.Rows.Add(dt2.Rows[i].ItemArray);\n```\n\n### 5、赋值和取值\n\n```c#\n//新建行的赋值\nDataRow dr = dt.NewRow();\ndr[0] = \"张三\";//通过索引赋值\ndr[\"column1\"] = DateTime.Now; //通过名称赋值\n//对表已有行进行赋值\ndt.Rows[0][0] = \"张三\"; //通过索引赋值\ndt.Rows[0][\"column1\"] = DateTime.Now;//通过名称赋值\n//取值\nstring name=dt.Rows[0][0].ToString();\nstring time=dt.Rows[0][\"column1\"].ToString();\n```\n\n### 6、筛选行\n\n```\n//选择column1列值为空的行的集合\nDataRow[] drs = dt.Select(``\"column1 is null\"``);\n//选择column0列值为\"李四\"的行的集合\nDataRow[] drs = dt.Select(``\"column0 = ''李四''\"``);\n//筛选column0列值中有\"张\"的行的集合(模糊查询)\nDataRow[] drs = dt.Select(``\"column0 like ''张%''\"``);``//如果的多条件筛选，可以加 and 或 or\n//筛选column0列值中有\"张\"的行的集合并按column1降序排序\nDataRow[] drs = dt.Select(``\"column0 like ''张%''\"``, ``\"column1 DESC\"``);\n```\n\n### 7、删除行\n\n```c#\n//使用DataTable.Rows.Remove(DataRow)方法\ndt.Rows.Remove(dt.Rows[0]);\n//使用DataTable.Rows.RemoveAt(index)方法\ndt.Rows.RemoveAt(0);\n//使用DataRow.Delete()方法\ndt.Row[0].Delete();\ndt.AcceptChanges();\n```\n\n```c#\n//-----区别和注意点-----\n//Remove()和RemoveAt()方法是直接删除\n//Delete()方法只是将该行标记为deleted，但是还存在，还可DataTable.RejectChanges()回滚，使该行取消删除。\n//用Rows.Count来获取行数时，还是删除之前的行数，需要使用DataTable.AcceptChanges()方法来提交修改。\n//如果要删除DataTable中的多行，应该采用倒序循环DataTable.Rows，而且不能用foreach进行循环删除，因为正序删除时索引会发生变化，程式发生异常，很难预料后果。\nfor (int i = dt.Rows.Count - 1; i >= 0; i--)\n{\n　　dt.Rows.RemoveAt(i);\n}\n```\n\n### 8、复制表\n\n```c#\n//复制表，同时复制了表结构和表中的数据\nDataTable dtNew = new DataTable();\ndtNew = dt.Copy();\n//复制表\nDataTable dtNew = dt.Copy(); //复制dt表数据结构\ndtNew.Clear() //清空数据\nfor(int i = 0; i < dt.Rows.Count; i++)\n{\n if(条件语句)\n {\n   dtNew.Rows.Add(dt.Rows[i].ItemArray); //添加数据行\n }\n}\n//克隆表，只是复制了表结构，不包括数据\nDataTable dtNew = new DataTable();\ndtNew = dt.Clone();\n//如果只需要某个表中的某一行\nDataTable dtNew = new DataTable();\ndtNew = dt.Copy();\ndtNew.Rows.Clear();//清空表数据\ndtNew.ImportRow(dt.Rows[0]);//这是加入的是第一行\n```\n\n### 9、表排序\n\n```c#\nDataTable dt = new DataTable();//创建表\ndt.Columns.Add(\"ID\", typeof(Int32));//添加列\ndt.Columns.Add(\"Name\", typeof(String));\ndt.Columns.Add(\"Age\", typeof(Int32));\ndt.Rows.Add(new object[] { 1, \"张三\",20});//添加行\ndt.Rows.Add(new object[] { 2, \"李四\",25});\ndt.Rows.Add(new object[] { 3, \"王五\",30});\nDataView dv = dt.DefaultView;//获取表视图\ndv.Sort = \"ID DESC\";//按照ID倒序排序\ndv.ToTable();//转为表\n```\n转自https://www.cnblogs.com/qianqian528/p/8456351.html',61,11,'blog/1.jpg',0,14,7,4,'2020-09-01 00:00:00','2021-08-02 00:00:00'),
(42,'Dapper链接MySQL','使用 1.首先配置好一个数据库中存在的类表：info public int action_id { get; set; }  2.添加Dapper和MYSQL的扩展包 Mysql.Date.dll Dapper  3.添加数据库链接代码  //数据库连接配置信息; public static string constr = \"server = localhost;User Id = root','### 使用\n**1.首先配置好一个数据库中存在的类表：info**\n`public int action_id { get; set; }`\n\n**2.添加Dapper和MYSQL的扩展包**\n`Mysql.Date.dll  Dapper`\n\n**3.添加数据库链接代码**\n```csharp\n//数据库连接配置信息;\npublic static string constr = \"server = localhost;User Id = root;password = 123456;Database = ecshop\";\n```\n\n**4.增删改查方法**\n   ```csharp\n    /// <summary>\n    /// 无条件查询所有;\n    /// </summary>\n    /// <returns></returns>\n    public static List<Info> Query()\n    {\n      using (IDbConnection connection = new MySqlConnection(constr))\n      {\n        return connection.Query<Info>(\"select * from sdx_admin_action\").ToList();\n      }\n    }\n    /// <summary>\n    /// 设置Info对象并返回\n    /// </summary>\n    /// <param name=\"var_parent_id\"></param>\n    /// <param name=\"var_action_code\"></param>\n    /// <param name=\"var_relevance\"></param>\n    /// <returns></returns>\n\n    public static Info SetInfo(int var_parent_id,string var_action_code, string var_relevance)\n    {\n      Info tmp = new Info();\n      tmp.parent_id = var_parent_id;\n      tmp.action_code = var_action_code;\n      tmp.relevance = var_relevance;\n      return tmp;\n    }\n\n```\n\n```csharp\n  /// <summary>\n    /// 执行插入,插入单条信息；\n    /// </summary>\n    /// <returns></returns>\n    public static int Insert(Info varInfo)\n    {\n      using (IDbConnection connection = new MySqlConnection(constr))\n      {\n        return connection.Execute(\n          \"insert into sdx_admin_action(parent_id,action_code,relevance) values(@parent_id,@action_code,@relevance)\", varInfo);\n      }\n    }\n```\n\n```csharp\n /// <summary>\n    /// 批量执行插入;\n    /// </summary>\n    /// <param name=\"varInfo\"></param>\n    /// <returns></returns>\n    public static int Insert(List<Info> varInfo)\n    {\n      using (IDbConnection connection = new MySqlConnection(constr))\n      {\n        return connection.Execute(\n          \"insert into sdx_admin_action(parent_id,action_code,relevance) values(@parent_id,@action_code,@relevance)\",varInfo\n          );\n      }\n    }\n```\n\n\n\n```csharp\n    /// <summary>\n    /// 删除指定条件的行信息;\n    /// </summary>\n    /// <param name=\"info\"></param>\n    /// <returns></returns>\n    public static int Delete(Info info)\n    {\n      using (IDbConnection connection = new MySqlConnection(constr))\n      {\n        return connection.Execute(\n          \"delete from sdx_admin_action where action_code=@action_code\",info\n          );\n      }\n    }\n\n```\n\n\n  ```csharp\n  /// <summary>\n    /// 更新\n    /// </summary>\n    /// <param name=\"info\"></param>\n    /// <returns></returns>\n    public static int Update(Info info)\n    {\n      using (IDbConnection connection = new MySqlConnection(constr))\n      {\n        return connection.Execute(\n          \"Update sdx_admin_action set action_code=@action_code where parent_id=@parent_id\",info\n          );\n      }\n    }\n```\n\n**5.数据调用**\n\n   ```csharp\n   /*Info One = new Info();\n      One.parent_id = 2;\n      One.action_code = \"小弱鸡\";\n      One.relevance = \"here~\";*/\n      //插入\n      //Insert(SetInfo(3,\"小弱鸡三号\",\"hahahh\"));\n      //批量插入\n      /*List<Info> Infos = new List<Info>();\n      Infos.Add(SetInfo(4, \"小弱鸡四号\", \"sdfeff\"));\n      Infos.Add(SetInfo(5, \"小弱鸡五号\", \"sdfsdfdf\"));\n      Infos.Add(SetInfo(6, \"小弱鸡六号\", \"sdfe多维ff\"));\n      Insert(Infos);*/\n      //删除;\n      //Delete(SetInfo(2, \"小弱鸡\", \"here~\"));\n      //更新\n      //Update(SetInfo(2, \"小弱鸡二号·改\", \"hahahh\"));\n      List<Info> test = Query();\n      string TestInfo = \"\";\n      for (int i = 0; i < test.Count; i++)\n      {\n        TestInfo = test[i].action_id.ToString() + \" , \" + test[i].parent_id + \" , \" + test[i].action_code + \" , \" + test[i].relevance;\n        Console.WriteLine(TestInfo);\n      }\n      Console.ReadLine();\n    }\n```',3,0,'blog/1.jpg',0,7,11,4,'2020-09-01 00:00:00','2021-08-02 00:00:00'),
(43,'MySql.Data.dll','使用 MySql.Data.dll提供以下8个类： MySqlConnection: 连接MySQL服务器数据库。 MySqlCommand:执行一条sql语句。 MySqlDataReader: 包含sql语句执行的结果，并提供一个方法从结果中阅读一行。','### 使用\n\n`MySql.Data.dll`提供以下8个类：\n\n`MySqlConnection`: 连接MySQL服务器数据库。\n\n`MySqlCommand`:执行一条sql语句。\n\n`MySqlDataReader`: 包含sql语句执行的结果，并提供一个方法从结果中阅读一行。\n\n`MySqlTransaction`: 代表一个SQL事务在一个MySQL数据库。\n\n`MySqlException`: MySQL报错时返回的Exception。\n\n`MySqlCommandBuilder`: Automatically generates single-table commands used to reconcile changes made to a DataSet with the associated MySQL database.\n\n`MySqlDataAdapter`: Represents a set of data commands and a database connection that are used to fill a data set and update a MySQL database.\n\n`MySqlHelper`: Helper class that makes it easier to work with the provider.\n\n### 捕捉异常(`MySqlException类`)\n连接错误时MySqlConnection会返回一个MySqlException，其中包括2个变量:\n\n```csharp\ncatch (MySqlException ex)\n{\n  switch (ex.Number)\n  {\n    case 0:\n    Console.WriteLine(\"Cannot connect to server. Contact administrator\");\n    break;\n  case 1045:\n    Console.WriteLine(\"Invalid username/password, please try again\");\n    break;\n  }\n}\n```\n\n ### 增删查改的代码(`MySqlCommand`类、`MySqlDataReader`类)\n\n- `ExecuteReader`——用于查询数据库。查询结果是返回MySqlDataReader对象，`MySqlDataReader`包含sql语句执行的结果，并提供一个方法从结果中阅读一行。\n- `ExecuteNonQuery`——用于插入、更新和删除数据。\n- `ExecuteScalar`——用于查询数据时，返回查询结果集中第一行第一列的值，即只返回一个值。',2,0,'blog/1.jpg',0,7,11,4,'2019-10-12 00:00:00','2021-08-02 00:00:00'),
(44,'连接Mysql数据库','使用 string constr = \"database=test;Password=ouyang;User ID=root;server=localhost\";//数据库连接语句 MySqlConnection mysqlcon = new MySqlConnection(constr);//建立新的数据库连接  MySqlConnection conn = new MySqlConnection(constr);//连接数据库   conn.Open();//打开数据库  MySqlDataAdapter sda = new MySqlDataAdapter(\"select * from post\", conn);//  DataTable table = new DataTable();','### 使用\n\n```csharp\nstring constr = \"database=test;Password=ouyang;User ID=root;server=localhost\";//数据库连接语句 MySqlConnection mysqlcon = new MySqlConnection(constr);//建立新的数据库连接\n```\n\n```csharp\n MySqlConnection conn = new MySqlConnection(constr);//连接数据库 \n conn.Open();//打开数据库\n MySqlDataAdapter sda = new MySqlDataAdapter(\"select * from post\", conn);//\n DataTable table = new DataTable();\n sda.Fill(table);//填充数据库\n this.dataGridView1.AutoGenerateColumns = true;\n this.dataGridView1.DataSource = table;\n this.dataGridView1.EditMode = DataGridViewEditMode.EditOnEnter;\n conn.Close();//关闭数据库\n```',2,0,'blog/1.jpg',0,7,11,4,'2020-07-04 00:00:00','2021-08-02 00:00:00'),
(45,'利用定时器自动备份数据库（mysql）','1:引用dll MySql.Data.dll MySqlbackup.dll  2：建一个数据连接静态类 public static class mysql { public static string constr = \"database=test;Password=密码;','### 引用dll\n\nmysql.data.dll是MySQL数据库中一款必备的驱动文件，主要用于.net编程和MySQL数据库的连接，包含不同版本的mysql.data.dll，支持32位和64位系统\n\nMySqlBackup快速备份或还原 MySql数据库，原理是使用MySqlBackup.dll 中的备份和还原方法，将数据库的信息转换为对应的sql语句，然后进行处理。\n\n```\nMySql.Data.dll\nMySqlbackup.dll\n```\n\n### 静态类\n\n新建一个连接字符串静态类\n\n```js\npublic static class mysql\n{\npublic static string constr = \"database=test;Password=密码;user ID=root;server=ip地址\";\npublic static MySqlConnection conn = new MySqlConnection(constr);\n}\n```\n\n### 定时器启动\n\nwinform\n\n```js\ntimer1.Interval = 1000; //代表一秒运行一次\ntimer1.Enabled = true; //启动\n```\n\n\n\n### 备份代码\n\n利用winform窗体 timer定时器控件\n\nC#调用MySqlBackup.dll 备份Mysql数据库\n\n```js\nprivate void timer1_Tick(object sender, EventArgs e) \n{\n	if (booql) \n	{\n		booql = false;\n		if (DateTime.Now.Hour == 10 && DateTime.Now.Minute == 00) //时间10点 \n		{\n			string time1 = System.DateTime.Now.ToString(\"d\").Replace(\"/\", \"-\");\n			string file = \".//mysql/\" + time1 + \"_test.sql\";\n			using (MySqlCommand cmd = new MySqlCommand()) \n			{\n				using (MySqlBackup mb = new MySqlBackup(cmd)) \n				{\n					cmd.Connection = mysql.conn;\n					mysql.conn.Open();\n					mb.ExportToFile(file);\n					mysql.conn.Close();\n					MessageBox.Show(\"数据库已自动备份本地\");\n				}\n			}\n		}\n	}\n}\n```\n',3,0,'blog/1.jpg',0,7,11,4,'2020-09-01 00:00:00','2021-08-02 00:00:00'),
(46,'mysql8.0.18可视化安装教程详解','一、MySql 8.0.18安装** 1.百度搜索windows for mysql  2.选择MySQL :: Download MySQL Installer-或者腾讯管家软件管理可快速下载  3.选择下载第二(mysql-installer-community-8.0.18.0.msi）','###  一、MySql 8.0.18安装**\n\n1.百度搜索windows for mysql\n\n2.选择MySQL :: Download MySQL Installer-或者腾讯管家软件管理可快速下载\n\n3.选择下载第二(mysql-installer-community-8.0.18.0.msi）\n\n4.直接开始下载\n\n5.下载完成后鼠标右键安装\n\n6.点击运行\n\n7.勾选同意点击next\n\n8.勾选Custom自定义，点击next\n\n9.选择MySQL Servers >MySQL Server>MySQL Server 8.0.18 - X64 到右侧，点击next\n\n10.点击Execute ，点击next\n\n11.点击Execute\n\n12.点击next\n\n13.点击next\n\n14.点击next\n\n15.点击next\n\n16.点击next\n\n17.设置root密码（一定要记住此密码）设置完成后点击next\n\n18.点击next\n\n19.选择Execute\n\n20.等所有的按钮变绿后点击finish\n\n21.点击next\n\n22.点击finish安装完成\n\n###  二、配置环境变量\n\n1.鼠标右击我的电脑**属性**选择**高级系统设置**\n\n2.点击环境变量\n\n3.选择**系统变量**中的**Path**（路径）点击编辑\n\n4.点击新建\n\n5.然后点击浏览\n\n6.选择安装好的MySQL bin目录，系统默认目录一般为（C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin）点击确定环境变量设置完成\n\n### 三、连接测试\n\n1.打开Navicat点击连接下的MySQL\n\n2.输入以下内容（连接名随便取，主机名IP地址在本机的输入localhost，端口为安装时默认3306，用户名为root，密码是安装时的密码），输入完成点击连接测试\n\n3.如果如下显示连接成',2,0,'blog/1.jpg',0,7,3,4,'2020-09-01 00:00:00','2021-08-02 00:00:00'),
(47,'navicat for mysql报错1251解决办法','','### 改密码方式\n用管理员身份打开cmd \n\n```\n   mysql -uroot -p\n```\n\n###  输入密码\n进入mysql执行下面三个命令\n\n```\n    use mysql;\n```\n\n### 更改密码\n\n```\n  ALTER USER ''root''@''localhost'' IDENTIFIED WITH mysql_native_password BY ''你的密码'';\n```\n\n```\nFLUSH PRIVILEGES;\n```\n\n',2,0,'blog/1.jpg',0,7,3,4,'2020-09-01 00:00:00','2021-08-02 00:00:00'),
(48,'EntityFramework6中执行SQL语句','使用 在数据上下文DBModel的实例中有个Database属性，其中有两组方法.ExecuteSqlCommand()和.SqlQuery()。它们都可以执行SQL语句，过.ExecuteSqlCommand()是不返回结果的，只返回受影响的行数','### 使用\n\n在数据上下文`DBModel`的实例中有个`Database`属性，其中有两组方法`.ExecuteSqlCommand()`和`.SqlQuery()`。它们都可以执行SQL语句，过`.ExecuteSqlCommand()`是不返回结果的，只返回受影响的行数，所以`.ExecuteSqlCommand()`更适合执行创建、更新、删除操作。`.SqlQuery()`则会返回查询到的结果，并将结果保存在数据实体中，所以更适合执行查询操作\n\n- 使用`.ExecuteSqlCommand()`实现创建、更新、删除\n- `.ExecuteSqlCommand()`的使用方法也很简单，直接传入SQL语句就可以了，执行完成后会返回受影响的行数。\n\n```csharp\nusing (var db = new DBModel()) //创建数据库上下文\n{\n  //同步的方式执行SQL，并返回受影响的行数\n  int result = db.Database.ExecuteSqlCommand(@\"CREATE TABLE `test`.`test` (\n         `id` INT NOT NULL,\n         PRIMARY KEY(`id`)); \");\n  //使用SqlParameter传值可以避免SQL注入\n  var p_name = new SqlParameter(@name, 萝莉);\n  var p_age = new SqlParameter(@age, 13);\n  //如果使用的是MySql数据库 需要SqlParameter把替换为MySqlParameter\n  //var p_name = new MySqlParameter(@name, 萝莉);\n  //var p_age = new MySqlParameter(@age, 13);\n  //更改学生年龄\n  result = db.Database.ExecuteSqlCommand(@\"UPDATE `test`.`student`\n                      SET `age` = @age\n                      WHERE `name` = @name;\", p_age, p_name);\n  //异步的方式执行SQL，并返回受影响的行数\n  Task<int> result2 = db.Database.ExecuteSqlCommandAsync(\"DROP TABLE `test`.`test`;\");\n}\n\n```\n- 如果需要创建或删除当前数据库，`Database`属性中还存在`.Create()` 和`.Delete()`方法，它们不接受参数，返回一个bool值表示执行成功或失败。\n- 使用`.SqlQuery()`查询数据\n- 那么如果我只想获取姓名和年龄，那就得单独定义一个类（其中包含一个`string`类型的name和`int`类型的age），来保存数据了。\n\n```asp\nclass temp\n{\n  public string name { get; set; }\n  public int age { get; set; }\n}\nstatic void Main(string[] args)\n{\n  using (var db = new DBModel()) //创建数据库上下文\n  {\n    //查询叫萝莉的学生信息，并指定返回值类型为student\n    DbRawSqlQuery<student> result1 = db.Database.SqlQuery<student>(\"SELECT * FROM test.student WHERE name = ''萝莉''\");\n    //也可以这样指定返回值类型\n    //DbRawSqlQuery result1 = db.Database.SqlQuery(typeof(student), \"SELECT * FROM test.student WHERE name = ''萝莉''\");\n    Console.WriteLine(result1.FirstOrDefault().name); //打印姓名\n    DbRawSqlQuery<int> result2 = db.Database.SqlQuery<int>(\"SELECT count(*) FROM test.student\");\n    Console.WriteLine(result2.FirstOrDefault());  //打印有多少学生\n    //只查询学生的年龄与姓名\n    var result3 = db.Database.SqlQuery<temp>(\"SELECT `name`,`age` FROM test.student;\");\n    foreach (temp item in result3)\n    {\n      Console.WriteLine(item.name + \":\" + item.age);\n    }\n  }\n```\n```asp\n 使用`DbSet<T>`下的`.SqlQuery()`\n 在每个数据实体集合DbSet<T>下也有一个`.SqlQuery()`，功能与上面介绍的一样，只不过`DbSet<T>`下的`.SqlQuery()`只能返回`DbSet<T>`中包含的类型。但`DbSet<T>`下的`.SqlQuery()`在返回数据的同时还会让数据库上下文（`DBModel`）跟踪返回数据的状态，如果返回的数据发生了修改，就可以使用.SaveChanges()将结果直接保存回数据库。而`.Database.SqlQuery()`查出的结果则是做不到的。\n\nusing (var db = new DBModel()) //创建数据库上下文\n{\n  //查询叫萝莉的学生信息，并修改她的年龄\n  student result1 = db.students.SqlQuery(\"SELECT * FROM test.student WHERE name = ''萝莉''\").FirstOrDefault();\n  result1.age = 13;  //通过实体集合下.SqlQuery查询到的数据，修改之后是可以保存到数据库的\n  student result2 = db.Database.SqlQuery<student>(\"SELECT * FROM test.student WHERE name = ''旺财''\").FirstOrDefault();\n  result2.age = 21;  //因为使用的是.Database.SqlQuery查询到的，所以这里的修改不会保存到数据库\n  //如果希望.Database.SqlQuery下查出的数据在修改后也能保存到数据库\n  student result3 = db.Database.SqlQuery<student>(\"SELECT * FROM test.student WHERE name = ''小明''\").FirstOrDefault();\n  result3.age = 36;\n  db.Entry<student>(result3).State = System.Data.Entity.EntityState.Modified; //通知数据上下文，这条记录也被修改了\n  db.SaveChanges();\n}\n```',2,0,'blog/1.jpg',0,21,3,4,'2020-09-01 00:00:00','2021-08-02 00:00:00'),
(49,'EntityFramework6完成增删查改和事务','使用EF读取数据 using (var db = new Model1())   {     var ss = (from t in db.gjs where t.id==2        select t).First();     Console.WriteLine( ss.method,ss.text);     Console.WriteLine(\"成功\");     Console.Read();   }','\n### 使用EF读取数据\n    using (var db = new Model1())\n      {\n        var ss = (from t in db.gjs where t.id==2\n           select t).First();\n        Console.WriteLine( ss.method,ss.text);\n        Console.WriteLine(\"成功\");\n        Console.Read();\n      }\n\n     using (var db = new Model1())\n        {\n          var result = from i in db.gjtypes\n                 select i;\n          foreach (var s in result)\n          {\n            skinComboBox1.Items.Add(s.type);\n            skinListView1.Items.Add(s.type);\n          }\n        }\n\n\n\n### 使用EF添加数据\n\n- 向数据库中添加数据就跟往List<>集合添加数据一样，不过最后需要调用SaveChanges()向数据库保存一下数据。\n\n ```csharp\nusing (var db = new Model1())\n      {\n        var s = new gj();\n        s.method = \"2\";\n        s.text = \"1\";\n        s.type = \"EntityFramework\";\n        db.gjs.Add(s);\n        db.SaveChanges();  //将修改保存到数据库中\n      }\n```\n\n### 使用EF修改数据使用EF修改数据\n\n 先查询出你要修改的那条数据，之后直接更改其中的值就可以了。\n\n```csharp\n using (var db = new Model1())\n    {\n    var query = from item in db.gjs\n      where item.id== textid\n          select item;\n    //查询到对象后，修改对象属性\n    foreach (var item in query)\n    {\n      item.text = skinChatRichTextBox1.Text;\n      break;\n    }\n    int t = db.SaveChanges();\n    //大于 0 说明插入成功\n    MessageBox.Show(t > 0 ? @\"修改成功\" : @\"修改失败\");\n}\n```\n\n### 使用EF删除数据\n\n- 使用EF删除数据就和在List<>集合中删除元素一样\n- 使用TransactionScope\n```csharp\nusing (var db = new DBModel())\n    {\n      var student = db.students.FirstOrDefault(s => s.name == \"萝莉\"); //查找萝莉\n      db.students.Remove(student);  //删除萝莉\n      db.SaveChanges();\n    }\n```\n\n\n\n### 在EF使用事务\n\n- 事务就是确保一次数据库操作，所有步骤都成功，如果哪一步出错了，整个操作都将回滚。\n- 在EF使用事务有两种方案，一种是EF自带的.BeginTransaction()方法，另一种是使用TransactionScope类。\n- 使用.BeginTransaction()\n- 使用.BeginTransaction()实现事务\n\n```csharp\nusing (var db = new DBModel())\n    {\n      var tran = db.Database.BeginTransaction(); //开启事务\n      try\n      {\n        var student = db.students.FirstOrDefault(s => s.name == \"萝莉\");\n        db.students.Remove(student);  //删除萝莉\n        db.SaveChanges();\n        tran.Commit(); //必须调用Commit()，不然数据不会保存\n      }\n      catch (Exception ex)\n      {\n        tran.Rollback();  //出错就回滚\n      }\n    }\n\n```\n\n- 使用TransactionScope类\n- 使用之前记得引入System.Transactions.dll\n\n```csharp\nusing (var db = new DBModel())\n    {\n      using (var tran = new TransactionScope())  //开启事务\n      {\n        var student = db.students.FirstOrDefault(s => s.name == \"萝莉\");\n        db.students.Remove(student);  //删除萝莉\n        db.SaveChanges();\n        tran.Complete(); //必须调用.Complete()，不然数据不会保存\n      }  //出了using代码块如果还没调用Complete()，所有操作就会自动回滚\n    }\n```\n**两种都可以，不过我觉得使用TransactionScope要方便一点。**',2,0,'blog/1.jpg',0,21,3,4,'2020-09-01 00:00:00','2021-08-02 00:00:00'),
(50,'NPM 卸载模块','1. 只卸载模块 由于之前安装过，在 package.json 中的记录仍然存在  $ npm uninstall lodash  2. --save 参数使用 卸载模块的同时删除在 package.json 文件中的记录','\n\n### 1. 只卸载模块\n由于之前安装过，在 package.json 中的记录仍然存在\n\n`$ npm uninstall lodash`\n### 2. --save 参数使用\n卸载模块的同时删除在 package.json 文件中的记录\n\n`$ npm uninstall lodash --save`\n### 3. 卸载指定版本的模块\n`$ npm uninstall lodash@3.* ` // 卸载 lodash 模块 3.* 版本\n### 4. 应用场景\n\ndk 在项目中先安装了 lodash 4.17.4 版本的模块；\n后来发现这个版本太高，存在一些新 bug 没有解决，不适合项目中使用；\ndk 想要安装版本更加稳定的3.* 版本， 于是敲入指令 $ npm install lodash@3.*；\n到这里就注意了，虽然第二次安装了 3.* 版本，但是由于之前的 4.* 版本并没有卸载，\n此时在本地安装路径中可以发现有两个版本 lodash 的模块，\n而 npm 默认在使用时会优先调用高版本的模块。\n\n这时将之前版本进行卸载，$ npm install lodash，会默认卸载高版本的模块。\n\n',1,0,'blog/1.jpg',0,20,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(51,'Windows下JDK1.8安装及环境配置','打开如下链接：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html ，进入JDK1.8下载官网，或者直接百度JDK1.8，也可进入下载官网。','\n\n### 下载\n\n打开如下链接：http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html ，进入JDK1.8下载官网，或者直接百度JDK1.8，也可进入下载官网。\n\n 进入官网后，按照所给信息下载对应系统版本的JDK，这里以安装`jdk-8u60-windows-x64`为例。\n\n### 安装\n下载后双击即可安装，如下图：\n\n更改jdk安装路径（也可以采用默认安装在C盘），这里我安装的是`D:\\Software\\Java\\jdk1.8.0_60\\`目录（后面配置环境变量有用），然后下一步。\n\n\n更改jre安装路径（也可以采用默认安装位置），下一步。\n\n### 环境配置\nJDK环境变量配置。首先配置`JAVA_HOME`:右键单击计算机图标，接着点击菜单最下方的属性菜单项，或者连续打开控制面板--系统和安全--系统也可以。\n\n\n在弹出的对话框中单击”高级“选项卡，接着点击下方的环境变量：\n\n在环境变量对话框中的系统变量中点击“新建”按钮，在弹出的新建系统变量里的变量名中输入`JAVA_HOME`，在变量值中输入JDK的根目录： `D:\\Software\\Java\\jdk1.8.0_60` ，然后点击确定，返回环境变量对话框。\n\n### classpath\n在系统变量中查看是否有“`classpath`”变量，如果没有，则新建这个变量，变量名`classpath`  变量值 `.;%JAVA_HOME%\\lib;` 注意，此变量值以英文句点符号开始，以分好结束。然后点击确定，返回环境变量对话框。\n\n### Path\n最后，在系统变量里面找到`Path`变量，注意，这次是点击编辑按钮，在弹出的对话框中的变量值的最后，一定是最后，添加如下字符串：`;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin`。注意，前面第一个是分号。如果没有Path变量，则添加Path变量，添加步骤和前面一样，不在重复。\n\n### 测试\n然后确定返回到桌面，然后打开“命令提示符”（以管理员的身份运行），输入`java –version` ,出现下图所示输出，则说明jdk安装成功。\n\n如果需用eclipse，则只需去官网下载后解压就可以用了。\n\n原文链接：https://blog.csdn.net/houwanle/article/details/81773832\n',3,0,'blog/1.jpg',0,25,2,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(52,'filezilla连接windows service服务器','首先我们在服务器中，注意是服务器内！！！下载FileZila_Server（可以使用windows service自带的IE浏览器访问百度，进行搜索','\n### 下载\n首先我们在服务器中，注意是服务器内！！！下载FileZila_Server（可以使用windows service自带的IE浏览器访问百度，进行搜索）\n\n解压文件，进行安装\n默认配置，不需要修改\n选择安装目录\n点击安装Install\n安装完成关闭\n\n然后会自动跳出设置连接界面，首先修改host为本地`127.0.0.1`\n\n### 服务端配置\n然后点击那个单个蓝头像创建连接用户\n点击add创建用户名\n然后创建密码\n紧接着赋给操作权限（所有）\n\n记得还要选择可操作目录，这些步骤设置完毕后，点击左下角OK确认创建\n\n### 客户端\n然后我们回到我们的客户端，打开FTP软件，输入主机`ip`，刚刚创建的用户名及密码\n\n正常来说可以成功连接，但这时候可能会出现无法连接错误，原因是防火墙不允许filezilla_service运行\n\n\n网上有两种方法，第一种是关闭服务器防火墙（显然这是不安全的），第二个是设置防火墙允许filezilla_service运行。我们使用第二种方法，打开防火墙设置，如果应用中没有filezilla_service运行，我们可以进行添加。勾选完毕后点击确定，这时候再次取客户端使用ftp连接，就可以成功访问\n\n\n\n当然还可能会有一种问题，没有开启端口号，这是针对比较正规的服务器提供商出现的问题，它们的服务器需要自己设置安全组，这里可以参考我的另一篇博客：http://blog.csdn.net/sunyinggang/article/details/79378422\n\n\n————————————————\n原文链接：https://blog.csdn.net/sunyinggang/article/details/79382735',0,0,'blog/1.jpg',0,19,2,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(53,'HTML的5种空格表示','HTML提供了5种空格实体（space entity），它们拥有不同的宽度，非断行空格（&nbsp;）是常规空格的宽度，可运行于所有主流浏览器。其他几种空格（ &ensp; &emsp; &thinsp; &zwnj;&zwj;）在不同浏览器中宽度各异。   &nbsp; 它叫不换行空格，全称No-Break Space，它是最常见和我们使用最多的空格，大多数的人可能只接触了&nbsp;，它是按下space键产生的空格。在HTML中，如果你用空格键产生此空格，空格是不会累加的（只算1个）。要使用html实体表示才可累加， 该空格占据宽度受字体影响明显而强烈。','### 使用\n\n    HTML提供了5种空格实体（space entity），它们拥有不同的宽度，非断行空格（&nbsp;）是常规空格的宽度，可运行于所有主流浏览器。其他几种空格（ &ensp; &emsp; &thinsp; &zwnj;&zwj;）在不同浏览器中宽度各异。\n    \n     &nbsp;\n    它叫不换行空格，全称No-Break Space，它是最常见和我们使用最多的空格，大多数的人可能只接触了&nbsp;，它是按下space键产生的空格。在HTML中，如果你用空格键产生此空格，空格是不会累加的（只算1个）。要使用html实体表示才可累加，\n    该空格占据宽度受字体影响明显而强烈。\n     \n    &ensp;        \n     \n    它叫“半角空格”，全称是En Space，en是字体排印学的计量单位，为em宽度的一半。根据定义，它等同于字体度的一半（如16px字体中就是8px）。名义上是小写字母n的宽度。此空格传承空格家族一贯的特性：透明的，此空格有个相当稳健的特性，\n    就是其占据的宽度正好是1/2个中文宽度，而且基本上不受字体影响。\n     \n     \n    &emsp;        \n     \n    它叫“全角空格”，全称是Em Space，em是字体排印学的计量单位，相当于当前指定的点数。例如，1 em在16px的字体中就是16px。此空格也传承空格家族一贯的特性：透明的，此空格也有个相当稳健的特性，\n    就是其占据的宽度正好是1个中文宽度，而且基本上不受字体影响。\n     \n    &thinsp;        \n     \n    它叫窄空格，全称是Thin Space。我们不妨称之为“瘦弱空格”，就是该空格长得比较瘦弱，身体单薄，占据的宽度比较小。它是em之六分之一宽。\n     \n    &zwnj; \n     \n    它叫零宽不连字，全称是Zero Width Non Joiner，简称“ZWNJ”，是一个不打印字符，放在电子文本的两个字符之间，抑制本来会发生的连字，而是以这两个字符原本的字形来绘制。Unicode中的零宽不连字字符映射为“”（zero width non-joiner，U+200C），HTML字符值引用为： &#8204;\n     \n    &zwj;\n     \n    它叫零宽连字，全称是Zero Width Joiner，简称“ZWJ”，是一个不打印字符，放在某些需要复杂排版语言（如阿拉伯语、印地语）的两个字符之间，使得这两个本不会发生连字的字符产生了连字效果。零宽连字符的Unicode码位是U+200D (HTML: &#8205; &zwj;）。\n     \n    此外，浏览器还会把以下字符当作空白进行解析：空格（&#x0020;）、制表位（&#x0009;）、换行（&#x000A;）和回车（&#x000D;）还有（&#12288;）等等。',1,0,'blog/1.jpg',0,13,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(54,'在VSCode中使用码云(Gitee)进行代码管理(转)','本教程核心内容 本文主要是整合了网上教程， 从Git安装开始，配置关联本地仓库到码云，最终用上VScode这个流程。 非常基础和简单，照着操作就行了。','\n### 前言\n本教程核心内容\n本文主要是整合了网上教程，\n从Git安装开始，配置关联本地仓库到码云，最终用上VScode这个流程。\n非常基础和简单，照着操作就行了。\n\n### 起因\n平时常写python脚本，原先用Sublime，现在用VScode，发现编辑器左侧有代码管理这个按钮，于是开始找怎么设置VSCode能和码云连在一起。\n踩了一些坑，理顺了思路，才发现一点关系都没有。\n正确的思路是：安装Git；关联码云；打开VSCode。\n是的你没看错，前两步设置好了，打开VSCode直接就能用上码云的代码管理了。\n\n### Git和Github的关系：\nGit是一个分布式的版本控制系统，只是软件，需要你下载装到电脑上，实现git功能。\n\nGithub、BitBucket、Gitee基于git的项目托管平台，说白了是云服务器或云盘，存储分享你的代码，查看追更别人的代码。 理解了这些，大概就能明白有一堆程序员所在的Github为什么被戏称是全球最大的同性交友平台这个梗了。Github、BitBucket是国外的，连接速度因人而异；另外Github收费用户才能创建私有项目。\n\n### 准备内容\n注册码云(Gitee)，创建一个项目，得到项目url：`https://gitee.com/YourGiteeName/projectname`\n下载git安装， 全都按下一步就行了。\n下载VSCode安装。\n如何生成ssh公钥\n本段内容大部分引用自码云平台帮助文档\n\n打开Git Bash，安装完git就有这个了。\n\n你可以按如下命令来生成 sshkey：\n\n`ssh-keygen -t rsa -C \"youremail@xxx.com\"`\n\n>  Generating public/private rsa key pair...\n   三次回车即可生成 ssh key\n\n查看你的 public key\n\n`cat ~/.ssh/id_rsa.pub`\n> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....\n\n打开码云SSH公钥管理页面 https://gitee.com/profile/sshkeys\n\n填写标题：\n\n`yourname''s SSH key`\n\n公钥：\n\n`ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc...`\n添加后，回到Git Bash中输入\n\n`ssh -T git@gitee.com`\n\n如果有弹出询问(yes/no)，输入\n\n`yes`\n\n若返回\n\n> Welcome to Gitee.com, YourGiteeName!\n则证明添加成功。\n\n\n### Git操作\n\n初始化Git\n首先，你需要执行下面两条命令，作为 git 的基础配置，作用是告诉 git 你是谁，你输入的信息将出现在你创建的提交中。\n\ngit config --global user.name yourname  # \"你的名字或昵称\"\ngit config --global user.email youremail@xxx.com # \"你的邮箱\"\n\n创建版本库\n本段内容大部分引用自廖雪峰的官方网站 创建版本库\n\n什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n\n所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录YourProjName（名字任意）：\n\ncd /e/\nmkdir YourProjName\ncd YourProjName\n\n如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。\n\n第二步，通过git init命令把这个目录变成Git可以管理的仓库：\n\n`git init`\n\n>  Initialized empty Git repository in E:/YourProjName/.git/\n瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。\n\n关联\n\n本段内容大部分引用自码云平台帮助文档V1.2 Git 常用命令与名词解释\n\n把一个本地仓库与一个云端Gitee仓库关联。\n\n项目地址形式为:https://gitee.com/YourGiteeName/YourProjName.git 或者 git@gitee.com:YourGiteeName/YourProjName.git\n\n`git remote add origin https://gitee.com/YourGiteeName/YourProjName.git`\n其中origin代表的是你远程的仓库，习惯如此命名，可以通过命令 git remote -v 查看\n\n`git remote -v`\n\n>  origin  https://gitee.com/YourGiteeName/YourProjName.git (fetch)\n  origin  https://gitee.com/YourGiteeName/YourProjName.git (push)\n如果你想克隆一个项目，只需要执行：\n\ngit clone <项目地址>\n\n### 同步（拉取）\n\n同步，也可以称之为拉取，在Git中是非常频繁的操作，和SVN不同，Git的所有仓库之间是平等的，所以，为了保证代码一致性，尽可能的在每次操作前进行一次同步操作，具体的为在工作目录下执行如下命令:\n\n`git pull origin master`\n\nmaster是分支名，如果你本地是其他分支，请换成其他分支的名字，另，因为远程仓库与你本地仓库可能存在冲突，故当存在冲突时，请参考进阶篇的如何处理冲突\n\n查看文件夹，会发现 Gitee仓库上 README.md 文件被下载回来了。\n\n### 提交\n\ngit作为支持分布式版本管理的工具，它管理的库（repository）分为本地库、远程库。\n这里我们把 add(暂存)、提交(commit)、推送(push)，放到一起说，因为每次上传代码都需要执行这三步（关于冲突处理、分支合并等以后用到了再研究，本文只说基础部分）。\n\ngit add      加入到暂存区\ngit commit   提交到本地库\ngit push     发送给远程库\n首先，我们打开 README.md ，在里面稍稍加上几个字，保存。这样文件就做了修改。\n\n再来查看git状态\n\n`git status`\n\n```html\n On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n   (use \"git checkout -- <file>...\" to discard changes in working directory)\n         modified:   README.md\n no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n```\n会提示你modified: README.md ，意思是这个文件被修改了。no changes added to commit 是说目前暂时没有文件放到暂存区。\n\n所以我们将文件加入暂存区。\n\n`git add -A`\n\n-A表示将所有文件的修改，文件的删除，文件的新建，都添加到暂存区。\n\n然后提交到本地库，并附加注释。\n\n`git commit -m \"第一次提交\"`\n\n```html\n [master 1cc3dd5] 第一次提交\n  1 file changed, 1 insertion(+), 1 deletion(-)\n```\n-m后面的是本次提交的说明，通常可以备注你改了什么，便于以后翻看历史记录时，能直观知道这是哪个版本，这个版本改了些什么东西。\n\n最后推送到远程库，也就是Gitee上的项目里。\n\n`git push origin master`\n\n```html\n# Counting objects: 3, done.\n# Writing objects: 100% (3/3), 297 bytes | 297.00 KiB/s, done.\n# Total 3 (delta 0), reused 0 (delta 0)\n# To https://gitee.comYourGiteeName/YourProjName.git\n#    5464c11..1cc3dd5  master -> master\n```\n\n### Git Gui\n\n上面说的都是代码上的操作，实际上安装完Git之后，也有GUI界面可以直接使用。\n\n打开 Git Gui，选择Open Existing Repository，找到刚刚创建的本地库打开。\n\n界面比简单，只有几个按钮：\n\nRescan检查仓库中文件状态； Stage Changed就是add暂存； Commit、Push就是提交、推送。\n\n注：如果发现中文乱码，我们修改一下配置文件编码，改为utf-8就好了\n\ngit config --global gui.encoding utf-8\nVSCode\n\n点击 文件 > 将文件夹添加到工作区 > E:/YourProjName/ 就完成了。\n\n无需任何配置，VSCode自动获取.git配置实现代码管理： 发生变动的文件或代码会有颜色提示，而且可以对比前后改了哪些地方。\n\n需要上传的时候\n\n点击+号，加入暂存；\n\n 在[ 消息 (按 Ctrl+Enter 提交) ]中输入commit注释； \n\n点击同步图标，push出去。\n————————————————\n原文链接：https://blog.csdn.net/watfe/article/details/79761741',50,3,'blog/3.jpg',0,19,7,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(55,'WebAPI增查改删--基于EntityFramework','Get 实现信息查询     [HttpGet]     public async Task<ActionResult<IEnumerable<TodoItem>>> GetTodoItems()     {       return await _context.TodoItem.ToListAsync();     }     //Get:api/todoapi/id     [HttpGet(\"{id}\")]     public async Task<ActionResult<TodoItem>> GetTodoItem(long id)     {','\r\n### Get 实现信息查询\r\n```csharp\r\n    [HttpGet]\r\n    public async Task<ActionResult<IEnumerable<TodoItem>>> GetTodoItems()\r\n    {\r\n      return await _context.TodoItem.ToListAsync();\r\n    }\r\n    //Get:api/todoapi/id\r\n    [HttpGet(\"{id}\")]\r\n    public async Task<ActionResult<TodoItem>> GetTodoItem(long id)\r\n    {\r\n      //FindAsync 根据id查找\r\n      var todoItem = await _context.TodoItem.FindAsync(id);\r\n      if (todoItem == null)\r\n      {\r\n        //返回404\r\n        return NotFound();\r\n      }\r\n      //返回结果为json格式\r\n      return todoItem;\r\n    }\r\n```\r\n### Post 实现信息创建\r\n```csharp\r\n\r\n    //Post:api/todoapi\r\n    [HttpPost]\r\n    public async Task<ActionResult<TodoItem>> PostTodoItem(TodoItem item)\r\n    {\r\n      _context.TodoItem.Add(item);\r\n      await _context.SaveChangesAsync();\r\n      //CreatedAtAction(actionName,routeValues,value).\r\n      return CreatedAtAction(nameof(GetTodoItem), new { id = item.Id }, item);\r\n    }\r\n```\r\n\r\n### Put实现信息修改\r\n```csharp\r\n    //Put:api/todoapi/id\r\n    [HttpPut(\"{id}\")]\r\n    public async Task<IActionResult> PutTodoItem(long id,TodoItem item)\r\n    {\r\n      if (id != item.Id)\r\n      {\r\n        return BadRequest();\r\n      }\r\n      _context.Entry(item).State = EntityState.Modified;\r\n      await _context.SaveChangesAsync();\r\n \r\n      return NoContent();\r\n    }\r\n```\r\n### Delete实现信息删除\r\n\r\n```csharp\r\n //Delete:api/todoapi/id\r\n    [HttpDelete(\"{id}\")]\r\n    public async Task<IActionResult> DeleteTodoItem(long id)\r\n    {\r\n      var todoItem = await _context.TodoItem.FindAsync(id);\r\n      if (todoItem == null)\r\n      {\r\n        return NotFound();\r\n      }\r\n      _context.TodoItem.Remove(todoItem);\r\n      await _context.SaveChangesAsync();\r\n      return NoContent();\r\n    }\r\n```\r\n\r\n------------\r\n\r\n原文链接：`https://blog.csdn.net/u012664198/article/details/97141813`',2,0,'blog/1.jpg',0,4,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(56,'netcore使用swagger自动生成接口文档','使用 一.利用nuget添加引用 Swashbuckle.AspNetCore  二. 在 Startup.cs 里面注册服务,添加中间件  添加引用: using Swashbuckle.AspNetCore.Swagger;','### 使用\n\n一.利用nuget添加引用 `Swashbuckle.AspNetCore`\n\n二. 在 Startup.cs 里面注册服务,添加中间件\n\n添加引用:\n   using Swashbuckle.AspNetCore.Swagger;\n 注册服务:\n```csharp\n    public void ConfigureServices(IServiceCollection services)\n    {\n      //注册Swagger生成器，定义一个和多个Swagger 文档\n      services.AddSwaggerGen(c =>\n      {\n        c.SwaggerDoc(\"v1\", new Info { Title = \"My API\", Version = \"v1\" });//设置版本号,标题\n        var xmlPath = Path.Combine(Path.GetDirectoryName(typeof(Program).Assembly.Location), \"SwaggerApi.xml\");// 为 Swagger JSON and UI设置xml文档注释路径\n        c.IncludeXmlComments(xmlPath);//只有设置了xmlm文档的路径生成的文档才会有注释\n      });\n      services.AddMvc();\n    }\n```\n\n 添加中间件:\n\n  ```csharp\n  public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n      //启用中间件服务生成Swagger作为JSON终结点\n      app.UseSwagger();\n      //启用中间件服务对swagger-ui，指定Swagger JSON终结点\n      app.UseSwaggerUI(c =>\n      {\n        c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\");\n      });      app.UseMvc();\n    }\n```\n\n> 在生成的输入里面勾选 XML文档文件, 并将文件名更改为注册服务的定义的文件名\n要想接口中自带注释说明,实体必须要写上注释\n\n`https://localhost:44314/swagger/index.html`',0,0,'blog/1.jpg',0,18,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(57,'netCore3.0发布IIs','netCore3.0发布IIs','\n### 下载\n首先要确认好你项目netcore版本,根据版本下载netCore3.0运行时Net Core Runtime6\n### 发布\n点击WebApi项目右键->发布，选择IIS为发布目标，点击发布；\n### 连接\n 点连接： 发布方法-选文件系统 目标位置-选发布的位置\n### 配置\n点设置 配置-debug  目标框架-netcoreapp3.0 部署模式-框架依赖 目标运行时 选自己当前系统支持的\n### 保存\n 然后保存',0,0,'blog/1.jpg',0,18,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(58,'EntityFrameworkCore数据操作','加载所有数据加载所有数据  using (var db = new DbGj())   {     var a = db.gj.ToList();      return View(a);   }   using (var db = new DbGj())   {     var a = db.Set<gj>().ToList();      return View(a);   }','\n\n### 加载所有数据加载所有数据\n     using (var db = new DbGj())\n      {\n        var a = db.gj.ToList();\n         return View(a);\n      }\n\n     using (var db = new DbGj())\n      {\n        var a = db.Set<gj>().ToList();\n         return View(a);\n      }\n\n\n### 查询\n使用语言集成查询 (`LINQ`) 从数据库检索实体类的实例\n\n```csharp\nusing (var db = new BloggingContext())\n{\n  var blogs = db.Blogs\n    .Where(b => b.Rating > 3)\n    .OrderBy(b => b.Url)\n    .ToList();\n}\n```\n\n\n\n基本原生 `SQL` 查询\n可以使用 `FromSql` 扩展方法基于原生 `SQL` 查询开始 `LINQ` 查询。\n\n```csharp\n   var blogs = context.Blogs\n  .FromSql(\"SELECT * FROM dbo.Blogs\")\n  .ToList();\n```\n\n原生 `SQL` 查询可用于执行存储过程。\n\n  ```csharp\n var blogs = context.Blogs\n  .FromSql(\"EXECUTE dbo.GetMostPopularBlogs\")\n  .ToList();\n\n```\n\n### 保存数据\n\n使用实体类的实例在数据库中创建、删除和修改数据。\n\n```csharp\nusing (var db = new BloggingContext())\n{\n  var blog = new Blog { Url = \"http://sample.com\" };\n  db.Blogs.Add(blog);\n  db.SaveChanges();\n}\n```\n\n### 更新数据更新数据\n\n`EF` 将自动检测对由上下文跟踪的现有实体所做的更改。 这包括从数据库加载/查询的实体，以及之前添加并保存到数据库的实体。\n\n只需通过赋值来修改属性，然后调用 `SaveChanges` 即可。\n\n```csharp\nusing (var context = new BloggingContext())\n{\n  var blog = context.Blogs.First();\n  blog.Url = \"http://sample.com/blog\";\n  context.SaveChanges();\n}\n\n```\n\n\n### 删除数据\n\n使用 `DbSet.Remove `方法删除实体类的实例。\n\n如果实体已存在于数据库中，则将在“`SaveChanges`”期间删除该实体。 如果实体尚未保存到数据库（即跟踪为“已添加”），则在调用`SaveChanges时`，该实体会从上下文中移除且不再插入。\n\n```csharp\nusing (var context = new BloggingContext())\n{\n  var blog = context.Blogs.First();\n  context.Blogs.Remove(blog);\n  context.SaveChanges();\n}\n```',2,0,'blog/1.jpg',0,21,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(59,'NETCore+Mysql搭建','使用 首先新建一个空的Asp.net core项目  安装MySql.Data.EntityFrameworkCore  新建一个类  public class gj   {     // <summary>     /// 主键     /// </summary>     public int id { get; set; }','### 使用\n\n首先新建一个空的`Asp.net core`项目\n\n安装`MySql.Data.EntityFrameworkCore`\n\n### 新建一个类\n\n\n```csharp\n public class gj\n  {\n    // <summary>\n    /// 主键\n    /// </summary>\n    public int id { get; set; }\n    /// <summary>\n    /// 标题\n    /// </summary>\n    public string method { get; set; }\n    /// <summary>\n    /// 内容\n    /// </summary>\n    public string text { get; set; }\n    public string type { get; set; }\n  }\n```\n\n\n### 添加数据库上下文类。\n\n```csharp\npublic class DbGj:DbContext\n  {\n    public DbSet<gj> gj { set; get; }\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n      => optionsBuilder.UseMySQL(@\"Server=localhost;database=testapp;uid=root;pwd=woshishui\");\n  }\n```\n\n\n### 添加控制器\n\n```csharp\n public class GJController : Controller\n  {\n    public IActionResult Index()\n    {\n      using (var db = new DbGj())\n      {\n        var a = db.Set<gj>().ToList();\n         return View(a);\n      }\n    }\n  }\n```\n\n### 视图\n\n\n```csharp\n@model IEnumerable<CoreTest_1.Models.gj>\n@{\n  ViewData[\"Title\"] = \"Index\";\n}\n<h1>Index</h1>\n<p>\n  <a asp-action=\"Create\">Create New</a>\n</p>\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>\n        @Html.DisplayNameFor(model => model.method)\n      </th>\n      <th>\n        @Html.DisplayNameFor(model => model.text)\n      </th>\n      <th>\n        @Html.DisplayNameFor(model => model.type)\n      </th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n@foreach (var item in Model) {\n    <tr>\n      <td>\n        @Html.DisplayFor(modelItem => item.method)\n      </td>\n      @*<td>\n        @Html.DisplayFor(modelItem => item.text)\n      </td>*@\n      <td>\n        @Html.DisplayFor(modelItem => item.type)\n      </td>\n      <td>\n        <a asp-action=\"Edit\" asp-route-id=\"@item.id\">Edit</a> |\n        <a asp-action=\"Details\" asp-route-id=\"@item.id\">Details</a> |\n        <a asp-action=\"Delete\" asp-route-id=\"@item.id\">Delete</a>\n      </td>\n    </tr>\n}\n  </tbody>\n</table>\n```\n\n\n\n#### 运行程序',5,0,'blog/1.jpg',0,18,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(60,'efCore+Mysql+Net Core','新建一个类gj.cs  public class gj     {         // <summary>         /// 主键         /// </summary>         public int id { get; set; }          /// <summary>         /// 标题         /// </summary>         public string method { get; set; }         /// <summary>         /// 内容         /// </summary>         public string text { get; set; }         public string type { get; set; }     }','\n\n### 新建Asp.net core项目\n**新建一个类gj.cs**\n\n```csharp\npublic class gj\n    {\n        // <summary>\n        /// 主键\n        /// </summary>\n        public int id { get; set; }\n\n        /// <summary>\n        /// 标题\n        /// </summary>\n        public string method { get; set; }\n        /// <summary>\n        /// 内容\n        /// </summary>\n        public string text { get; set; }\n        public string type { get; set; }\n    }\n```\n\n### 添加数据库上下文类\n```csharp\npublic class DbGj:DbContext\n    {\n        public DbSet<gj> gj { set; get; }\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n            => optionsBuilder.UseMySQL(@\"Server=localhost;database=testapp;uid=root;pwd=woshishui\");\n    }\n```\n\n### 添加控制器\n\n```csharp\npublic class GJController : Controller\n    {\n        public IActionResult Index()\n        {\n            using (var db = new DbGj())\n            {\n                var lis = db.Set<gj>().ToList();\n                 return View(lis);\n            }\n        }\n    }\n\n```\n\n### 视图\n\n```csharp\n@model IEnumerable<CoreTest_1.Models.gj>\n@{\n    ViewData[\"Title\"] = \"Index\";\n}\n<h1>Index</h1>\n\n<p>\n    <a asp-action=\"Create\">Create New</a>\n</p>\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>\n                @Html.DisplayNameFor(model => model.method)\n            </th>\n            <th>\n                @Html.DisplayNameFor(model => model.text)\n            </th>\n            <th>\n                @Html.DisplayNameFor(model => model.type)\n            </th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n@foreach (var item in Model) {\n        <tr>\n            <td>\n                @Html.DisplayFor(modelItem => item.method)\n            </td>\n            @*<td>\n                @Html.DisplayFor(modelItem => item.text)\n            </td>*@\n            <td>\n                @Html.DisplayFor(modelItem => item.type)\n            </td>\n            <td>\n                <a asp-action=\"Edit\" asp-route-id=\"@item.id\">Edit</a> |\n                <a asp-action=\"Details\" asp-route-id=\"@item.id\">Details</a> |\n                <a asp-action=\"Delete\" asp-route-id=\"@item.id\">Delete</a>\n            </td>\n        </tr>\n}\n    </tbody>\n</table>\n```\n\n\n\n**F5运行程序 （）**',0,0,'blog/1.jpg',0,18,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(61,'netcore访问本地磁盘','netcore访问本地磁盘','### 使用\n\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\nservices.AddDirectoryBrowser();\n}\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\nvar dir =new DirectoryBrowserOptions();\ndir.FileProvider = new PhysicalFileProvider(@\"E:\\\");\napp.UseDirectoryBrowser(dir);\nvar sta = new StaticFileOptions();\nsta.FileProvider = new PhysicalFileProvider(@\"E:\\\");\nsta.ServeUnknownFileTypes = true;\nsta.DefaultContentType = \"application/x-msdownload\";\nvar pro = new FileExtensionContentTypeProvider();\npro.Mappings.Add(\".log\",\"text/plain\");\nsta.ContentTypeProvider = pro;\napp.UseStaticFiles(sta);\n}\n```\n\n\n```csharp\n//手机局域网访问\npublic static void Main(string[] args)\n{\nCreateWebHostBuilder(args).Build().Run();\n\nvar host = new WebHostBuilder()\n.UseKestrel()\n.UseContentRoot(Directory.GetCurrentDirectory())\n.UseIISIntegration()\n.UseUrls(\"http://*:5000\")\n.UseStartup<Startup>()\n.Build();\nhost.Run();\n\n}\n```',1,0,'blog/1.jpg',0,18,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(63,'非常全的VsCode快捷键','VsCode快捷键','\n\n### 按 Press	功能 Function\n\nCtrl + Shift + P，F1	显示命令面板 Show Command Palette\n\nCtrl + P	快速打开 Quick Open\n\nCtrl + Shift + N	新窗口/实例 New window/instance\n\nCtrl + Shift + W	关闭窗口/实例 Close window/instance\n\n### 基础编辑 Basic editing\n\n### 按 Press	功能 Function\n\nCtrl+X	剪切行（空选定） Cut line (empty selection)\n\nCtrl+C	复制行（空选定）Copy line (empty selection)\n\nAlt+ ↑ / ↓	向上/向下移动行 Move line up/down\n\nShift+Alt + ↓ / ↑	向上/向下复制行 Copy line up/down\n\nCtrl+Shift+K	删除行 Delete line\n\nCtrl+Enter	在下面插入行 Insert line below\n\nCtrl+Shift+Enter	在上面插入行 Insert line above\n\nCtrl+Shift+\\	跳到匹配的括号 Jump to matching bracket\n\nCtrl+] / [	缩进/缩进行 Indent/outdent line\n\nHome	转到行首 Go to beginning of line\n\nEnd	转到行尾 Go to end of line\n\nCtrl+Home	转到文件开头 Go to beginning of file\n\nCtrl+End	转到文件末尾 Go to end of file\n\nCtrl+↑ / ↓	向上/向下滚动行 Scroll line up/down\n\nAlt+PgUp / PgDown	向上/向下滚动页面 Scroll page up/down\n\nCtrl+Shift+[	折叠（折叠）区域 Fold (collapse) region\n\nCtrl+Shift+]	展开（未折叠）区域 Unfold (uncollapse) region\n\nCtrl+K Ctrl+[	折叠（未折叠）所有子区域 Fold (collapse) all subregions\n\nCtrl+K Ctrl+]	展开（未折叠）所有子区域 Unfold (uncollapse) all subregions\n\nCtrl+K Ctrl+0	折叠（折叠）所有区域 Fold (collapse) all regions\n\nCtrl+K Ctrl+J	展开（未折叠）所有区域 Unfold (uncollapse) all regions\n\nCtrl+K Ctrl+C	添加行注释 Add line comment\n\nCtrl+K Ctrl+U	删除行注释 Remove line comment\n\nCtrl+/	切换行注释 Toggle line comment\n\nShift+Alt+A	切换块注释 Toggle block comment\n\nAlt+Z	切换换行 Toggle word wrap\n\n### 导航 Navigation\n\n按 Press	功能 Function\n\nCtrl + T	显示所有符号 Show all Symbols\n\nCtrl + G	转到行... Go to Line...\n\nCtrl + P	转到文件... Go to File...\n\nCtrl + Shift + O	转到符号... Go to Symbol...\n\nCtrl + Shift + M	显示问题面板 Show Problems panel\n\nF8	转到下一个错误或警告 Go to next error or warning\n\nShift + F8	转到上一个错误或警告 Go to previous error or warning\n\nCtrl + Shift + Tab	导航编辑器组历史记录 Navigate editor group history\n\nAlt + ←/→	返回/前进 Go back / forward\n\nCtrl + M	切换选项卡移动焦点 Toggle Tab moves focus\n\n搜索和替换 Search and replace\n\n按 Press	功能 Function\n\nCtrl + F	查找 Find\n\nCtrl + H	替换 Replace\n\nF3 / Shift + F3	查找下一个/上一个 Find next/previous\n\nAlt + Enter	选择查找匹配的所有出现 Select all occurences of Find match\n\nCtrl + D	将选择添加到下一个查找匹配 Add selection to next Find match\n\nCtrl + K Ctrl + D	将最后一个选择移至下一个查找匹配项 Move last selection to next Find match\n\nAlt + C / R / W	切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word\n\n多光标和选择 Multi-cursor and selection\n\n按 Press	功能 Function\n\nAlt +单击	插入光标 Insert cursor\n\nCtrl + Alt +↑/↓	在上/下插入光标 Insert cursor above / below\n\nCtrl + U	撤消上一个光标操作 Undo last cursor operation\n\nShift + Alt + I	在选定的每一行的末尾插入光标 Insert cursor at end of each line selected\n\nCtrl + I	选择当前行 Select current line\n\nCtrl + Shift + L	选择当前选择的所有出现 Select all occurrences of current selection\n\nCtrl + F2	选择当前字的所有出现 Select all occurrences of current word\n\nShift + Alt + →	展开选择 Expand selection\n\nShift + Alt + ←	缩小选择 Shrink selection\n\nShift + Alt + （拖动鼠标）	列（框）选择 Column (box) selection\n\nCtrl + Shift + Alt +（箭头键）	列（框）选择 Column (box) selection\n\nCtrl + Shift + Alt + PgUp / PgDown	列（框）选择页上/下 Column (box) selection page up/down\n\n### 丰富的语言编辑 Rich languages editing\n\n按 Press	功能 Function\n\nCtrl + 空格	触发建议 Trigger suggestion\n\nCtrl + Shift + Space	触发器参数提示 Trigger parameter hints\n\nTab	Emmet 展开缩写 Emmet expand abbreviation\n\nShift + Alt + F	格式化文档 Format document\n\nCtrl + K Ctrl + F	格式选定区域 Format selection\n\nF12	转到定义 Go to Definition\n\nAlt + F12	Peek定义 Peek Definition\n\nCtrl + K F12	打开定义到边 Open Definition to the side\n\nCtrl + .	快速解决 Quick Fix\n\nShift + F12	显示引用 Show References\n\nF2	重命名符号 Rename Symbol\n\nCtrl + Shift + . /，	替换为下一个/上一个值 Replace with next/previous value\n\nCtrl + K Ctrl + X	修剪尾随空格 Trim trailing whitespace\n\nCtrl + K M	更改文件语言 Change file language\n\n### 编辑器管理 Editor management\n\n按 Press	功能 Function\n\nCtrl+F4, Ctrl+W	关闭编辑器 Close editor\n\nCtrl+K F	关闭文件夹 Close folder\n\nCtrl+\\	拆分编辑器 Split editor\n\nCtrl+ 1 / 2 / 3	聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group\n\nCtrl+K Ctrl+ ←/→	聚焦到上一个/下一个编辑器组 Focus into previous/next editor group\n\nCtrl+Shift+PgUp / PgDown	向左/向右移动编辑器 Move editor left/right\n\nCtrl+K ← / →	移动活动编辑器组 Move active editor group\n\n### 文件管理 File management\n\n按 Press	功能 Function\n\nCtrl+N	新文件 New File\n\nCtrl+O	打开文件... Open File...\n\nCtrl+S	保存 Save\n\nCtrl+Shift+S	另存为... Save As...\n\nCtrl+K S	全部保存 Save All\n\nCtrl+F4	关闭 Close\n\nCtrl+K Ctrl+W	关闭所有 Close All\n\nCtrl+Shift+T	重新打开关闭的编辑器 Reopen closed editor\n\nCtrl+K	输入保持打开 Enter Keep Open\n\nCtrl+Tab	打开下一个 Open next\n\nCtrl+Shift+Tab	打开上一个 Open previous\n\nCtrl+K P	复制活动文件的路径 Copy path of active file\n\nCtrl+K R	显示资源管理器中的活动文件 Reveal active file in Explorer\n\nCtrl+K O	显示新窗口/实例中的活动文件 Show active file in new window/instance\n\n### 显示 Display\n\n按 Press	功能 Function\n\nF11	切换全屏 Toggle full screen\n\nShift+Alt+1	切换编辑器布局 Toggle editor layout\n\nCtrl+ = / -	放大/缩小 Zoom in/out\n\nCtrl+B	切换侧栏可见性 Toggle Sidebar visibility\n\nCtrl+Shift+E	显示浏览器/切换焦点 Show Explorer / Toggle focus\n\nCtrl+Shift+F	显示搜索 Show Search\n\nCtrl+Shift+G	显示Git Show Git\n\nCtrl+Shift+D	显示调试 Show Debug\n\nCtrl+Shift+X	显示扩展 Show Extensions\n\nCtrl+Shift+H	替换文件 Replace in files\n\nCtrl+Shift+J	切换搜索详细信息 Toggle Search details\n\nCtrl+Shift+C	打开新命令提示符/终端 Open new command prompt/terminal\n\nCtrl+Shift+U	显示输出面板 Show Output panel\n\nCtrl+Shift+V	切换Markdown预览 Toggle Markdown preview\n\nCtrl+K V	从旁边打开Markdown预览 Open Markdown preview to the side\n\n### 调试 Debug\n\n按 Press	功能 Function\n\nF9	切换断点 Toggle breakpoint\n\nF5	开始/继续 Start/Continue\n\nShift+F5	停止 Stop\n\nF11 / Shift+F11	下一步/上一步 Step into/out\n\nF10	跳过 Step over\n\nCtrl+K Ctrl+I	显示悬停 Show hover\n\n### 集成终端 Integrated terminal\n\n\n按 Press	功能 Function\n\nCtrl+`	显示集成终端 Show integrated terminal\n\nCtrl+Shift+`	创建新终端 Create new terminal\n\nCtrl+Shift+C	复制选定 Copy selection\n\nCtrl+Shift+V	粘贴到活动端子 Paste into active terminal\n\nCtrl+↑ / ↓	向上/向下滚动 Scroll up/down\n\nShift+PgUp / PgDown	向上/向下滚动页面 Scroll page up/down\n\nCtrl+Home / End	滚动到顶部/底部 Scroll to top/bottom',1,0,'blog/1.jpg',0,19,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(64,'VSCode 快捷键','你可以通过打开命令面板(Ctrl + Shift + P)并输入Show running extensions来查看所有你安装的正在运行的插件。','\n### 查看正在运行插件\n你可以通过打开命令面板(Ctrl + Shift + P)并输入Show running extensions来查看所有你安装的正在运行的插件。\n\n### 重复的行\n一个非常强大和已知的功能是复制行。只需按 Shift + Alt + 向下箭头 (Mac: command + Shift + 向下箭头)\n\n### 移至文件的开头/结尾\n要使光标移到文件的第一行或最后一行，最快的方法是按Ctrl + Home (Mac: command + Home)键开头，然后按Ctrl + End (Mac: command + End)键结尾。\n\n### 批量替换当前文件中所有匹配的文本\n可以选择任何一组文本，如果该选中文本出现多个，可以通过按Ctrl + F2 (Mac: command + F2)一次改所有出现的文本。\n\n向上/向下移动一行\n按Alt + 向上箭头(Mac: option+ 向上箭头)当前行向上移动，按Alt + 向下箭头(Mac: option+ 向下箭头))当前行向下移动。\n\n\n复制光标向上或者向上批量添加内容\n在 VsCode 中复制游标可以证明是最节省时间的特性。\n\n按Ctrl + Alt +向上箭头(Mac: command + Option +向上箭头)将光标添加到上面，按Ctrl + Alt +向下箭头(Mac: command + Option + 向下箭头)将光标添加到下面。',0,0,'blog/1.jpg',0,19,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(65,'Visual Studio Code 常用插件','功能篇 Auto Rename Tag 自动匹配修改元素（html元素只需修改一端，另一端自动跟着修改）  Auto Close Tag 自动闭合html元素（写出元素的开始端后，闭合端自动生成）','\n### 功能篇\n`Auto Rename Tag`\n自动匹配修改元素（html元素只需修改一端，另一端自动跟着修改）\n\n`Auto Close Tag`\n自动闭合html元素（写出元素的开始端后，闭合端自动生成）\n\n`Code Spell Checker`\n单词检测（英文单词拼写不准确人士必备）\n\n`Comment Translate`\n注释翻译（终于不怕看老外写注释了！功能可不仅仅是注释翻译）\n\n`ESLint`\n代码规范校验（无规矩，不成方圆。为了少些bug，这个还是很必要的）\n\n`Git History`\n查看git历史记录（看看同事是不是又偷偷改代码了）\n\n`lit-html`\njs代码中进行html元素提示\n\n`Live Server`\n开启本地服务器\n\n`Path Intellisense`\n书写相对路径自动提示（真的非常有用）\n\n### 视觉篇\nBracket Pair Colorizer\n彩色括号配对（可别再说括号太多，找不了谁和谁匹配了）\n\nindent-rainbow\n彩色缩进\n\nTrailing Spaces\n高亮多余空格（节约资源，从我做起）\n\nVibrancy\n毛玻璃背景效果（Windows能调节透明度；Mac不能调整，只能用默认的）\n\n### 扩展篇\nRemoteHub\n将github项目直接在本地打开（再也不需要clone项目了）\n\nPolacode\n代码截取（再也不怕截出马赛克画质的代码了）\n\nCode Ace Jumper\n光标跳转（多选功能，比跳转实用）（释放鼠标，一个键盘走天涯）\n\nvue\nvue-peek',1,0,'blog/1.jpg',0,19,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(66,'VuePress项目搭建','环境搭建 查看nodejs版本 注意：Node.js 版本 >= 8 node -v  全局安装 npm install -g vuepress  创建项目目录','\n### 使用\n\n**原文：**`https://www.jianshu.com/p/2ac5727947cd`\n### 环境搭建\n查看`nodejs`版本\n注意：Node.js 版本 >= 8\n`node -v`\n\n**全局安装**\n`npm install -g vuepress`\n\n ### 创建项目目录\n`mkdir vuepress-demo`\n`cd vuepress-demo`\n初始化项目，建立并编辑 `package.json`\n`npm init -y`\n进入`package.json`，修改脚本内容\n\n\n```csharp\n{\n  \"scripts\": {\n    \"docs:dev\": \"vuepress dev docs\",\n    \"docs:build\": \"vuepress build docs\"\n  }\n}\n```\n\n\n### 建立基本目录\n```csharp\nvuepress-demo\n├─package.json\n├─docs\n|  ├─README.md\n|  ├─.vuepress\n|  |     ├─config.js\n|  |     ├─public\n|  |     |   └favicon.ico\n```\n### 修改配置文件 - config.js\n```csharp\nmodule.exports = {\n    title: ''Hello VuePress'',\n    description: ''Hello, my friend!'',\n    head: [\n        [''link'', {\n            rel: ''icon'',\n            href: `/favicon.ico`\n        }]\n    ],\n    dest: ''./docs/.vuepress/dist'',\n    ga: '''',\n    evergreen: true,\n}\n```\n### 修改README.md\n---\n```csharp\nhome: true\nheroImage: /favicon.ico\nactionText: 快速上手 →\nactionLink: /guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present xxxxxx\n```\n---\n### 运行项目\n`vuepress dev docs`\n\n`npm run docs:dev`\n',0,0,'blog/1.jpg',0,15,2,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(67,'vue报错 Uncaught (in promise) NavigationDuplicated','','### 解决办法\n\n在项目目录下运行 npm i vue-router@3.0 -S 即可',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(68,'transition组件的使用','使用 <div class=\"router-parent\">     <transition :name=\"transitionName\" mode=\"out-in\">      <router-view class=\"home-router\"></router-view>     </transition>   </div>','### 使用\n\n```csharp\n<div class=\"router-parent\">\n    <transition :name=\"transitionName\" mode=\"out-in\">\n     <router-view class=\"home-router\"></router-view>\n    </transition>\n  </div>\n```\n\n### js\n\n```csharp\n data () {\n  return {\n    transitionName: ''slide-right''\n  }\n },\n```\n\n### css\n\n```csharp\n.router-parent {\n position: relative;\n width: 100%;\n height: 100%;\n}\n.home-router {\n position: absolute;\n width: 100%;\n height: 100%;\n transition: all 0.5s ease;\n}\n.slide-left-enter,\n.slide-right-leave-active {\n opacity: 0;\n -webkit-transform: translate(-100%, 0);\n transform: translate(-100%, 0);\n}\n\n\n.slide-left-leave-active,\n.slide-right-enter {\n opacity: 0;\n -webkit-transform: translate(-100%, 0);\n transform: translate(-100% 0);\n}\n```',2,0,'blog/1.jpg',0,12,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(69,'VSCode配置简单的vue项目','配置环境 下载VSCode,官网直接下载就行。 安装vue插件vetur，实现支持vue文件的代码高亮  创建一个vue项目 使用快捷键 Ctrl+~打开终端，输入命令行 vue init','\n\n### 配置环境\n\n 下载`VSCode`,官网直接下载就行。\n 安装vue插件`vetur`，实现支持vue文件的代码高亮\n\n### 创建一个vue项目\n\n使用快捷键 Ctrl+~打开终端，输入命令行 `vue init webpack yourProjectName` ,其中`yourProjectName`为你的项目名称，这里我创建的是helloworld.\n\n\n安装完毕后 运行 `npm run dev` 会出现访问地址：`http://localhost:8080 `\n\n### 进入项目目录\n\n`cd vue-element-admin`\n\n### 安装依赖\n\n`npm install`\n\n#### 建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题\n\n`npm install --registry=https://registry.npm.taobao.org`\n\n### 本地开发 启动项目\n\n`npm run dev`',0,0,'blog/1.jpg',0,16,2,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(70,'VSCode配置vue开发环境','网上搜索vscode插件的文章，动辄十几个，其实根本用不了那么多，很多插件的作用还有重叠，电脑性能还被白白浪费。这里精简为主，每一个插件都发挥它最大的作用，并尽量说明它们的作用','\n### 插件\n\n网上搜索vscode插件的文章，动辄十几个，其实根本用不了那么多，很多插件的作用还有重叠，电脑性能还被白白浪费。这里精简为主，每一个插件都发挥它最大的作用，并尽量说明它们的作用\n\n### Vetur\n\n用vue开发的必装，官方推荐,别纠结用哪个，就它了。\n作用：高亮.`vue`文件，附带有格式化功能，配合`Eslint`插件对代码进行格式化检查\n\n\n\n ### Eslint\n\n如果你想你（团队）的代码风格所有地方看起来都像是同一个人写的，就靠它咯\n\n作用：检查你的`js、html、css`代码，确保它们符合规范，并且代码风格保持一致性，强制性的规则，你少写一个空格或者多敲一个回车都会被严格的指出来，强迫症的福音，第一次用它的同学可能会抓狂，熟悉后你会感谢它\n\n使用：想让插件生效，你的项目还得做一番复杂的配置，好在`vue-cli`生成的项目帮我们把配置都生成好了，你也不必修改什么规则，直接用就行，在使用`vue-cli`生成`webpack`项目时会询问你是否启用`eslint`并且使用哪套规范，选择`Standard`规范就行:\n\n\n它会自动在你的项目根目录下生成`.eslintignore和.eslintrc.js`两个配置文件，`package.json`文件里增加下面的依赖：\n\n\n  ```csharp\n  \"eslint\": \"^4.15.0\",\n  \"eslint-config-standard\": \"^10.2.1\",\n  \"eslint-friendly-formatter\": \"^3.0.0\",\n  \"eslint-loader\": \"^1.7.1\",\n  \"eslint-plugin-import\": \"^2.7.0\",\n  \"eslint-plugin-node\": \"^5.2.0\",\n  \"eslint-plugin-promise\": \"^3.4.0\",\n  \"eslint-plugin-standard\": \"^3.0.1\",\n  \"eslint-plugin-vue\": \"^4.0.0\",\n```\n\n> ps:对于我这种从前写Java的人来说，刚开始也是无法接受这种tab键2个空格、不加分号的Standard风格，不过一周以后再看原先的Java代码反倒不习惯了\n\n\n\n### 配置\n\n其实装好上面几个插件你已经可以满足最基本的开发需求了，但现在还没有加任何配置，我们来配置下满足些额外的需求\n\n\n\n1.代码错误实时提示\n\n少写了一个空格，或者多写了一个分号，都能马上以醒目的波浪线提示出来，鼠标悬浮上去还有错误提示，双击波浪线的代码还会出现一个小灯泡，点击灯泡可以自动帮你修正代码格式：\n\n\n我们可以找到编辑器左上角，依次打开 文件、 首选项、 设置，将i面配置加入到右边的用户设置中：\n\n\n\n```csharp\n\"eslint.validate\": [\n  \"javascript\",\n  \"javascriptreact\",\n   {\n     \"language\": \"vue\",\n     \"autoFix\": true\n   }\n],\n```\n\n2.`ctrl+s`保存时自动修正格式错误的`js`代码\n\n在配置里加入下面的json:\n`\"eslint.autoFixOnSave\": true,`\n\n3.格式化写的代码\n\n在vue文件里，按下鼠标右键，在菜单里你会发现有个格式化文件按钮，我们点击它，你会发现，本来图A好好的代码格式化后变成了图B，由于不符合`standard`的规范，就报错了：\n\n\n格式化后多帮我们加了分号，还把单引号变成了双引号。\n\n这是由于`vetur`插件默认格式化vue文件里面的js代码使用的`prettier`,和我们的`standard`规范有冲突，你可以点击这里查看`vetur`插件格式化的默认配置\n\n既然知道了原因，我们可以覆盖它的默认配置：\n\n`\"vetur.format.defaultFormatter.js\": \"vscode-typescript\",`\n\n再试一次格式化，发现问题解决了，不过还是报错：\n\n`clipboard.png`\n\n\n鼠标悬浮上去提示告诉我们，定义函数时，函数名要与后面的括号有一个空格，所以我们继续加配置解决问题：\n\n`\"javascript.format.insertSpaceBeforeFunctionParenthesis\": true,`\n\n这次格式化vue文件终于没有报错啦\n\n别急哈，问题还没完：\n\n请你仔细的观察下整个vue文件格式化后的样子，有没有发现html模板代码没有被格式化？\n因为vetur插件的默认格式化配置里，是没有为html模板格式的，需要我们手动指定配置:\n\n`\"vetur.format.defaultFormatter.html\": \"prettier\",`\n\n4.保存时自动格式化\n\n每次写完代码自己右键菜单格式化似乎有点麻烦，所以我们可以让它更智能用电，`ctrl+s`一保存就立马自动格式化:\n\n`\"editor.formatOnSave\": true,`\n\n其他与插件无关的配置\n\n在vue文件，默认按tab会有4个空格的缩进，我们需要的是2个:\n\n`\"editor.tabSize\": 2,`\n\n### 小结\n\n好啦，能满足你基本写代码需求的插件和配置我讲完了，不多，配合vue-cli项目真的很省事，2个插件，几行配置就搞定了，更重要的是，你能知道每个插件、每行配置都干了什么事情，解决了什么问题，而不是装了一堆不知道作用的插件，配置了一堆自己也看不懂的配置。\n\n这里汇总下上面的配置:\n\n  ```csharp\n\"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    {\n      \"language\": \"vue\",\n      \"autoFix\": true\n    }\n  ],\n  \"eslint.autoFixOnSave\": true,\n  \"vetur.format.defaultFormatter.html\": \"prettier\",\n  \"vetur.format.defaultFormatter.js\": \"vscode-typescript\",\n  \"javascript.format.insertSpaceBeforeFunctionParenthesis\": true,\n  \"editor.formatOnSave\": true,\n  \"editor.tabSize\": 2,\n```\n\n### 其他插件\n`vscode-icons` 美化左边资源管理器里项目文件的图标，每一种文件后缀都对应一个图标，很直观明了\n`vscode-background` 设置代码的背景（找张喜欢的小姐姐作为背景），腐宅必备\n`Path Autocomplete` 代码引用其他资源（比如图片）写相对路径时，会有提示',1,0,'blog/1.jpg',0,16,2,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(71,'vue笔记','使用 view请求->app.js->router.js->Controller-> model层 M - VM - C  路由： //跳转 <router-link to=\"/\">  this.$push(/)  $router.replace(/)  index.js:','### 使用\n\nview请求->app.js->router.js->Controller-> model层\nM - VM - C\n\n### 路由：\n\n//跳转\n`<router-link to=\"/\">`\n\n`this.$push(/)`\n\n`$router.replace(/)`\n\n```csharp\nindex.js:\n path: ''/Card'',\n component: Card /:userid* 注册HelloWorld组件 */\n<router-link to=\"/Card/Card''\">\n```\n\n动态绑定：`<router-link v-bing:to=\"''/Card/''+Card''\">`\n\n\n\n### 路由懒加载\n\n`const Panel = () => import(''@/components/Panel'')`// 路由懒加载\n\n\n\n#### 路由嵌套（子组件）\n\n`const news= () => import(''@/components/news'')`\n\n```csharp\npath: ''/Card'',\n component: Card\nchildren:[ //子组件\n{\n path:'' '',\n redirect: ''news'' // 默认路径\n},\n{\n path:''news''\n  component:news\n}\n]\n```\n\n在父组件进行调用 `<router-view> </router-view>`\n\n### 点击事件\n\n`@click`\n\n### 保存对象 push\n\n`this.list.push(对象)`\n\n删除`splice(i,i)`\n\n### 过滤器语法\n\n`Vue.filter(''过滤器名称'',function(){})`\n\n### 首次进入调用函数\n\n`created(){}`\n\n`<img v-bind:src=\"book.bookImg\">  //ok`\n\n ### mp4\n\n```csharp\n <video width=\"280\" height=\"220\" controls=\"controls\" autoplay=\"autoplay\">\n   <!-- <source src=\"../MP4/1.最终全英雄_bilibili.mp4\" type=\"video/mp4\"> -->\n   <source src=\"../src/mp4/1.最终全英雄_bilibili.mp4\" type=\"video/mp4\" />\n  </video>\n```',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(72,'搭建Vue脚手架（vue-cli）','全局安装vue-cli 输入命令：npm install vue-cli -g  创建项目框架 输入命令：vue init webpack exambank  依次按照提示输入，项目名、项目描述、项目作者等等，','\n\n### 全局安装vue-cli\n\n**输入命令：**`npm install vue-cli -g`\n\n### 创建项目框架\n\n**输入命令：**`vue init webpack exambank`\n\n依次按照提示输入，项目名、项目描述、项目作者等等，\n然后一路回车 看到最后这句项目就创建好了。\n\n`To get started:` 就是告诉你接下来该做什么，依次完成下面3行命令就可以了。进入`exambank`项目-----运行项目\n\n进入`exambank`目录\n\n**输入命令：** `cd exambank`\n\n\n### 安装element-ui\n\nelement-ui官网：http://element.eleme.io/#/zh-CN/component/installation\n输入命令：`npm i element-ui -S`\n\n或者：因为是基于Vue.js和`elementUI`进行的项目开发，所以当然要导入Vue.j包和elementUI包：`npm install --save vue element-ui`\n\n\n\n### 安装vue-router\n\n要进行页面跳转，所以要用到`vue-router2：`\n\n输入命令：`npm install --save vue-router`\n\n### 安装axios\n\n要从后端获取数据，所以要`ajax`请求，用vue官方推荐的`axios`：\n\n输入命令：`npm install --save axios`\n\n\n### 安装vuex\n\n\n输入命令：`npm install vuex --save`\n\n`Vuex` 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n虽然 `Vuex` 可以帮助我们管理共享状态，但也附带了更多的概念和框架。这需要对短期和长期效益进行权衡。\n\n如果您不打算开发大型单页应用，使用 `Vuex` 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 `Vuex`。一个简单的 `global event bus` 就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，`Vuex` 将会成为自然而然的选择。\n\n\n### 根据需要安装其他模块\n\n`npm install xxxx --save`\n\n### 启动项目\n\n输入：`npm run dev`\n\n`buid`：构建脚本目录\n`config`：构建配置目录\n`node_modules`：依赖node工具包目录\n`src`：源码目录\n`assets`：资源目录\n`components`：组件目录\n`router`：\n`App.vue` 页面vue组件\n`main.js`：页面入口js文件\n`static`：静态文件目录\n`test`：测试文件目录\n`.eslintrc.js`：es语法检查配置\n`index.html`：入口页面\n`package.json `：项目描述文件\n\n如果需要增加组件那就在`components`文件下定义xx.vue文件并编写代码即可，如果需要配置路由就要进行在index.js进行路由“路径”配置，还需要点击跳转就要用到`<router-link></router-link>`标签了。\n\n#### 调用后台接口：\n\n```csharp\nmain.js 引入\nimport axios from ''axios''\nVue.prototype.$http = axios\nVue.prototype.$http.defaults.baseURL = '''' // `baseURL` 将自动加在 `url` 前面，\n除非 `url` 是一个绝对 URL\n```\n    <script>\n    export default {\n     data () {\n      const item = {\n       date: ''2016-05-02'',\n       name: ''王小虎'',\n       address: ''上海市普陀区金沙江路 1518 弄''\n      }\n      return {\n       list: [],\n       tableData: Array(20).fill(item)\n      }\n     },\n     created () {\n      this.getlist()\n     },\n     methods: {\n      getlist () {\n       let _this = this\n       _this.$http.get(''https://localhost:44314/api/Values'').then(res => {\n        _this.list = res.data\n       })\n      }\n     }\n    }\n    </script>\n\n#### 页面：\n\n```csharp\n <el-main>\n    <el-table :data=\"list\">\n     <el-table-column prop=\"datatext\" label=\"日期\" width=\"140\">\n     </el-table-column>\n     <el-table-column prop=\"version\" label=\"姓名\" width=\"120\">\n     </el-table-column>\n     <el-table-column prop=\"id\" label=\"地址\"> </el-table-column>\n     <el-table-column prop=\"text\" label=\"描述\"> </el-table-column>\n    </el-table>\n   </el-main>\n```',0,0,'blog/1.jpg',0,16,2,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(73,'vue构建iis发布项目','vue构建iis发布项目','\n\n### 构建该项目的命令如下\n\n**npm run build**\n\n### 卸载插件\n\n`npm uninstall element-ui`\n\n### 启动\n\n`npm run dev`',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(74,'router路由笔记','router路由笔记','\n### 跳转\n\n`<router-link to=\"first\">`\n\n#### 字符串\n\n `this.$router.push(''/vsplay'')`\n\n#### 对象\n\n`this.$router.push({ path: ''/home/first'' })`\n\n#### 命名的路由\n\n`this.$router.push({ name: ''home'', params: { userId: wise }})`\n`$router.replace(/)`\n`window.location.href=\"aaa.html\"`\n\n\n```csharp\nindex.js:\n path: ''/Card'',\n component: Card /:userid* 注册HelloWorld组件 */\n<router-link to=\"/Card/Card''\">\n```\n\n#### 动态绑定：\n`<router-link v-bing:to=\"''/Card/''+Card''\">`\n\n#### 路由懒加载\n\n`const Panel = () => import(''@/components/Panel'')`// 路由懒加载\n\n\n\n#### 路由嵌套（子组件）\n\n`const news= () => import(''@/components/news'')`\n\n```csharp\npath: ''/Card'',\n component: Card\nchildren:[ //子组件\n{\n path:'' '',\n redirect: ''news'' // 默认路径\n},\n{\n path:''news''\n  component:news\n}\n]\n```\n\n在父组件进行调用\n`<router-view> </router-view>`\n\n#### 参数传递2种类型[params/query]\n\n\nparams: 配置路由格式：`/router/:id`\n    传递方式： 在path后面跟上对应的值\n    传递后形成的路径：/router/123,/router/abc\n\n   query:配置路由格式：`/router`\n    传递方式：对象中的使用 query的key作为传递方式\n     传递后形成的路径：/router?id=123,/rotuer?id=abc\n\n\n #### 配置组件 配置路由映射\n\n 调用：`<rotuer-link :to=\"''/user/''+userid\"> `传递`</router-link>`\n   ：`<rotuer-link :to=\"{path:''/''}\"> `传递`</router-link>`\n   ：`<rotuer-link :to=\"{path:''/'',query:{name: ''1212''} }\"> `传递`</router-link>`\n\n  取值：`{{$route.query.name}}`\n\n #### 事件传值@click=\"方法\"\n\n```csharp\n  this.$router.push(''/user''+this.userid)\n   this.$router.push({\n   path:'' /user'',\n     query:{\n     name: ''123''\n   }\n  })\n\nconst routes = [{\n}]\nconst router = new Router({\nroutes,\n mode: ''history''\n})\nexport default router\n```\n\n\n\n### 导航守卫\n```csharp\n{\n  path: ''/Card'',\n component: Card\n meta:{\n   title:''少年''\n }\n }\n```\n\n#### 前置钩子（hook）\n\n```csharp\nrouter.beforeEach((to,from,next)=>{\n document.title = to.meta.title\nnext()\n })\n```\n#### 后置钩子\n\n```csharp\nrouter.afterEach((to,from)=>{\n })\n```\n\n`keep-alive`组件缓存(避免重新渲染，生成)\n\n使用：` <keep-alive><router-view /> </keep-alive>`\n\n组件中使用：/路径/路径\n\n ```csharp\n activated(){ this.$router.push(路径)}//活跃函数\n  beforeRouteLeave(to,from,next){\n  this.path = this.$router.path;\n    next()\n  }\n```\n属性：`include` - 字符串或正则表达式，匹配组件会被缓存\n  ` exclude` - 字符串或正则表达式, 任何匹配到的组件不会被缓存\n\n使用：`<keep-alive exclude=\"组件中的name\"><router-view /> </keep-alive>`\n\n',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(75,'VueH5History部署IIS上404问题','部署IIS上404问题','### 使用\n\n1、下载Web平台安装程序（https://www.microsoft.com/web/downloads/）\n\n2、如果已经安装过Web平台安装程序，可以在IIS站点看到该程序\n\n3、查找Url重写工具2.0并进行安装\n\n4、安装完毕后，重新打开IIS控制台，进入相应站点，就可以看到URL重写该功能模块\n\n5、添加规则，并选择入站规则-空白规则\n\n\n###  匹配url：\n\n 与模式匹配 使用： 通配符 模式： *\n\n### 条件：\n\n逻辑分组：全部匹配 类型：不是文件\n服务器变量：\n\n\n类型： 重写\n重写url： /index.html\n\n重启服务运行 刷新 404 消失\n\n\nhttps://www.iis.net/downloads/microsoft/url-rewrite',1,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(76,'Vue 路由缓存 ，指定路由缓存，部分路由缓存(转)','缓存全部路由 在router-view外包裹keep-alive  例：  <keep-alive>    <router-view></router-view>   </keep-alive> 指定路由缓存','\n\n### 缓存全部路由\n\n在`router-view`外包裹`keep-alive`\n\n例：\n```csharp\n<keep-alive>\n   <router-view></router-view>\n  </keep-alive>\n```\n\n### 指定路由缓存\n\n使用 `include`\n```csharp\n<keep-alive include=\"该路由的name名称\">\n <router-view></router-view>\n</keep-alive>\n```\n\n### 存在多个路由时，想缓存部分路由\n\n使用` meta`\n在路由中添加下面属性\n ` meta: {keepAlive: true // 缓存}`\n  `meta: {keepAlive:false // 不缓存 }`\n\n  例：\n```csharp\n  {\n     path:''/Distribution'',\n     name:''Distribution'',\n     component: Distribution,\n     meta: {keepAlive: true // 缓存}\n }\n```\n\n然后在页面\n```csharp\n  <keep-alive >\n //当前进入的路由 meta里面 keepAlive为true时走这里\n   <router-view v-if=\"$route.meta.keepAlive\"></router-view>\n  </keep-alive>\n  //当前进入的路由 meta里面 keepAlive为false时走这里 下面 if 判断进行了取反处理\n  <router-view v-if=\"!$route.meta.keepAlive\"></router-view>\n```\n\n原文链接：`https://blog.csdn.net/weixin_42646130/article/details/93333207`',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(77,'VUE几种页面刷新方法','1、this.$router.go(0) 这种方法页面会一瞬间的白屏，体验不是很好，虽然只是一行代码的事  2、location.reload() 这种也是一样，画面一闪，效果总不是很好','### 使用\n\n1、`this.$router.go(0)`\n这种方法页面会一瞬间的白屏，体验不是很好，虽然只是一行代码的事\n\n2、`location.reload()`\n这种也是一样，画面一闪，效果总不是很好\n\n3、搭配`provide、inject`使用\n\n首先在主页面 `app.vue`\n\n设置：\n```csharp\n <keep-alive include=\"GjTable\">\n      <router-view v-if=\"isRouterAlive\"></router-view\n  ></keep-alive>\n```\n\n设置：`script`\n\n```csharp\nexport default {\n provide () {\n    return {\n      reload: this.reload\n    },\n  data () {\n    return {\n      isRouterAlive: true\n    }\n  },\n methods: {\n    reload () {\n      this.isRouterAlive = false\n      this.$nextTick(function () {\n        this.isRouterAlive = true\n      })\n    }\n  }\n}\n```\n\n在需要刷新的页面导入` inject: [''reload''],`\n调用刷新：  `this.getgjtype(''vue'')` // 此页面加了缓存需要重新加载数据   `this.reload() `// 刷新页面',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(78,'子组件传父组件','定义两个组件 Tutorialbutton.vue 子组件 GjTable.vue 父组件  Tutorialbutton.vue子组件内容: <template>   <div>     <el-tabs type=\"border-card\">','\n### 定义两个组件\n\n`Tutorialbutton.vue` 子组件\n`GjTable.vue` 父组件\n\n### Tutorialbutton.vue子组件内容:\n\n```csharp\n<template>\n  <div>\n    <el-tabs type=\"border-card\">\n      <el-button size=\"mini\" @click=\"getgjtype(''c%23'')\"> c#</el-button>\n    </el-tabs>\n  </div>\n</template>\n```\n\n```csharp\n<script>\nimport request from ''@/network/request'' //封装好的axios\nexport default {\n  name: ''Tutorialbutton'',\n  data () {\n    return {\n      tableData: [] //接口获取的值\n    }\n  },\n  methods: {\n    getgjtype (gjtype) {\n      request({ // 条件查询\n        url: ''/api/Gjtype/'' + gjtype\n      }).then(res => {\n        this.tableData = res.data\n\n  // tableData是在父组件on监听的方法\n // 第二个参数this.childValue是需要传的值\n        this.$emit(''tableData'', this.tableData) \n      })\n\n      // this.$http.get(''/api/Gjtype/'' + gjtype).then(res => {\n      //   this.tableData = res.data\n      // })\n    }\n  }\n}\n</script>\n```\n\n### 父组件获取值GjTable.vue\n\nscript引入子组件\n`import Tutorialbutton from ''./gjtable/Tutorialbutton''`\n\n```csharp\n//<template>\n<Tutorialbutton v-on:tableData=\"tableDatas\"></Tutorialbutton>\n```\n\n```csharp\nname: ''GjTable'',\n  components: {\n    Tutorialbutton\n  },\n data () {\n    return {\n      tableData: []\n    }\n  },\n methods: {\ntableDatas (name) {\n      // childValue就是子组件传过来的值\n      this.tableData = name\n    }\n}\n```',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(79,'vue组件对组件传值（非父子组件）','定义个公共的公共实例文件bus.js， // bus.js  //作为中间仓库来传值 import Vue from ''vue'' export default new Vue() Tutorialbutton.vue组件 template： <el-button size=\"mini\" @click=\"getgjtype(''c%23'')\"> c#</el-button>  // 引入公共的bug，来做为中间传达的工','\n### 定义个公共的公共实例文件`bus.js`，\n\n// bus.js\n\n```csharp\n//作为中间仓库来传值\nimport Vue from ''vue''\nexport default new Vue()\n```\n\n### Tutorialbutton.vue组件\n\ntemplate：\n `<el-button size=\"mini\" @click=\"getgjtype(''c%23'')\"> c#</el-button>`\n\n// 引入公共的bug，来做为中间传达的工具\n```csharp\nimport Bus from ''./bus.js''\nexport default {\n  name: ''Tutorialbutton'',\n  data () {\n    return {\n      tableData: []\n    }\n  },\n  methods: {\n    getgjtype (gjtype) {\n      request({ // 条件查询\n        url: ''/api/Gjtype/'' + gjtype\n      }).then(res => {\n        this.tableData = res.data\n        Bus.$emit(''tableData'', this.tableData)\n      })\n    }\n  }\n}\n```\n\n### Gjlables.vue 获取组件传过来的值\n\n/ 引入公共的bug，来做为中间传达的工具\n\n```csharp\nimport Bus from ''./bus.js''\n data () {\n    return {\n      tableData: [],\n    }\n  },\n  mounted: function () {\n    var vm = this\n    // 用$on事件来接收参数\n    Bus.$on(''tableData'', (data) => {\n      console.log(data)\n      vm.tableData = data\n    })\n  }\n```',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(80,'设置路径别名','设置路径别名','\n### 根目录新建config.js文件\n\nconfig.js：\n\n```csharp\nconst path = require(''path'')\nfunction resolve (dir) {\n  return path.join(__dirname, dir)\n}\n\nmodule.exports = {\n  lintOnSave: true,\n  chainWebpack: config => {\n    config.resolve.alias\n      .set(''@'', resolve(''src''))\n      .set(''assets'', resolve(''src/assets''))\n      .set(''components'', resolve(''src/components''))\n      .set(''amaze'', resolve(''src/amaze''))\n  }\n}\n```\n\n',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(81,'vue cli3项目打包','vue cli3项目打包','\n### 新建 vue.config.js 文件\n\n```csharp\n// 在这里配置\nmodule.exports = {\n    // 基本路径\n    publicPath:\"./\",\n    // 输出文件目录\n    outputDir: ''dist'',\n    // webpack-dev-server 相关配置\n    devServer: {\n        // port: 8888,\n        // ...\n    },\n}\n```\n### 在 router.js 里\n//把mode写成hash模式\n`mode: ''hash''`\n运行\n`npm run build`',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(82,'Vuepress 搭建带评论功能的静态博客','我们使用 valine 来实现评论功能： Valine - 一款快速、简洁且高效的无后端评论系统。 点击进入 Valine官网 ，需要先注册才能食用','\n### 评论功能\n我们使用 valine 来实现评论功能：\nValine - 一款快速、简洁且高效的无后端评论系统。\n点击进入 Valine官网 ，需要先注册才能食用\n\n### 安装 Valine\n`npm install leancloud-storage --save`\n\n### Install valine\n`npm install valine --save`\n### 注册 vuepress 全局组件\n创建 `.vuepress/components/Valine.vue`\n\n    <template>\n      <div id=\"vcomments\"></div>\n    </template>\n    <script>\n    export default {\n      name: ''Valine'',\n      mounted: function(){\n        // require window \n        const Valine = require(''valine'');\n        if (typeof window !== ''undefined'') {\n          this.window = window\n          window.AV = require(''leancloud-storage'')\n        }\n        new Valine({\n          el: ''#vcomments'' ,\n          appId: '''',// your appId\n          appKey: '''', // your appKey\n          notify:false, \n          verify:false, \n          avatar:''mm'', \n          placeholder: ''just go go'' \n        });\n      },\n    }\n    </script>\n    使用 Valine\n    只需要在 markdown 中调用即可\n    <Valine></Valine>\n\n### 演示\n<comments/>',0,0,'blog/1.jpg',0,15,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(83,'Vuepress 不蒜子访问量统计功能','开始使用 yarn add busuanzi.pure.js  or npm install busuanzi.pure.js --save  Example Vue.js','\n\n### 开始使用\n`yarn add busuanzi.pure.js`\n#### or\n`npm install busuanzi.pure.js --save`\n### Example\n**Vue.js**\n\n```javascript\n<template>\n  <div class=\"busuanzi\">\n    <span id=\"busuanzi_container_site_pv\" style=\"display:none\">\n      本站总访问量\n      <span id=\"busuanzi_value_site_pv\"></span>次\n      <span class=\"post-meta-divider\">|</span>\n    </span>\n    <span id=\"busuanzi_container_site_uv\" style=\"display:none\">\n      本站访客数\n      <span id=\"busuanzi_value_site_uv\"></span>人\n    </span>\n  </div>\n</template>\n<script>\nconst busuanzi = require(\"busuanzi.pure.js\");\nexport default {\n  // 监听,当路由发生变化的时候执行\n  watch: {\n    $route(to, from) {\n      if (to.path != from.path) {\n        script.fetch();\n      }\n      // console.log(to.path);\n    }\n  }\n};\n</script>\n```',0,0,'blog/1.jpg',0,15,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(84,'宠物猫插件','安装 npm i vuepress-plugin-cat -S  添加到 .vuepress/config.js  module.exports = {   plugins: [     \"vuepress-plugin-cat\",   ] } 让你的 vuepress 项目跑起来，猫就出现在右下角了~','\n\n### 安装\n`npm i vuepress-plugin-cat -S`\n\n 添加到 .vuepress/config.js\n```csharp\nmodule.exports = {\n  plugins: [\n    \"vuepress-plugin-cat\",\n  ]\n}\n```\n\n让你的 vuepress 项目跑起来，猫就出现在右下角了~\n\n对了，`vuepress-plugin-cat` 会根据页面路由的切换随机加载白猫或者黑猫~\n本插件仅支持 vuepress 1.x 版本，0.x 使用请查看文档。\n\n作者：demonQ\n链接：https://juejin.im/post/5d5137066fb9a06b2a203214\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。',0,0,'blog/1.jpg',0,15,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(85,'Vue CLI3.0 中使用jQuery 和 Bootstrap','第一步：安装 jQuery、 Bootstrap、popper.js依赖。 其中popper.js 用于在 Bootstrap 中显示弹窗、提示、下拉菜单，所以需要引入。 npm install jquery bootstrap@3 popper.js --save','\n\n### 第一步：安装 jQuery、 Bootstrap、popper.js依赖。\n其中popper.js 用于在 Bootstrap 中显示弹窗、提示、下拉菜单，所以需要引入。\n`npm install jquery bootstrap@3 popper.js --save`\n\n注意：上面的 bootstrap@3 指的是安装 Bootstrap 第三版，如果不加 @3 符号，默认安装第四版。\n\n### 第二步：配置 main.js\n引入 Boostrap 请看配置文件。\n```csharp\n//main.js\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\nimport store from \"./store\";\n```\n//在这里引入 bootstrap。默认只引入 bootstrap 中的 js，css 需要另外引入，我的 bootstrap.ss 在APP.vue中引入的\nimport \"bootstrap\";\n//也可以在这里引入 bootstrap.css ;\n//import \"bootstrap/dist/css/bootstrap.css\";\n\n```csharp\nVue.config.productionTip = false;\nnew Vue({\n  router: router,\n  store: store,\n  render: h => h(App)\n}).$mount(\"#app\");\n```\n\n我的 APP.vue 的配置，只是引入 bootstrap.css，代码仅供参考。\n\n```csharp\n<style>\n// 因为我的 bootstrap 文件经过了我自己的调整，所以单独放在 assets 文件夹中做单独引入。\n//如果你只是想使用原生的 bootstrap，直接在 main.js 中引入 css 文件即可。\n@import \"./assets/css/bootstrap.css\";\n</style>\n```\n\n### 第三步：配置 vue.config.js 文件\nVue CLI3.0 中的所有配置都在 vue.config.js 文件，你在这里配置好，脚手架自动使用你的配置覆盖掉默认的配置。\n如果你的项目中没有 vue.config.js 文件，请你在 package.json 文件的同级目录新建一个 vue.config.js 文件。文件内具体的配置如下：\n\n`const webpack = require(\"webpack\");`\n\n```csharp\nmodule.exports = {\n//configureWebpack 是Vue CLI3.0 中用于配置 webpack 插件参数的地方，你在这里设置，会新建或者覆盖 webpack 默认配置。\n//webpack ProvidePlugin 的含义是创建一个全局的变量，使这个变量在 webpack 各个模块内都可以使用。这里的配置含义是创建 ''$''、''jQuery''、''window.jQuery'' 三个变量指向 jquery 依赖，创建 ''Popper'' 变量指向 popper.js 依赖。\n    configureWebpack: {\n        plugins: [\n            new webpack.ProvidePlugin({\n                $: ''jquery'',\n                jQuery: ''jquery'',\n                ''window.jQuery'': ''jquery'',\n                Popper: [''popper.js'', ''default'']\n              })\n        ]\n      }\n}\n```\n\n\n### 第四步：具体使用范例\n\n\n作者：冬瓜不削皮\n链接：https://www.jianshu.com/p/0d0c1eaeb877\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(86,'vue-Element-axios搭建调用api进行数据展示','1全局安装vue-cli 输入命令：npm install vue-cli -g  2创建项目框架 输入命令：vue init webpack vueapi  3依次按照提示输入，项目名、项目描述、项目作者等等，','\n### 全局安装vue-cli\n\n`npm install vue-cli -g`\n\n### 创建项目框架\n\n`vue init webpack vueapi`\n\n### 依次按照提示输入，项目名、项目描述、项目作者等等，\n\n### 进入vueapi目录\n\n` cd vueapi`\n\n### 安装element-ui\n\n`npm i element-ui -S`\n因为是基于Vue.js和elementUI进行的项目开发，所以当然要导入Vue.j包和elementUI包：\n\n`npm install --save vue element-ui`\n\n### 安装vue-router\n\n要进行页面跳转，所以要用到vue-router：\n\n`npm install --save vue-router`\n\n### 安装axios\n\n要从后端获取数据，所以要ajax请求，用vue官方推荐的axios：\n\n`npm install --save axios`\n\n### 启动项目\n输入：`npm run dev`\n构建vue项目目录大致如下：\n\n```csharp\nbuid：构建脚本目录\nconfig：构建配置目录\nnode_modules：依赖node工具包目录\nsrc：源码目录\nassets：资源目录\ncomponents：组件目录\nrouter：\nApp.vue 页面vue组件\nmain.js：页面入口js文件\nstatic：静态文件目录\ntest：测试文件目录\n.eslintrc.js：es语法检查配置\nindex.html：入口页面\npackage.json ：项目描述文件\n```\n\n### 调用后台接口：需要引入axios\n\n在main.js 引入\n```csharp\nimport axios from ''axios''\nVue.prototype.$http = axios\nVue.prototype.$http.defaults.baseURL = '''' // `baseURL` 将自动加在 `url` 前面\n```，除非 `url` 是一个绝对 URL\n\n\n```csharp\n<template>\n  <el-container style=\"height: 680px; border: 10px solid #eee\">\n    <el-aside width=\"250px\" style=\"background-color: rgb(238, 241, 246)\">\n      <el-menu :default-openeds=\"[''1'', ''3'']\">\n        <el-submenu index=\"1\">\n          <template slot=\"title\"\n            ><i class=\"el-icon-message\"></i>导航一</template\n          >\n          <el-menu-item-group>\n            <template slot=\"title\"\n              >分组一</template\n            >\n            <el-menu-item index=\"1-1\">选项1</el-menu-item>\n            <el-menu-item index=\"1-2\">选项2</el-menu-item>\n          </el-menu-item-group>\n          <el-menu-item-group title=\"分组2\">\n            <el-menu-item index=\"1-3\">选项3</el-menu-item>\n          </el-menu-item-group>\n          <el-submenu index=\"1-4\">\n            <template slot=\"title\"\n              >选项4</template\n            >\n            <el-menu-item index=\"1-4-1\">选项4-1</el-menu-item>\n          </el-submenu>\n        </el-submenu>\n        <el-submenu index=\"2\">\n          <template slot=\"title\"\n            ><i class=\"el-icon-menu\"></i>导航二</template\n          >\n          <el-menu-item-group>\n            <template slot=\"title\"\n              >分组一</template\n            >\n            <el-menu-item index=\"2-1\">选项1</el-menu-item>\n            <el-menu-item index=\"2-2\">选项2</el-menu-item>\n          </el-menu-item-group>\n          <el-menu-item-group title=\"分组2\">\n            <el-menu-item index=\"2-3\">选项3</el-menu-item>\n          </el-menu-item-group>\n          <el-submenu index=\"2-4\">\n            <template slot=\"title\"\n              >选项4</template\n            >\n            <el-menu-item index=\"2-4-1\">选项4-1</el-menu-item>\n          </el-submenu>\n        </el-submenu>\n        <el-submenu index=\"3\">\n          <template slot=\"title\"\n            ><i class=\"el-icon-setting\"></i>导航三</template\n          >\n          <el-menu-item-group>\n            <template slot=\"title\"\n              >分组一</template\n            >\n            <el-menu-item index=\"3-1\">选项1</el-menu-item>\n            <el-menu-item index=\"3-2\">选项2</el-menu-item>\n          </el-menu-item-group>\n          <el-menu-item-group title=\"分组2\">\n            <el-menu-item index=\"3-3\">选项3</el-menu-item>\n          </el-menu-item-group>\n          <el-submenu index=\"3-4\">\n            <template slot=\"title\"\n              >选项4</template\n            >\n            <el-menu-item index=\"3-4-1\">选项4-1</el-menu-item>\n          </el-submenu>\n        </el-submenu>\n      </el-menu>\n    </el-aside>\n\n    <el-container>\n      <el-header style=\"text-align: right; font-size: 12px\">\n        <el-dropdown>\n          <i class=\"el-icon-setting\" style=\"margin-right: 15px\"></i>\n          <el-dropdown-menu slot=\"dropdown\">\n            <el-dropdown-item>查看</el-dropdown-item>\n            <el-dropdown-item>新增</el-dropdown-item>\n            <el-dropdown-item>删除</el-dropdown-item>\n          </el-dropdown-menu>\n        </el-dropdown>\n        <span>王小虎</span>\n      </el-header>\n\n      <el-main>\n        <el-table :data=\"list\">\n          <el-table-column prop=\"datatext\" label=\"日期\" width=\"140\">\n          </el-table-column>\n          <el-table-column prop=\"version\" label=\"姓名\" width=\"120\">\n          </el-table-column>\n          <el-table-column prop=\"id\" label=\"地址\"> </el-table-column>\n          <el-table-column prop=\"text\" label=\"描述\"> </el-table-column>\n        </el-table>\n      </el-main>\n    </el-container>\n  </el-container>\n</template>\n```\n### css js：\n\n```csharp\n<style>\n.el-header {\n  background-color: #b3c0d1;\n  color: #333;\n  line-height: 60px;\n}\n\n.el-aside {\n  color: #333;\n}\n</style>\n\n<script>\n\nexport default {\n\n  data () {\n    const item = {\n      date: ''2016-05-02'',\n      name: ''王小虎'',\n      address: ''上海市普陀区金沙江路 1518 弄''\n\n    }\n\n    return {\n      list: [],\n      tableData: Array(20).fill(item)\n    }\n  },\n\n  created () {\n    this.getlist()\n  },\n  methods: {\n    getlist () {\n      let _this = this\n      _this.$http.get(''https://localhost:44314/api/Values'').then(res => {\n        _this.list = res.data\n      })\n    }\n  }\n}\n</script>\n```\n### 数据填充页面\n\n```csharp\n  <el-main>\n        <el-table :data=\"list\">\n          <el-table-column prop=\"datatext\" label=\"日期\" width=\"140\">\n          </el-table-column>\n          <el-table-column prop=\"version\" label=\"姓名\" width=\"120\">\n          </el-table-column>\n          <el-table-column prop=\"id\" label=\"地址\"> </el-table-column>\n          <el-table-column prop=\"text\" label=\"描述\"> </el-table-column>\n        </el-table>\n      </el-main>\n```\n\n运行',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(87,'VUE创建播发器组件并调用','新建play.vue文件 编写play组件  <template>   <div>     <el-row>       <el-col :span=\"4\">         <el-popover placement=\"top-start\" trigger=\"hover\">           <div style=\"text-align: center\">             <el-progress               color=\"#67C23A\"               type=\"circle\"               :percentage=\"music.volume\"','\n### vue-cli创建前端项目\n\n参考：`https://www.cnblogs.com/ouyangkai/p/11549290.html`\n\n### 新建play.vue文件\n\n编写play组件\n```csharp\n<template>\n  <div>\n    <el-row>\n      <el-col :span=\"4\">\n        <el-popover placement=\"top-start\" trigger=\"hover\">\n          <div style=\"text-align: center\">\n            <el-progress\n              color=\"#67C23A\"\n              type=\"circle\"\n              :percentage=\"music.volume\"\n            ></el-progress\n            ><br />\n            <el-button\n              @click=\"changeVolume(-10)\"\n              icon=\"el-icon-minus\"\n              circle\n            ></el-button>\n            <el-button\n              @click=\"changeVolume(10)\"\n              icon=\"el-icon-plus\"\n              circle\n            ></el-button>\n          </div>\n          <el-button\n            @click=\"play\"\n            id=\"play\"\n            slot=\"reference\"\n            :icon=\"music.isPlay ? ''el-icon-refresh'' : ''el-icon-caret-right''\"\n            circle\n          ></el-button>\n        </el-popover>\n      </el-col>\n      <el-col :span=\"14\" style=\"padding-left: 20px\">\n        <el-slider\n          @change=\"changeTime\"\n          :format-tooltip=\"formatTime\"\n          :max=\"music.maxTime\"\n          v-model=\"music.currentTime\"\n          style=\"width: 100%;\"\n        ></el-slider>\n      </el-col>\n      <el-col\n        :span=\"6\"\n        style=\"padding: 9px 0px 0px 10px;color:#909399;font-size: 13px\"\n      >\n        {{ formatTime(music.currentTime) }}/{{ formatTime(music.maxTime) }}\n      </el-col>\n    </el-row>\n    <audio ref=\"music\" loop autoplay>\n      <source src=\"../mp4/pkn0m-iuv0i.mp3\" type=\"audio/mpeg\" />\n    </audio>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      music: {\n        isPlay: false,\n        currentTime: 0,\n        maxTime: 0,\n        volume: 100\n      }\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      setInterval(this.listenMusic, 1000)\n    })\n  },\n  methods: {\n    listenMusic () {\n      if (!this.$refs.music) {\n        return\n      }\n      if (this.$refs.music.readyState) {\n        this.music.maxTime = this.$refs.music.duration\n      }\n      this.music.isPlay = !this.$refs.music.paused\n      this.music.currentTime = this.$refs.music.currentTime\n    },\n    play () {\n      if (this.$refs.music.paused) {\n        this.$refs.music.play()\n      } else {\n        this.$refs.music.pause()\n      }\n      this.music.isPlay = !this.$refs.music.paused\n      this.$nextTick(() => {\n        document.getElementById(''play'').blur()\n      })\n    },\n    changeTime (time) {\n      this.$refs.music.currentTime = time\n    },\n    changeVolume (v) {\n      this.music.volume += v\n      if (this.music.volume > 100) {\n        this.music.volume = 100\n      }\n      if (this.music.volume < 0) {\n        this.music.volume = 0\n      }\n      this.$refs.music.volume = this.music.volume / 100\n    },\n    formatTime (time) {\n      let it = parseInt(time)\n      let m = parseInt(it / 60)\n      let s = parseInt(it % 60)\n      return (m < 10 ? ''0'' : '''') + parseInt(it / 60) + '':'' + (s < 10 ? ''0'' : '''') + parseInt(it % 60)\n    }\n  }\n}\n</script>\n```\n以上代码直接复制保存即可\n\n### 引用组件\n在app.vue 中的 script 导入组件，并且在components中声明\n```csharp\n<script>\nimport play from ''../src/components/play''\nexport default {\n\n  name: ''App'',\n  components: {\n    play\n  }\n\n}\n</script>\n```\n\n在app.vue  template 里面的div 里面添加自定义play组件\n<play />\n\n运行项目：`npm run dev`\n成功引用！',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(88,'Vue2页面刷新','搭配provide、inject使用 首先在主页面 app.vue  设置： <keep-alive include=\"GjTable\">      <router-view v-if=\"isRouterAlive\"></router-view  ></keep-alive> 设置：script export default {   provide () {     return {','\n\n\n\n### router刷新\n\n这种方法页面会一瞬间的白屏\n\n```\nthis.$router.go(0)\n```\n\n### location\n\n这种也是一样，画面一闪\n\n```\nlocation.reload()\n```\n\n以上整个浏览器进行了重新加载，闪烁，体验不好\n\n### provide/inject\n\n允许一个祖先组件向其所有子孙后代注入一个依赖，**不论组件层次有多深**，并在起上下游关系成立的时间里始终生效。\n\nprovide：选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。\n\ninject：一个字符串数组，或一个对象，对象的 key 是本地的绑定名\n\n\n\n搭配provide、inject使用,首先在主页面 app.vue\n\n```html\n <keep-alive include=\"GjTable\">\n      <router-view v-if=\"isRouterAlive\"></router-view\n  ></keep-alive>\n```\n\njs\n\n```js\nexport default {\n provide () {\n    return {\n      reload: this.reload\n    },\n  data () {\n    return {\n      isRouterAlive: true\n    }\n  },\n methods: {\n    reload () {\n      this.isRouterAlive = false\n      this.$nextTick(function () {\n        this.isRouterAlive = true\n      })\n    }\n  }\n}\n```\n\n\n\n在页面注入app.vue组件提供（provide）的 reload 依赖，在逻辑完成之后（删除或添加...）,直接this.reload()调用，即可刷新当前页面\n\n```js\ninject: [''reload''],\n //调用刷新： \n // 此页面加了缓存需要重新加载数据 \n this.getgjtype(''vue'')  \n this.reload() // 刷新页面 \n```\n\n\n\n ',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-10-27 00:00:00'),
(89,'vuex状态管理','vuex 是一个专门为vue.js应用程序开发的状态管理模式。','\n### vuex是什么\n\nvuex 是一个专门为vue.js应用程序开发的状态管理模式。\n### vuex中，有默认的五种基本的对象：\n\n```html\nstate：存储状态（变量）\ngetters：对数据获取之前的再次编译，可以理解为state的计算属性。我们在组件中使用 $sotre.getters.fun()\nmutations：修改状态，并且是同步的。在组件中使用$store.commit('''',params)。这个和我们组件中的自定义事件类似。\nactions：异步操作。在组件中使用是$store.dispath('''')\nmodules：store的子模块，为了开发大型项目，方便状态管理而使用的。这里我们就不解释了，用起来和上面的一样。\n```\n\n### 1 .安装vuex\n\n```html\n`npm install vuex --save`\n```\n\n### 2 . 新建store/store.js文件，引入vuex\n\n```csharp\nimport Vue from ''vue''\nimport Vuex from ''vuex''\nVue.use(Vuex)\nconst state = {\n  count: 1\n}\n\nconst mutations = {\n  increment (state) {\n    state.count++\n  }\n}\n\nexport default new Vuex.Store({\n  state,\n  mutations\n})\n```\n### 3.在main.js中引入store\n\n```csharp\nimport store from ''./store/store''\nnew Vue({\n  el: ''#app'',\n  router,\n  store,\n  components: { App },\n  template: ''<App/>''\n})\n```\n### 4.页面调用count状态\n\n```html\n`{{ $store.state.count }}`\n```\n\n### 5.用mutations和actions 继续操作store状态\n\n```html\n<button @click=\"add()\">add</button>\n\nmethods: {\n    add () {\n     this.$store.commit(''increment'') //普通提交封装\n    }\n  }\n```\n#### 5.1 mutations携带参数：\n\n<button @click=\"add(10)\">add</button>\n\n```html\n methods: {\n    add (count) {\n    //  this.$store.commit(''increment'',count)\n       this.$store.commit({ //对象提交封装\n       type:''increment'',\n       count\n     })\n    }\n  }\n```\n### store.js文件:\n\n```html\nconst mutations = {\n  increment (state,count) {\n    state.counter+=count\n  }\n}\n\n //对象提交count更改 payload\n   increment (state) {\n   state.counter+=payload.count\n}\n```\n#### 6.actions是异步操作\n\n```html\nconst actions = { // 异步操作\n  acincrement (context) {\n    state.count++\n  }\n使用dispath来触发\n\n this.$store.dispatch(''acincrement'')\n```\n### 7.getters\n\n```html\nconst getters = {\n  getterCount(state, n = 0) {\n    return (state.count += n)\n  }\n}\n\nexport default new Vuex.Store({\n  state,\n  mutations,\n  actions,\n  getters\n})\n```\n#### 属性调用：\n```html\n\n`{{ $store.getters.getterCount }}`\n```\n#### 7.1getters传参：\n```html\n\n{ $store.getters.getterid(10) }}\ngetterid(state){\n\nreturn age = >{\nreturn //需要判断的数值\n}\n}\n```\n\n',1,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(90,'vue 组件传值','1.定义两个组件 Tutorialbutton.vue 子组件 GjTable.vue 父组件 2.Tutorialbutton.vue子组件内容: <template>   <div>     <el-tabs type=\"border-card\">       <el-button size=\"mini\" @click=\"getgjtype(''c%23'')\"> c#</el-button>     </el-tabs>   </div>','\n### 1.定义两个组件\n\n```csharp\nTutorialbutton.vue 子组件\nGjTable.vue 父组件\n```\n\n### 2.Tutorialbutton.vue子组件内容:\n\n```csharp\n<template>\n  <div>\n    <el-tabs type=\"border-card\">\n      <el-button size=\"mini\" @click=\"getgjtype(''c%23'')\"> c#</el-button>\n    </el-tabs>\n  </div>\n</template>\n\n<script>\nimport request from ''@/network/request'' //封装好的axios\nexport default {\n  name: ''Tutorialbutton'',\n  data () {\n    return {\n      tableData: [] //接口获取的值\n    }\n  },\n\n\n  methods: {\n    getgjtype (gjtype) {\n      request({ // 条件查询\n        url: ''/api/Gjtype/'' + gjtype\n      }).then(res => {\n        this.tableData = res.data\n\n  // tableData是在父组件on监听的方法\n // 第二个参数this.childValue是需要传的值\n        this.$emit(''tableData'', this.tableData) \n      })\n      // this.$http.get(''/api/Gjtype/'' + gjtype).then(res => {\n      //   this.tableData = res.data\n      // })\n    }\n  }\n}\n</script>\n```\n### 3.GjTable.vue父组件获取子组件值\n\n```csharp\n//script引入子组件\nimport Tutorialbutton from ''./gjtable/Tutorialbutton''\n\n//<template><!-- 引入子组件 定义一个on的方法监听子组件的状态-->\n<Tutorialbutton v-on:tableData=\"tableDatas\"></Tutorialbutton>\nname: ''GjTable'',\n  components: {\n    Tutorialbutton\n  },\n data () {\n    return {\n      tableData: []\n    }\n  },\n methods: {\ntableDatas (name) {\n      // childValue就是子组件传过来的值\n      this.tableData = name\n    }\n}\n```\n',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(91,'Vue基于vue-quill-editor富文本编辑器','使用 Quill的富文本编辑器分为snow和bubble两种。 snow是有工具栏的 bubble是只有文本域的  安装命令如下： npm install vue-quill-editor 再安装依赖项  npm install quill  使用','### 使用\n\nQuill的富文本编辑器分为snow和bubble两种。  snow是有工具栏的 bubble是只有文本域的\n\n### 安装：\n\n`npm install vue-quill-editor`\n\n安装依赖项\n\n`npm install quill`\n\n### 使用\n\n在main.js中进行引入\n\n\n```csharp\nimport Vue from ''vue''\nimport VueQuillEditor from ''vue-quill-editor''\nimport ''quill/dist/quill.core.css''\nimport ''quill/dist/quill.snow.css''\nimport ''quill/dist/quill.bubble.css''\nVue.use(VueQuillEditor)\n```\n\n下面的css一定还要引用，否则编辑器将会没有css。\n在vue页面中代码如下：\n\n```csharp\n<template>\n <div class=\"edit_container\">\n <quill-editor\n v-model=\"content\"\n ref=\"myQuillEditor\"\n :options=\"editorOption\"\n @blur=\"onEditorBlur($event)\" @focus=\"onEditorFocus($event)\"\n @change=\"onEditorChange($event)\">\n </quill-editor>\n <button v-on:click=\"saveHtml\">保存</button>\n </div>\n</template>\n```\n\n```csharp\n<script>\nexport default {\n name: ''App'',\n data(){\n return {\n content: `<p>hello world</p>`,\n editorOption: {}\n }\n },computed: {\n editor() {\n return this.$refs.myQuillEditor.quill;\n },\n },methods: {\n onEditorReady(editor) { // 准备编辑器\n },\n onEditorBlur(){}, // 失去焦点事件\n onEditorFocus(){}, // 获得焦点事件\n onEditorChange(){}, // 内容改变事件\n saveHtml:function(event){\n alert(this.content);\n }\n }\n}\n</script>\n```\n\n\n\n```csharp\n<style>\n\n#app {\n font-family: ''Avenir'', Helvetica, Arial, sans-serif;\n -webkit-font-smoothing: antialiased;\n -moz-osx-font-smoothing: grayscale;\n text-align: center;\n color: #2c3e50;\n margin-top: 60px;\n}\n</style>\n```\n\n\n\n 其中的v-model就是我们自己的html代码，你可以将这个html直接放到数据库，这样也就没有什么问题了。如果想要禁用编辑器可以通过以下代码：\n\n```csharp\n\nonEditorFocus(val,editor){ // 富文本获得焦点时的事件\n console.log(val); // 富文本获得焦点时的内容\n editor.enable(false); // 在获取焦点的时候禁用\n```\n\n }\n\n### 主题设置\n\n在vue项目中，具体引入Quill的文件中，需要使用哪种主题就写哪个。默认是snow主题的。\n\n```csharp\n data(){\n return {\n content: `<p>hello world</p>`,\n editorOption: {\n theme:''snow''\n }\n }\n }\n\n```\n\n\n### 工具栏设置\n\n\n```csharp\nmodules:{\n toolbar:[\n [''bold'', ''italic'', ''underline'', ''strike''], //加粗，斜体，下划线，删除线\n [''blockquote'', ''code-block''], //引用，代码块\n [{ ''header'': 1 }, { ''header'': 2 }], // 标题，键值对的形式；1、2表示字体大小\n [{ ''list'': ''ordered''}, { ''list'': ''bullet'' }], //列表\n [{ ''script'': ''sub''}, { ''script'': ''super'' }], // 上下标\n [{ ''indent'': ''-1''}, { ''indent'': ''+1'' }], // 缩进\n [{ ''direction'': ''rtl'' }], // 文本方向\n [{ ''size'': [''small'', false, ''large'', ''huge''] }], // 字体大小\n [{ ''header'': [1, 2, 3, 4, 5, 6, false] }], //几级标题\n [{ ''color'': [] }, { ''background'': [] }], // 字体颜色，字体背景颜色\n [{ ''font'': [] }], //字体\n [{ ''align'': [] }], //对齐方式\n [''clean''], //清除字体样式\n [''image'',''video''] //上传图片、上传视频\n ]\n },\n theme:''snow''\n }\n }\n```\n\n### 图片推拽上传\n\n需要安装  `quill-image-drop-module` 模块，那么改一下imageDrop设置为true，你就可以把你电脑上的图片网上一坨就可以了。 \n\n```csharp\nimport { quillEditor } from ''vue-quill-editor''\nimport * as Quill from ''quill'' //引入编辑器\nimport { ImageDrop } from ''quill-image-drop-module'';\nQuill.register(''modules/imageDrop'', ImageDrop);\nexport default {\n name: ''App'',\n data(){\n return{\n editorOption:{\n modules:{\n imageDrop:true, \n },\n theme:''snow''\n }\n }\n }\n```\n\n\n\n### 图片调整大小ImageResize\n\n\n```csharp\n\n return{\n editorOption:{\n modules:{\n imageResize: {}\n },\n theme:''snow''\n }\n }\n```',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(92,'router-link使用','跳转页面传id <router-link :to=\"''/HotArticleText/'' + queryg.id\">  </router-link> 路由index配置  { path: ''/HotArticleText/:id'', component: HotArticleText, meta: { title: ''文章内容'' }} 调用id {{ $route.params.id }}  简单跳转 <router-link to=\"vsplay\">\"><router-l','\n### 跳转页面传id\n\n ```csharp\n<router-link :to=\"''/HotArticleText/'' + queryg.id\">\n  </router-link>\n```\n\n\n### 路由index配置\n\n```csharp\n { path: ''/HotArticleText/:id'', component: HotArticleText, meta: { title: ''文章内容'' }}\n```\n\n调用id `{{ $route.params.id }}`\n\n\n\n### 简单跳转\n\n```csharp\n<router-link to=\"vsplay\">\"><router-link to=\"vsplay\n// 字符串\n this.$router.push(''/vsplay'')\n//页面跳转传id\n this.$router.push({ path: ''/Gjtext'', query: { id: row.id } })\n this.$route.query.id,\n```\n\n\n#### 方法二\n\n```csharp\n<router-link :to=\"{path:''/index'',query: {name: id}}\">\n跳转</router-link>(id是参数)\n参数使用：this.$route.query.id\nthis.$route是一个数组，里面包含路由的所有信息\n```\n\n\n\n注意：router-link中链接如果是‘/''开始就是从根路由开始，如果开始不带‘/''，则从当前路由开始。',0,0,'blog/1.jpg',0,16,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(93,'Vuepress 1.x入门及使用vuepress-theme-reco基础','使用 1.用npm操作会有各种问题，用yarn取代之; 　　2.yarn可以用npm全局安装,而npm是node环境自带，node环境去官网下载安装; 　　3.没有必要全局安装vuepress  操作 1.新建一个空文件夹，这里我取名叫learn-vuepress,注意项目名不要写成驼峰写法（','### 使用\n\n　　1.用npm操作会有各种问题，用yarn取代之;\n　　2.yarn可以用npm全局安装,而npm是node环境自带，node环境去官网下载安装;\n　　3.没有必要全局安装vuepress\n\n### 操作\n\n　　1.新建一个空文件夹，这里我取名叫learn-vuepress,注意项目名不要写成驼峰写法（learnVuepress），因为在依赖项配置里面，这样的项目名称是不合法的。在项目目根目录下新建名为docs的空文件夹，在docs文件夹内，再建一个.vuepress文件夹。结构如下：\n\n　　如果不想这样用命令行来建文件夹，那就手动来，也是一样的。最后就是这样子，三层结构。\n\n　　2.初始化依赖配置表。也就是说初始化一个package.json。这里执行 yarn init -y。-y代表“yes”，也就是无询问初始化配置表。\n\n　　3.为项目的生产环境安装vuepress。控制台运行yarn add -D vuepress@next。即为生产环境安装vuepress，同时node_modules也会下载好，一步到位。\n\n　　4.在package.json里面添加如下键值对：\n\n```csharp\n\"scripts\": {\n    \"docs:dev\": \"vuepress dev docs\",\n    \"docs:build\": \"vuepress build docs\"\n  }\n```\n　　这个键值对就很明显地告诉我们：运行yarn run docs:dev，项目就可以跑起来了。\n\n　　5.在docs根目录下添加md文件，这是进入项目在没有手动选择任何路径时，也就是处于/根路径时的默认入口展示页面。\n\n　　6.在docs的根目录再建模块文件夹，模块文件夹里面为具体的md文件，想取什么名字都行。\n\n　　7.在每个md文件书写相应的内容，都以一级标题开头。\n\n　　8.在.vuepress根目录下新建public目录，这通常用来存个favicon啥的，而config.js则是重头戏了。\n\n　　9.配置config.js\n　　完整代码：\n\n```javascript\nmodule.exports = {\n    title: ''学习vuepress'', //网站标题\n    base: ''/'', //打包后的base路径\n    themeConfig: { //主题配置\n        head: [\n            [''link'', { rel: ''icon'', href: ''/favicon.ico'' }] //引入favicon\n        ],\n        search: false, //不要搜索框\n        sidebarDepth: 0,\n        sidebar: [ //侧边栏\n            {\n              title: ''介绍'',\n              collapsable: false,\n              children: [\n                ''/''\n              ]\n            },\n            {\n                title: ''后端'',\n                collapsable: false,\n                children: [\n                  ''/back-end/node.md''\n                ]\n              },\n            {\n              title: ''前端'',\n              collapsable: false,\n              children: [ \n                ''/font-end/html.md'',\n                ''/font-end/css.md'',\n                ''/font-end/javascript.md''\n              ]\n            }\n          ]\n    }\n}\n\n```\n　　在sidebar的第一项中，我们引入了README.md文件，vuepress项目创建完成！\n\n ## vuepress快速上手\n\n**自定义容器**\n> VuePress 内置了三种不同状态的自定义容器，分别有tip、warning和danger三种类型，在紧挨着类型的旁边，可以设置自定义容器标题，不写的话默认为TIP，它们的书写规则如下所示\n\n::: tip 提醒\n这里是tip容器\n:::\n\n::: warning 警告\n这里是警告容器\n:::\n\n::: danger 危险\n这里是危险容器\n:::\n\n### 代码块高亮和行号\n##### 代码块高亮\n在Markdown中，我们可以如下所示来进行代码块的高亮设置(类型后跟一个花括号)\n\n`` js{4}\nexport default {\n  data () {\n    return {\n      msg: ''Highlighted!''\n    }\n  }\n}\n``\n\n### 这里是Emoji表情 :tada:\n:100: :rocket: :smile: :smile: :laughing: :blush: :frowning: :worried: :sleeping: :stuck_out_tongue: :persevere: :innocent: :cry: :alien: :sob: :yellow_heart: :joy: :blue_heart: :grey_exclamation: :question: :exclamation: :anger: :facepunch: :running: :fist: :couple: :v: :family: :wave: :two_men_holding_hands: :man: :woman: :girl: :boy: :crying_cat_face: :joy_cat: :pouting_cat: :japanese_ogre: :thought_balloon: :speech_balloon: :busts_in_silhouette: :sunny: :umbrella: :cloud: :snowflake: :monkey_face: :boar: :cow: :pig_nose: :honeybee: :ant: :beetle: :snail: :dragon_face: :ox: :mouse2: :pig2: :fallen_leaf: :herb: :mushroom: :cactus: :full_moon: :waning_gibbous_moon: :last_quarter_moon: :waning_crescent_moon: :school_satchel: :dolls: :gift_heart: :bamboo: :balloon: :crystal_ball: :cd: :dvd: :hourglass: :mega: :loudspeaker: :mute: :low_brightness: :credit_card: :electric_plug: :money_with_wings: :battery: :e-mail: :calling: :inbox_tray: :chart_with_upwards_trend: :bar_chart: :bookmark_tabs: :page_with_curl: :green_book: :blue_book: :orange_book: :notebook: :horse_racing: :bicyclist: :mountain_bicyclist: :golf: :black_joker: :flower_playing_cards: :dart: :game_die: :necktie: :tshirt: :shirt: :fishing_pole_and_fish: :coffee: :womans_clothes: :sake: :tea: :rice_ball: :honey_pot: :rice_cracker: :apple: :fish_cake: :lollipop: :sushi: :candy: :house: :tokyo_tower: :airplane: :house_with_garden: :japan: :helicopter: :school: :mount_fuji: :steam_locomotive: :office: :sunrise_over_mountains: :tram: :ambulance: :slot_machine: :gb: :atm: :fire_engine: :atm: :ru: :it: :beginner: :oncoming_police_car: :police_car: :construction: :es: :one: :abc: :two: :arrow_lower_left: :three: :arrow_lower_right: :fast_forward: :secret: :congratulations: :information_source: :ok: :m: :sparkle: :ophiuchus: :clock1230: :tm: :black_small_square: :x: :white_small_square: :six_pointed_star: :clock2: :eight_pointed_black_star: :heart_decoration: :negative_squared_cross_mark: :clock230: :heavy_exclamation_mark: :black_medium_small_square: :small_red_triangle_down:\n\n\n\n### Github风格的表格\n有时候我们想要在.md文件中列一些简单的表格，可以像下面这样配置\n\n| 序号          | 订单编号      | 订单金额|\n| -------------|:-------------:| ------:|\n| 1             | 20180101     | $1600  |\n| 2             | 20180102     |   $12  |\n| 3             | 20180103     |    $1  |\n\n### 自动生成目录\n\n我们有时候希望根据标题自动生成目录，可以使用[[toc]]来输出我们的目录，它默认只列举h2标题和h3标题\n\n[[toc]]\n\n\n### 外部链接\n\n[百度一下](https://www.baidu.com) \n\n### Badge(角标)\n\n#### Vue <Badge text=\"2.5.0+\"/> \n#### Vuex <Badge text=\"beta\" type=\"warn\" vertical=\"top\"/> \n#### Vue-Resource<Badge text=\"废弃\" vertical=\"middle\" type=\"error\"/>\n\n\n##  vuepress-theme-reco\n### 安装和引用\n\n**Install**\n\n`npm install vuepress-theme-reco -dev--save`\n\n**or**\n\n`yarn add vuepress-theme-reco`\n\n**Usage**\n\n// .vuepress/config.js\n\n\n```javascript\nmodule.exports = {\n  theme: ''reco''\n}\n```\n### Front Matter\n\n一个完整的 Front Matter 案例：\n\n```javascript\n---\ntitle: 烤鸭的做法\ndate: 2019-08-08\nsidebar: ''auto''\ncategories:\n - 烹饪\n - 爱好\ntags:\n - 烤\n - 鸭子\nkeys:\n - ''123456''\npublish: false\n---\n```\n\n#### title\n\ndescription: 文章标题，放弃通过一级目录定义标题的方式，改在 Front Matter 中定义。\n#### date\n\ndescription: 文章创建日期，格式 2019-08-08 或 2019-08-08 08:08:08。\n\n####sidebar\n\ndescription: 是否开启侧边栏。\n\n#### categories\n\ndescription: 所属分类。\n\n#### tags\n\ndescription: 所属标签。\n\n#### keys\n\ndescription: 文章加密密码。\n\n#### publish\n\ndescription: 文章是否发布。\n\n#### sticky 1.1.2+\n\ndescription: 文章置顶。\ntype: number\nsort type: 降序，可以按照 1, 2, 3, ... 来降低置顶文章的排列优先级\n\n### 内置搜索\n\n你可以通过设置 themeConfig.search: false 来禁用默认的搜索框，或是通过 themeConfig.searchMaxSuggestions 来调整默认搜索框显示的搜索结果数量：\n\n```javascript\n\nmodule.exports = {\n  themeConfig: {\n    search: false,\n    searchMaxSuggestions: 10\n  }\n}\n```\n\n内置搜索只会为页面的标题、h2 和 h3 构建搜索索引，如果你需要全文搜索，你可以使用 Algolia 搜索。\n\n\n### 最后更新时间\n\n你可以通过 themeConfig.lastUpdated 选项来获取每个文件最后一次 git 提交的 UNIX 时间戳(ms)，同时它将以合适的日期格式显示在每一页的底部：\n\n```javascript\nmodule.exports = {\n  themeConfig: {\n    lastUpdated: ''Last Updated'', // string | boolean\n  }\n}\n```\n\n请注意，themeConfig.lastUpdated 默认是关闭的，如果给定一个字符串，它将会作为前缀显示（默认值是：Last Updated）。\n\n**使用须知**\n\n由于 lastUpdated 是基于 git 的, 所以你只能在一个基于 git 的项目中启用它。\n\n\n### 上 / 下一篇链接\n\n上一篇和下一篇文章的链接将会自动地根据当前页面的侧边栏的顺序来获取。你也可以使用 YAML front matter 来明确地重写或者禁用它：\n\n\n```javascript\n---\nprev: ./some-other-page\nnext: false\n---\n```\n\n### 特定页面的自定义布局\n\n默认情况下，每个 *.md 文件将会被渲染在一个 `<div class=\"page\">`容器中，同时还有侧边栏、自动生成的编辑链接，以及上 / 下一篇文章的链接。如果你想要使用一个完全自定义的组件来代替当前的页面（而只保留导航栏），你可以再次使用 YAML front matter 来指定这个组件。\n\n```javascript\n---\nlayout: SpecialLayout\n---\n```\n这将会为当前的页面渲染 .vuepress/components/SpecialLayout.vue 布局。\n',0,0,'blog/1.jpg',0,15,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(94,'vuepress插件使用','预备知识 会简单配置 Vuepress ，不会的话请先行阅读 使用 Vuepress 搭建个人静态 Blog 开发环境 nodejs 8+ 及 npm or yarn  在背景添加一条彩带 vuepress-plugin-ribbon 只需要简单的配置就可以在你','### 预备知识\n会简单配置 Vuepress ，不会的话请先行阅读 使用 Vuepress 搭建个人静态 Blog\n**开发环境**\n`nodejs 8+ 及 npm or yarn`\n### 在背景添加一条彩带\n`vuepress-plugin-ribbon`\n只需要简单的配置就可以在你的 Vuepress 中添加一条背景彩带~\n首先使用 yarn 安装~\n`yarn add vuepress-plugin-ribbon -D`\n然后在 config.js 中添加以下配置~\n```csharp\nmodule.exports = {\n   plugins: [\n      [\n         \"ribbon\",\n         {\n            size: 90, // 彩带的宽度，默认为 90\n            opacity: 0.8, // 彩带的不透明度，默认为 0.3\n            zIndex: -1 // 彩带的 z-index 属性，默认值为 -1\n         }\n      ]\n   ]\n};\n```\n\n\n### 添加一个动态的标题\n`vuepress-plugin-dynamic-title`\n\n如果你现在使用的是电脑的话，试着切换浏览器到其它标签页~\n唔，欢迎回来，你应该已经看到效果了~这就是 dynamic-title 的效果~\n想要把它装到你的 Vuepress 的话，就 yarn 一下吧~\n\n`yarn add vuepress-plugin-dynamic-title -D`\n配置稍微有点麻烦，需要提供图标以及相应的文字，不提供时默认是不显示图标的，图表放在 .vuepress/public/ 下就好\n\n```csharp\nmodule.exports = {\n   plugins: [\n      [\n         \"dynamic-title\",\n         {\n            showIcon: \"/favicon.ico\",\n            showText: \"(/≧▽≦/)咦！又好了！\",\n            hideIcon: \"/failure.ico\",\n            hideText: \"(●—●)喔哟，崩溃啦！\",\n            recoverTime: 2000\n         }\n      ]\n   ]\n};\n```\n### 增加鼠标点击动效\n`vuepress-plugin-cursor-effect`s\n\n只需要简单的安装就可以在你的 Vuepress 添加鼠标点击后散落彩色粒子的效果~\n\n插件名是 `vuepress-plugin-cursor-effects`，安装方法应该不用说了吧，配置的话，也没有额外的配置项，直接如下便好\n\n```csharp\nmodule.exports = {\n   plugins: [\"cursor-effects\"]\n};\n```\n### 使用悬挂喵作为返回顶部按钮\n`vuepress-plugin-go-top`\n\n相信你看到这个位置应该已经能看到它啦，点一下就可以返回顶部哦~\n都到现在了，应该不需要我说怎么安装了吧？也是没有额外的配置项的，也许以后会添加~\n\n\n\n### 修改你的鼠标为更可爱的样式\n这个就不用插件实现了，自己配置下 style/index.styl 就可以了\n```csharp\nbody {\n  cursor: url(''/cursor.ico''), auto;\n}\n```\n找一个你喜欢的鼠标指针放在 public 下就好，当然图片名也记得修改\n\n',1,0,'blog/1.jpg',0,15,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(95,'使用SoundPlayer播放wav格式音频','1.引用 System.Media名称空间下的类SoundPlayer  SoundPlayer player = new SoundPlayer(); 2.方法调用Play(); public void Play() {   player.SoundLocation = @\".x0pbk-swz4q.wav\";//读取音频文件   player.Load();//同步模式   player.Play();   if (MessageBox.Show(\"播放音','\n\n### 1.引用\n\nSystem.Media名称空间下的类**SoundPlayer**\n\n    SoundPlayer player = new SoundPlayer();\n### 2.方法调用Play();\n\n```csharp\npublic void Play()\n{\n  player.SoundLocation = @\".x0pbk-swz4q.wav\";//读取音频文件\n  player.Load();//同步模式\n  player.Play();\n  if (MessageBox.Show(\"播放音樂中，通过旋转耳机上的旋钮测试音量,若聲音播放正常则选是，反之否\", \"提示\", MessageBoxButtons.YesNo, MessageBoxIcon.Information) ==    DialogResult.No)\n{\n   DisplaylistboxMSG(\"Headset測試結果為異常\");\n}\n else\n{\n   DisplaylistboxMSG(\"Headset測試結果為正常\");\n}\n    player.Stop();//停止播放\n    player.Dispose();\n}\n```\n\n',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(96,'NAudio录音功能实现','在网上找了很多类似录音教程效果都不好，或根本不能录音，代码由网上借鉴修改（完整实现录音播放功能）','### 使用\n\n> 在网上找了很多类似录音教程效果都不好，或根本不能录音，代码由网上借鉴修改（完整实现录音播放功能）\n\n### 1.新建引用类  `RecordController`\n\n```csharp\npublic class RecordController\n{\npublic WaveIn mWavIn;\npublic WaveFileWriter mWavWriter;\n\n/// <summary>\n/// 开始录音\n/// </summary>\n/// <param name=\"filePath\"></param>\npublic void StartRecord(string filePath)\n{\nmWavIn = new WaveIn();\nmWavIn.DataAvailable += MWavIn_DataAvailable;\n// mWavIn.RecordingStopped += MWavIn_RecordingStopped; 有冲突\nmWavWriter = new WaveFileWriter(filePath, mWavIn.WaveFormat);\nmWavIn.StartRecording();\n}\n\n/// <summary>\n/// 停止录音\n/// </summary>\npublic void StopRecord()\n{\nmWavIn?.StopRecording();\nmWavIn?.Dispose();\nmWavIn = null;\nmWavWriter?.Close();\nmWavWriter = null;\n}\n\n//这个方法在调用关闭时会有冲突\n\nprivate void MWavIn_RecordingStopped(object sender, StoppedEventArgs e)\n{\n//mWavIn?.Dispose();\n//mWavIn = null;\n//mWavWriter?.Close();\n//mWavWriter = null;\n}\n\nprivate void MWavIn_DataAvailable(object sender, WaveInEventArgs e)\n{\nmWavWriter.Write(e.Buffer, 0, e.BytesRecorded);\nint secondsRecorded = (int)mWavWriter.Length / mWavWriter.WaveFormat.AverageBytesPerSecond;\n}\n}\n\n```\n \n\n### 2.主界面引用  `RecordController record = new RecordController();`\n\n```csharp\n/// <summary>\n/// 耳机sidetone测试\n/// </summary>\n/// <param name=\"i\"></param>\npublic void Sidetone(int i)\n{\nstring[] row = getlistviewitem(i);\nrecord.StartRecord(\"e:\\\\rec.wav\");\nif (MessageBox.Show(\"正在录音，点击是播放录音\", \"提示\", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)\n{\nrecord.StopRecord();\nErrorFlag = false;\nrow[6] = \"FAIL\";\n}\nelse\n{\nrecord.StopRecord();\nstring path = \"e:\\\\rec.wav\";//.wav音频文件路径\nSystem.Media.SoundPlayer player = new System.Media.SoundPlayer(path);\nplayer.Play();\n\nif (MessageBox.Show(\"是否有录音\", \"提示\", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)\n{\nErrorFlag = false;\nrow[6] = \"FAIL\";\n}\nelse\n{\nErrorFlag = true;\nrow[5] = \"OK\";\nrow[6] = \"PASS\";\n}\n}\nlistupdate(row, i);\n}\n\n```\n> 完成代码后测试是能正常录音',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(97,'读取文件目录下的信息','使用 private void button1_Click(object sender, System.EventArgs e) { //浏览文件夹 this.folderBrowserDialog1.ShowDialog(); if(this.folderBrowserDialog1.SelectedPath.Trim()!=\"\") this.textBox1.Text=this.folderBrowserDialog1.SelectedPath.Trim(); }   private void button2','### 使用\n\n```csharp\nprivate void button1_Click(object sender, System.EventArgs e)\n{\n//浏览文件夹\nthis.folderBrowserDialog1.ShowDialog();\nif(this.folderBrowserDialog1.SelectedPath.Trim()!=\"\")\nthis.textBox1.Text=this.folderBrowserDialog1.SelectedPath.Trim();\n}\n\n\nprivate void button2_Click(object sender, System.EventArgs e)\n{\n//显示指定文件夹下的文件\nif(this.textBox1.Text.Trim()==\"\")\nreturn;\nthis.listBox1.Items.Clear();\nstring[] MyFiles=System.IO.Directory.GetFiles(this.textBox1.Text);\nthis.listBox1.Items.AddRange(MyFiles);\n//foreach(string File in MyFiles)\n// this.listBox1.Items.Add(File);\n\n```\n \n\n\n}',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(98,'计数数据存入Mysql','使用 引用dll MySql.Data.dll  建一个数据连接静态类 public static class mysql { public static string constr = \"database=test;Password=密码;user ID=root;server=ip地址\"; public static MySqlConnection conn = new MySqlConnection(constr); } //定义测试字段','### 使用\n\n**引用dll**\n`MySql.Data.dll`\n\n### 建一个数据连接静态类\n```csharp\npublic static class mysql\n{\npublic static string constr = \"database=test;Password=密码;user ID=root;server=ip地址\";\npublic static MySqlConnection conn = new MySqlConnection(constr);\n}\n```\n### //定义测试字段\n`double countpass;`\n`double countfail;`\n\n### 读取数据库数量方法\n ` getcount()；`\n \n```csharp\nprivate void getcount()\n{\ncountfail = 0;\ncountpass = 0;\nmysql.conn.Open();//打开数据库\nMySqlCommand cons = new MySqlCommand(\"select * from testlog where 时间 = ''\" + System.DateTime.Now.ToString(\"yyyy-MM-dd\") + \"''and 机型 = ''xxxx''and 站别=''\"+ comboBox1 .Text+ \"''\", mysql.conn);//\nMySqlDataReader readers = cons.ExecuteReader();\nif (readers.Read())\n{\ncountpass = Convert.ToInt32(readers[1].ToString());\ncountfail = Convert.ToInt32(readers[2].ToString());\n}\nelse\n{\ncountpass = 0;\ncountfail = 0;\nmysql.conn.Close();\nmysql.conn.Open();\nstring sqlstr = \"insert into testlog values(''xxxx'',''\" + 0 + \"'',''\" + 0 + \"'',''\" + 0 + \"'',''\" + System.DateTime.Now.ToString(\"yyyy-MM-dd\") + \"'',''\" + comboBox1.Text + \"'')\";\nMySqlCommand comm = new MySqlCommand(sqlstr, mysql.conn);\ncomm.ExecuteNonQuery();\ncountpass = 0;\ncountfail = 0;\nmysql.conn.Close();\n}\nmysql.conn.Close();\nlabel14.Text = Convert.ToString(countfail + countpass);\nlabel5.Text = Convert.ToString(countpass);\nlabel6.Text = Convert.ToString(countfail);\n\n\n}\n```\n\n### 存入数据\n\n```csharp\nprivate void count()\n{\nif (ConsTant.test == 2)\n{\n}\nelse\n{\nmysql.conn.Open();//打开数据库\ndouble Num = countpass + countfail;\nstring sqlstr = \"update testlog set 成功数 = ''\" + countpass + \"'', 失败数 = ''\" + countfail + \"'', 总数 =''\" + Num + \"'' where 时间=''\" + System.DateTime.Now.ToString(\"d\") + \"'' and 站别=''\" + comboBox1.Text + \"''and 机型 = ''xxx''\";\nMySqlCommand comm = new MySqlCommand(sqlstr, mysql.conn);\nint iRet = comm.ExecuteNonQuery();\nmysql.conn.Close();\n//label14.Text = Convert.ToString(countfail + countpass);\n//label5.Text = Convert.ToString(countpass);\n//label6.Text = Convert.ToString(countfail);\n}\n}\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(99,'mysql数据库备份还原','使用 1:引用dll  MySql.Data.dll, MySqlbackup.dll  2：建一个数据连接静态类  public static class mysql { public static string constr = \"database=test;Password=密码;user ID=root;server=ip地址\"; public static MySqlConnection conn = new MySqlConnection(constr); } 3：建winform窗体  备份代码','# mysql数据库备份还原\n\n### 引用dll\n\n```\nMySql.Data.dll, MySqlbackup.dll\n```\n\n\n\n### 建静态类\n\n```js\npublic static class mysql\n{\npublic static string constr = \"database=test;Password=密码;user ID=root;server=ip地址\";\npublic static MySqlConnection conn = new MySqlConnection(constr);\n}\n```\n\n\n\n\n\n### 备份代码\n\n```js\nDialogResult result = MessageBox.Show(\"备份路径默认在当前程序下\", \"提示\", MessageBoxButtons.YesNo, MessageBoxIcon.Question);\nif (result == DialogResult.Yes) \n{\n	string time1 = System.DateTime.Now.ToString(\"d\").Replace(\"/\", \"-\");\n	string file = \".//mysql/\" + time1 + \"_test.sql\";\n	using (MySqlCommand cmd = new MySqlCommand()) \n	{\n		using (MySqlBackup mb = new MySqlBackup(cmd)) \n		{\n			cmd.Connection = mysql.conn;\n			mysql.conn.Open();\n			mb.ExportToFile(file);\n			mysql.conn.Close();\n			MessageBox.Show(\"已备份\");\n		}\n	}\n} else \n{\n	return;\n}\n```\n\n### 还原代码\n\n```js\nstring file = textBox1.Text;\nif (file == \"\") \n{\n	MessageBox.Show(\"不能为空\");\n	return;\n}\nDialogResult result = MessageBox.Show(\"确定还原吗？\", \"还原\", MessageBoxButtons.YesNo, MessageBoxIcon.Question);\nif (result == DialogResult.Yes) \n{\n	try \n	{\n		using (MySqlCommand cmd = new MySqlCommand()) \n		{\n			using (MySqlBackup mb = new MySqlBackup(cmd)) \n			{\n				cmd.Connection = mysql.conn;\n				mysql. conn.Open();\n				mb.ImportFromFile(file);\n				mysql. conn.Close();\n				MessageBox.Show(\"已还原\");\n			}\n		}\n	}\n	catch (Exception ex) \n	{\n		MessageBox.Show(ex.Message);\n	}\n} else \n{\n	return;\n}\n```\n',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(100,'winform始终置顶并获取焦点','winform始终置顶并获取焦点','\n```csharp\nprivate void Form1_Deactivate(object sender, EventArgs e)\n {\n timer1.Start();\n }\n private void timer1_Tick(object sender, EventArgs e)\n {\n this.Activate();\n this.Focus();\n timer1.Stop();\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(101,'异步窗体','异步窗体','\n\n### （示例一）\n\n```csharp\n//this表示主窗口的类\n this.Invoke((MethodInvoker)delegate\n {\n   f = new Form2();\n   f.Show();\n });\n```\n\n### （示例二）\n```csharp\n //也可以这样写\n new Thread((ThreadStart)delegate\n {\n   Application.Run(new Form2());\n }).Start();\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(102,'限制程序启动一次','限制程序启动一次','\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WindowsFormsApplication1\n{\n  static class Program\n  {\n    /// <summary>\n    /// 应用程序的主入口点。\n    /// </summary>\n    [STAThread]\n    static void Main()\n    {\n      // Application.EnableVisualStyles();\n      // Application.SetCompatibleTextRenderingDefault(false);\n     // Application.Run(new Form1());\n\n      int count = 0;\n      Process[] myProcess = Process.GetProcesses();\n      foreach (Process _Process in myProcess)\n      {\n        if (_Process.ProcessName == Process.GetCurrentProcess().ProcessName)\n        {\n          count++;\n        }\n      }\n      if (count > 1)\n      {\n        MessageBox.Show(\"请勿重复打开软件\");\n      }\n      else\n      {\n        Application.EnableVisualStyles();\n        //Application.SetCompatibleTextRenderingDefault(true);\n        Application.Run(new Form1());\n      }\n    }\n  }\n}\n```',1,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(103,'winform调用电脑音量加减','使用 [DllImport(\"user32.dll\", CharSet = CharSet.Auto, SetLastError = true)]     static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, uint wParam, uint lParam);     const uint WM_APPCOMMAND = 0x319;     const uint APPCOMMAND_VOLUME_UP = 0x0a;     const uint APPCOMMAND_VOLUME_DOWN = 0x09;','### 使用\n\n```csharp\n[DllImport(\"user32.dll\", CharSet = CharSet.Auto, SetLastError = true)]\n    static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, uint wParam, uint lParam);\n    const uint WM_APPCOMMAND = 0x319;\n    const uint APPCOMMAND_VOLUME_UP = 0x0a;\n    const uint APPCOMMAND_VOLUME_DOWN = 0x09;\n    const uint APPCOMMAND_VOLUME_MUTE = 0x08;\n```\n\n  ###  静音\n   `SendMessage(this.Handle, WM_APPCOMMAND, 0x200eb0, APPCOMMAND_VOLUME_MUTE * 0x10000);`\n### 加音量\n  `SendMessage(this.Handle, WM_APPCOMMAND, 0x30292, APPCOMMAND_VOLUME_UP * 0x10000);`\n### 减音量\n     ` SendMessage(this.Handle, WM_APPCOMMAND, 0x30292, APPCOMMAND_VOLUME_DOWN * 0x10000);`',1,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(104,'异步方法调用','使用 ** 线程终止** CancellationTokenSource cancellationTokenSource;   private void ButtonTest(int i)     {       cancellationTokenSource = new CancellationTokenSource();       var t1 = new Task(() => GkeyTest(), cancellationTokenSource.Token);       t1.Start();       Task.WaitAll(t1);  ','### 使用\n\n** 线程终止**\n`CancellationTokenSource cancellationTokenSource;`\n\n\n```csharp\n private void ButtonTest(int i)\n    {\n      cancellationTokenSource = new CancellationTokenSource();\n      var t1 = new Task(() => GkeyTest(), cancellationTokenSource.Token);\n      t1.Start();\n      Task.WaitAll(t1);  \n      var t2 = new Task(() => TestVolumeUpButton(), cancellationTokenSource.Token);\n      t2.Start();\n      Task.WaitAll(t2);   \n      var t3 = new Task(() => TestVolumeDownButton(), cancellationTokenSource.Token);\n      t3.Start();\n      Task.WaitAll(t3);\n      cancellationTokenSource.Cancel();\n      return;\n    }\n```',0,0,'blog/1.jpg',0,23,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(105,'禁止系统休眠','使用 public static class SleepCtr   {     //定义API函数     [DllImport(\"kernel32.dll\")]     static extern uint SetThreadExecutionState(uint esFlags);     const uint ES_SYSTEM_REQUIRED = 0x00000001;     const uint ES_DISPLAY_REQUIRED = 0x00000002;     const uint ES_CONTINUOUS = 0x80000000;','### 使用\n\n```csharp\npublic static class SleepCtr\n  {\n    //定义API函数\n    [DllImport(\"kernel32.dll\")]\n    static extern uint SetThreadExecutionState(uint esFlags);\n    const uint ES_SYSTEM_REQUIRED = 0x00000001;\n    const uint ES_DISPLAY_REQUIRED = 0x00000002;\n    const uint ES_CONTINUOUS = 0x80000000;\n\n    public static void SleepCtrs(bool sleepOrNot)\n    {\n      if (sleepOrNot)\n      {\n        //阻止休眠时调用\n        SetThreadExecutionState(ES_CONTINUOUS | ES_DISPLAY_REQUIRED | ES_SYSTEM_REQUIRED);\n      }\n      else\n      {\n        //恢复休眠时调用\n        SetThreadExecutionState(ES_CONTINUOUS);\n      }\n    }\n  }\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(106,'窗体基本控件','  WinForm窗体             Button 按钮             Textbox 文本框             ComboBox 下拉列表框             Checkbox 复选框             RadioButton 单选框             GroupBox 分组控件             Label 标签             ListBox 列表框             PictureBox 图片框','\n\n### 公共控件:\n                WinForm窗体\n                Button 按钮\n                Textbox 文本框\n                ComboBox 下拉列表框\n                Checkbox 复选框\n                RadioButton 单选框\n                GroupBox 分组控件\n                Label 标签\n                ListBox 列表框\n                PictureBox 图片框\n                DateTimePicker 日期时间控件\n                ProgressBar 进度条\n                NumericUpDown 数字输入框\n                ToolTip 气泡提示\n                NotifyIcon 托盘控件\n                TreeView 树控件\n                ListView 列表控件\n###   容器:\n                Panel 面板\n                SplitContainer 分隔容器\n                TabControl 选项卡控件\n\n###         菜单和工具栏:\n                ContextMenuStrip 右键菜单\n                MenuStrip 菜单控件\n                StatusStrip 状态栏控件\n                ToolStrip 工具栏控件\n                ImageList 图片集合\n                Timer 时间控件\n\n###  对话框\n\n                FolderBrowserDialog 文件夹选择\n                OpenFileDialog 打开文件\n                SaveFileDialog    保存文件',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(107,'获取当前系统时间','public class LibWrapDateTime  {  [DllImportAttribute( \"Kernel32.dll\" )]  public static extern void GetLocalTime(SystemTime st );  [DllImportAttribute( \"Kernel32.dll\" )]  public static extern void SetLocalTime(SystemTime st );  }','### 使用\n\n```csharp\npublic class LibWrapDateTime\n {\n [DllImportAttribute( \"Kernel32.dll\" )]\n public static extern void GetLocalTime(SystemTime st );\n [DllImportAttribute( \"Kernel32.dll\" )]\n public static extern void SetLocalTime(SystemTime st );\n }\n```\n\n\n```csharp\n[StructLayoutAttribute( LayoutKind.Sequential)]\npublic class SystemTime \n {\n public ushort wYear; \n public ushort wMonth; \n public ushort wDayOfWeek; \n public ushort wDay; \n public ushort wHour; \n public ushort wMinute; \n public ushort wSecond; \n public ushort wMilliseconds; \n }\n```\n\n\n\n```csharp\n private void button1_Click(object sender, System.EventArgs e)\n {//获取当前系统日期时间 \n DateTimePicker OlddateTimePicker = new DateTimePicker();  \n this.textBox1.Text=OlddateTimePicker.Value.ToLongDateString().ToString();\n     this.textBox1.Text+=OlddateTimePicker.Value.ToLongTimeString().ToString(); \n }\n\n private void button2_Click(object sender, System.EventArgs e)\n {//设置系统当前日期时间\n if(MessageBox.Show(\"您真的确定更改系统当前日期时间吗？\",\"信息提示\",MessageBoxButtons.OK)==DialogResult.OK)\n {\n DateTime Year=this.dateTimePicker1.Value;\n SystemTime MySystemTime = new SystemTime();\n LibWrapDateTime.GetLocalTime(MySystemTime);\n MySystemTime.wYear=(ushort)this.dateTimePicker1.Value.Year;\n MySystemTime.wMonth=(ushort)this.dateTimePicker1.Value.Month;\n MySystemTime.wDay=(ushort)this.dateTimePicker1.Value.Day;\n MySystemTime.wHour=(ushort)this.dateTimePicker2.Value.Hour;\n MySystemTime.wMinute=(ushort)this.dateTimePicker2.Value.Minute;\n MySystemTime.wSecond=(ushort)this.dateTimePicker2.Value.Second;\n LibWrapDateTime.SetLocalTime(MySystemTime);\n button1_Click(null,null);\n }\n }\n```\n\n',0,0,'blog/1.jpg',0,23,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(108,' 本地音量加减静音','使用 [DllImport(\"user32.dll\", CharSet = CharSet.Auto, SetLastError = true)]     static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, uint wParam, uint lParam);     const uint WM_APPCOMMAND = 0x319;       const uint APPCOMMAND_VOLUME_UP = 0x0a;       const uint APPCOMMAND_VOLUME_DOWN = 0x09;       const uint APPCOMMAND_VOLUME_MUTE = 0x08;   加音量  SendMessage(this.Handle, WM_APPCOMMAND, 0x30292, APPCOMMAND_VOLUME_UP * 0x10000);  减音量','### 使用\n\n```csharp\n[DllImport(\"user32.dll\", CharSet = CharSet.Auto, SetLastError = true)]\n    static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, uint wParam, uint lParam);\n    const uint WM_APPCOMMAND = 0x319;  \n    const uint APPCOMMAND_VOLUME_UP = 0x0a;  \n    const uint APPCOMMAND_VOLUME_DOWN = 0x09;  \n    const uint APPCOMMAND_VOLUME_MUTE = 0x08;  \n```\n\n   ### 加音量\n   `   SendMessage(this.Handle, WM_APPCOMMAND, 0x30292, APPCOMMAND_VOLUME_UP * 0x10000);`\n   ### 减音量\n    `  SendMessage(this.Handle, WM_APPCOMMAND, 0x30292, APPCOMMAND_VOLUME_DOWN * 0x10000);`\n   ###  静音\n     ` SendMessage(this.Handle, WM_APPCOMMAND, 0x200eb0, APPCOMMAND_VOLUME_MUTE * 0x10000);`',1,0,'blog/1.jpg',0,23,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(109,'写入测试数据','使用  private void writelog(bool ErrorFlag)     {       bool bExist = false;       string time1 = System.DateTime.Now.ToString(\"d\").Replace(\"/\", \"-\");       string dt = System.DateTime.Now.ToString(\"T\");       // dt = dt.Substring(dt.Length - 8, 8);       if (File.Exists(\"TestData/\" + time1 + \"-Log.csv\"))       {         bExist = true;       }       StreamWriter sw = new StreamWriter(\"TestData/\" + time1 + \"-Log.csv\", true);       if (!bExist)       {         sw.WriteLine(\"time\" + \",\" + \"BDA\" + \" , \"+ \" , \"+ \" , \" + \" , \" + ErrorFlag);       }       sw.WriteLine(','### 使用\n\n```csharp\n private void writelog(bool ErrorFlag)\n    {\n      bool bExist = false;\n      string time1 = System.DateTime.Now.ToString(\"d\").Replace(\"/\", \"-\");\n      string dt = System.DateTime.Now.ToString(\"T\");\n      // dt = dt.Substring(dt.Length - 8, 8);\n      if (File.Exists(\"TestData/\" + time1 + \"-Log.csv\"))\n      {\n        bExist = true;\n      }\n      StreamWriter sw = new StreamWriter(\"TestData/\" + time1 + \"-Log.csv\", true);\n      if (!bExist)\n      {\n        sw.WriteLine(\"time\" + \",\" + \"BDA\" + \" , \"+ \" , \"+ \" , \" + \" , \" + ErrorFlag);\n      }\n      sw.WriteLine(dt+\",\"+textBox1.Text);\n      for (int j = 0; j < listView1.Items.Count; j++)\n      {\n        sw.WriteLine(testrecord(j));\n      }\n\n sw.WriteLine(\"--------------\" + \",\" + \"--------------\" + \",\" + \"--------------\" + \",\" + \"--------------\" + \",\" + \"--------------\" + \",\" + \"--------------\" + \",\");\n      sw.Close();\n    }\n```',1,0,'blog/1.jpg',0,23,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(110,' 字幕滚动','1.添加lable和timer控件 2.双击窗体添加Form1_Load事件，在事件函数中添加如下代码：  ```csharp   this.timer1.Interval = 10;   this.timer1.Enabled = true;   this.WindowState = FormWindowState.Maximized;  ### 3.双击timer控','\n\n### 1.添加lable和timer控件\n### 2.双击窗体添加Form1_Load事件，在事件函数中添加如下代码：\n\n     ```csharp\n      this.timer1.Interval = 10;\n      this.timer1.Enabled = true;\n      this.WindowState = FormWindowState.Maximized;\n```\n\n### 3.双击timer控件，在事件函数中添加如下代码：\n\n     ```csharp\n     label1.Left = label1.Left - 3;\n      if (label1.Right < 0)\n      {\n        label1.Left = this.Width;\n      }\n```\n\n    \n\n',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(111,'窗体退出','在c#中退出WinForm程序包括有很多方法，如:this.Close(); Application.Exit();Application.ExitThread(); System.Environment.Exit(0); 等他们各自的方法不一样，下面详细介绍一下。 在c#中退出WinForm程序包括有很多方法，如:this.Clos','### 使用\n\n> 在c#中退出WinForm程序包括有很多方法，如:this.Close(); Application.Exit();Application.ExitThread(); System.Environment.Exit(0); 等他们各自的方法不一样，下面详细介绍一下。 在c#中退出WinForm程序包括有很多方法，如:this.Close(); Application.Exit();Application.ExitThread(); System.Environment.Exit(0); 等他们各自的方法不一样，下面详细介绍一下。\n\n-  1.this.Close();  只是关闭当前窗口，若不是主窗体的话，是无法退出程序的，另外若有托管线程（非主线程），也无法干净地退出\n\n-  2.Application.Exit(); 强制所有消息中止，退出所有的窗体，但是若有托管线程（非主线程），也无法干净地退出；\n\n-  3.Application.ExitThread(); 强制中止调用线程上的所有消息，同样面临其它线程无法正确退出的问题\n\n-  4.System.Environment.Exit(0);  这是最彻底的退出方式，不管什么线程都被强制退出，把程序结束的很干净。',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(112,'实现系统休眠或者不休眠','使用 class SystemSleepManagement   {     //定义API函数     [DllImport(\"kernel32.dll\")]     static extern uint SetThreadExecutionState(ExecutionFlag flags);     [Flags]     enum ExecutionFlag : uint     {       System = 0x00000001,       Display = 0x00000002,       Continus = 0x80000000,     }','### 使用\n\n```csharp\nclass SystemSleepManagement\n  {\n    //定义API函数\n    [DllImport(\"kernel32.dll\")]\n    static extern uint SetThreadExecutionState(ExecutionFlag flags);\n    [Flags]\n    enum ExecutionFlag : uint\n    {\n      System = 0x00000001,\n      Display = 0x00000002,\n      Continus = 0x80000000,\n    }\n\n    /// <summary>\n    ///阻止系统休眠，直到线程结束恢复休眠策略\n    /// </summary>\n    /// <param name=\"includeDisplay\">是否阻止关闭显示器</param>\n    public static void PreventSleep(bool includeDisplay = false)\n    {\n      if (includeDisplay)\n        SetThreadExecutionState(ExecutionFlag.System | ExecutionFlag.Display | ExecutionFlag.Continus);\n      else\n        SetThreadExecutionState(ExecutionFlag.System | ExecutionFlag.Continus);\n    }\n\n    /// <summary>\n    ///恢复系统休眠策略\n    /// </summary>\n    public static void ResotreSleep()\n    {\n      SetThreadExecutionState(ExecutionFlag.Continus);\n    }\n\n    /// <summary>\n    ///重置系统休眠计时器\n    /// </summary>\n    /// <param name=\"includeDisplay\">是否阻止关闭显示器</param>\n    public static void ResetSleepTimer(bool includeDisplay = false)\n    {\n      if (includeDisplay)\n        SetThreadExecutionState(ExecutionFlag.System | ExecutionFlag.Display);\n      else\n        SetThreadExecutionState(ExecutionFlag.System);\n    }\n  }\n```\n\n因此，要实现下载时阻止程序休眠，则有两种实现方式：\n下载期间起计时器定期执行`ResetSleepTimer`函数\n下载开始时执行`PreventSleep`函数，下载结束后执行ResotreSleep函数。\n另外，和阻止系统休眠类似，有的程序还需要有阻止屏保功能。因为我的程序目前还用不到，这里就不多讲了。\n\n\n### 应用场景：\n\n\n1、挂机下载的时候，下载任务会因为系统休眠被终止掉。\n\n最开始我的解决方法是关闭休眠，后来发现这种策略并不是很好：下载完成后，如果仍然继续保持开机状态浪费电。\n\n\n2、最近衣服自己洗在开发过程中遇到一个需求就是在不修改电源管理选项的情况下，阻止系统进入休眠状态。\n\n和我们的需求比较类似的是视频播放器，在播放视频的时候，即使用户没有操作电脑，也会阻止休眠。退出播放器后，系统又正常了',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(113,'窗口跳转后关闭上一个窗口的方法','使用 FrmMain main = new FrmMain(); main.Owner = this; this.Hide(); main.ShowDialog(); Application.ExitThread(); Application.ExitThread(); Application.ExitThrea','### 使用\n\n```csharp\nFrmMain main = new FrmMain();\nmain.Owner = this;\nthis.Hide();\nmain.ShowDialog();\nApplication.ExitThread();\nApplication.ExitThread();\n```\n\n`Application.ExitThread()`;是退出当前线程。\n首先默认情况下我们的程序是单线程的，\n`this.hide()`;后把当前窗体隐藏起来了，\n\n然后`main.showdialog()`;模态弹出新窗口。\n这个时候线程不会继续执行（被阻塞了），\n直到我们关闭了新弹出来的模态窗口后，\n程序才会继续执行`Application.ExitThread()`;\n此时线程关闭，隐藏的窗口也关闭了。',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(114,'清除指定文件目下的信息','使用  private void Delate()     {       textBox3.Text = \"清除文件...\";       try {         DirectoryInfo dir = new DirectoryInfo(DPath);         FileSystemInfo[] FILEINFO = dir.GetFileSystemInfos();         foreach(FileSystemInfo i in FILEINFO)         {           if(i is DirectoryInfo)           {             DirectoryInfo SUBDIR = new DirectoryInfo(i.FullName);             SUBDIR.Delete(true);           }','### 使用\n\n```csharp\n private void Delate()\n    {\n      textBox3.Text = \"清除文件...\";\n      try {\n        DirectoryInfo dir = new DirectoryInfo(DPath);\n        FileSystemInfo[] FILEINFO = dir.GetFileSystemInfos();\n        foreach(FileSystemInfo i in FILEINFO)\n        {\n          if(i is DirectoryInfo)\n          {\n            DirectoryInfo SUBDIR = new DirectoryInfo(i.FullName);\n            SUBDIR.Delete(true);\n          }\n          else\n          {\n            File.Delete(i.FullName);\n          }\n        }\n      } catch (Exception ex)\n      {\n        textBox3.Text=ex.ToString();\n      }\n\n      Thread.Sleep(IntervalDelay);\n    }\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(115,'解决datagridview卡顿','1.方法定义   public static void DoubleBuffered(this DataGridView dgv, bool setting)   {    Type dgvType = dgv.GetType();    PropertyInfo pi = dgvType.GetProperty(\"DoubleBuffered\", ​    BindingFlags.Instance | BindingFlags.NonPublic);    pi.SetValue(dgv, setting, null);   } 2.调用 mysql.conn.Open(); ​    MySqlDataAdapter sda = new MySqlDataAdapter(\"select * from user\", mysql.conn);// ​    DataTable table = new DataT','\n\n### 1.方法定义\n\n```csharp\n  public static void DoubleBuffered(this DataGridView dgv, bool setting)\n  {\n   Type dgvType = dgv.GetType();\n   PropertyInfo pi = dgvType.GetProperty(\"DoubleBuffered\",\n​    BindingFlags.Instance | BindingFlags.NonPublic);\n   pi.SetValue(dgv, setting, null);\n  }\n```\n\n### 2.调用\n\n```csharp\nmysql.conn.Open();\n​    MySqlDataAdapter sda = new MySqlDataAdapter(\"select * from user\", mysql.conn);//\n​    DataTable table = new DataTable();\n​    sda.Fill(table);//填充数据库\n​    this.dataGridView1.DoubleBuffered(true);//调用\n​    this.dataGridView1.DataSource = table;\n​    mysql.conn.Close();\n\n```\n',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(116,'外部程序调用','打开文件     /// </summary>     /// <param name=\"hwnd\">指定父窗口句柄</param>     /// <param name=\"lpszOp\">指定要进行的操作</param>     /// <param name=\"lpszFile\">','\n\n### 打开文件\n```csharp\n    /// </summary>\n    /// <param name=\"hwnd\">指定父窗口句柄</param>\n    /// <param name=\"lpszOp\">指定要进行的操作</param>\n    /// <param name=\"lpszFile\">指定要打开的文件名</param>\n    /// <param name=\"lpszParams\">指定命令行参数</param>\n    /// <param name=\"lpszDir\">用于指定默认目录</param>\n    /// <param name=\"FsShowCmd\">参数是一个可执行程序</param>\n    /// <returns></returns>\n\n    [DllImport(\"shell32.dll\")]\n    public static extern int ShellExecute(IntPtr hwnd, StringBuilder lpszOp, StringBuilder lpszFile, StringBuilder lpszParams, StringBuilder lpszDir, int FsShowCmd);\n```\n\n\n### 调用方法：\n ```csharp\nSnTest.ShellExecute(IntPtr.Zero, new StringBuilder(\"Open\"), new StringBuilder(name), new StringBuilder(\"\"), new StringBuilder(name), 1);\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(117,'使用DirectX进行播放','使用 首先要安装DirectX SDK。安装好之后，在C:WindowsMicrosoft.NETDirectX for Managed Code1.0.2902.0目录下有在.net下可以使用的dll文件。  首先引用添加引用Microsoft.DirectX.AudioV','### 使用\n\n首先要安装**DirectX SDK**。安装好之后，在`C:WindowsMicrosoft.NETDirectX for Managed Code1.0.2902.0`目录下有在.net下可以使用的dll文件。\n\n\n首先引用添加引用`Microsoft.DirectX.AudioVideoPlayback`\n\n```csharp\nusing Microsoft.DirectX.AudioVideoPlayback; \n然后实例化Audo类的对象，就可以播放包括mp3格式的音乐文件了。\n        Audio audio = new Audio(\"hello.mp3\");\n        audio.play();\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(118,'使用SoundPlayer播放声音','使用 System.Media名称空间下的类SoundPlayer 可以让我们很方便的播放wav波形声音文件。SoundPlayer类其实就是对winmm.dll文件中API函数的封装。 SoundPlayer类的使用很简单。如下：','### 使用\n\nSystem.Media名称空间下的类`SoundPlayer` 可以让我们很方便的播放wav波形声音文件。`SoundPlayer`类其实就是对winmm.dll文件中API函数的封装。\n`SoundPlayer`类的使用很简单。如下：\n\n```csharp\nSoundPlayer player = new SoundPlayer();\nplayer.SoundLocation = \"音乐文件名\";\nplayer.Load();\nplayer.Play();\n```\n\n\n> 其中Play方法是异步方法，会在另一个线程中播放。如果我们有时候需要等声音播放完毕之后再进行下一步操作。即声音播放需要阻塞当前线程。就可以使用PlaySync()\n\n### 方法\n- SoundPlayer类的缺点：只能播放wav文件；在winxp下播放文件比较大或位率比较高的情况，PlaySync同步播放会有播放不完全的问题。\n\n- 这个问题的产生是由于winmm.dll的版本问题引起的。在xp下winmm.dll的版本是5。在win7下是6。win7下就没有问题。如果要解决在\n\n- xp下播放不完全的问题。可以使用xp下的录音机打开声音文件，把声音文件另存为7kbit/s的位率格式，但这样声音效果就很差了。',0,0,'blog/1.jpg',0,23,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(119,'数据导出','','### 使用\n\n``` cs\n/// <summary>\n/// 数据导出\n/// </summary>\n/// <param name=\"dataGridView\"></param>\n/// <returns></returns>\nprivate bool dataGridViewToCSV(DataGridView dataGridView)\n{\nif (dataGridView.Rows.Count == 0)\n{\nMessageBox.Show(\"没有数据可导出!\", \"提示\", MessageBoxButtons.OK, MessageBoxIcon.Information);\nreturn false;\n}\nSaveFileDialog saveFileDialog = new SaveFileDialog();\nsaveFileDialog.Filter = \"CSV files (*.csv)|*.csv\";\nsaveFileDialog.FilterIndex = 0;\nsaveFileDialog.RestoreDirectory = true;\nsaveFileDialog.CreatePrompt = true;\nsaveFileDialog.FileName = null;\nsaveFileDialog.Title = \"保存\";\n\nDateTime now = DateTime.Now;\nsaveFileDialog.FileName = now.Year.ToString().PadLeft(2)\n+ now.Month.ToString().PadLeft(2, ''0'')\n+ now.Day.ToString().PadLeft(2, ''0'') + \"-\"\n+ now.Hour.ToString().PadLeft(2, ''0'')\n+ now.Minute.ToString().PadLeft(2, ''0'')\n+ now.Second.ToString().PadLeft(2, ''0'');\n\nif (saveFileDialog.ShowDialog() == DialogResult.OK)\n{\nStream stream = saveFileDialog.OpenFile();\nStreamWriter sw = new StreamWriter(stream, System.Text.Encoding.GetEncoding(-0));\nstring strLine = \"\";\ntry\n{\n//表头\nfor (int i = 0; i < dataGridView.ColumnCount; i++)\n{\nif (i > 0)\nstrLine += \",\";\nstrLine += dataGridView.Columns[i].HeaderText;\n}\nstrLine.Remove(strLine.Length - 1);\nsw.WriteLine(strLine);\nstrLine = \"\";\n//表的内容\nfor (int j = 0; j < dataGridView.Rows.Count; j++)\n{\nstrLine = \"\";\nint colCount = dataGridView.Columns.Count;\nfor (int k = 0; k < colCount; k++)\n{\nif (k > 0 && k < colCount)\nstrLine += \",\";\nif (dataGridView.Rows[j].Cells[k].Value == null)\nstrLine += \"\";\nelse\n{\nstring cell = dataGridView.Rows[j].Cells[k].Value.ToString().Trim();\n//防止里面含有特殊符号\ncell = cell.Replace(\"\\\"\", \"\\\"\\\"\");\ncell = \"\\\"\" + cell + \"\\\"\";\nstrLine += cell;\n}\n}\nsw.WriteLine(strLine);\n}\nsw.Close();\nstream.Close();\nMessageBox.Show(\"数据被导出到：\" + saveFileDialog.FileName.ToString(), \"导出完毕\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex)\n{\nMessageBox.Show(ex.Message, \"导出错误\", MessageBoxButtons.OK, MessageBoxIcon.Information);\nreturn false;\n}\n}\nreturn true;\n}\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(120,'C#+Winform开发窗体程序(转)','','\n\n### 一、概述\n- 1、Windows Form（简称WinForm）\n是微软.NET平台下用于开发\"图形界面\"应用程序的组件。\n- 2、C/S架构\n客户机（`Client`）/服务器(`Server`)，是软件系统体系结构。\n\n> 通过它可以充分利用两端硬件环境的优势，将任务合理分配到Client端和Server端来实现，降低了系统的通讯开销。\n\n### 二、在VS中新建窗体程序\n#### 1、认识窗体程序（第一个窗体程序）\n1）窗体设计器：设置窗体界面(经常操作)\n每个窗体都有对应的后台代码\n`shift + F7 / F7`：查看源码\n注：在窗体后台代码中，存在方法：`InitializeComponent()`\n> 它的作用是：对当前窗体的控件进行初始化工作，此方法不能丢，否则窗体不能正常显示控件，如果要重载构造方法 ，在重载构造方法中也必须调用此方法。\n\nF12查看方法的定义\n#### 工具箱：包含了程序所需的控件\n操作：\n2.1）选择控件，向窗体设计器拖动\n2.2）双击控件\n注：在`WinForm`中，所有的控件，包括窗体都是对象\n\n#### 解决方案资源管理器\n3.1）项目\n3.2）`Properties`：对当前项目的属性进行设置\n3.3）引用\n3.4）`Resources`：资源信息\n3.5）窗体程序 --> `Xxxx.cs`\n3.6）主程序（窗体程序的入口）：`Programe.cs`，设置启动窗体：\n```csharp\nstatic void Main()\n{\n​ Application.EnableVisualStyles();\n​ Application.SetCompatibleTextRenderingDefault(false);\n​ Application.Run(new 窗体名称());\n}\n```\n#### 属性面板\n对控件进行相关的设置(经常操作)\n选择不同的控件，属性面板的属性会不一样\n左边是属性名，右边是属性值（需要用户设置）\n\n事件：单击，双击，鼠标移动，离开，经过，键盘相关事件\n表示触发程序执行的某件事发生的信号，如单击\n控件包含：属性，方法，事件\n\n###  开发窗体程序的步骤\n- 1）新建窗体程序项目\n- 2）打开窗体设备器，添加控件(工具箱)\n- 3）选择控件，设置属性\n注：在实际开发中，一般都会给控件取一个有意义的名字，便于调用\n- 4）选择控件，添加相应事件(单击，双击，鼠标移动，离开，经过，键盘相关事件)\n- 5）在事件方法中，编写代码实现业务功能\n基于面向对象的思想来编写程序\n控件是对象\n对象名.属性 = 值 ;\n对象名.方法() ;\n控件名.属性 = 值 ;\n控件名.方法() ;\n- 6）根据需求重复以上工作\n- 7）运行、测试\n\n#### 3、在后面章节，我们主要学习控件(对象)的三方面的内容\n\n1)属性\n2)方法\n3)事件\n\n### 三、窗体（Form）\n####  常用属性\n1）窗体名称：`Name`\n注：在实例开发中，不要使用默认的名字，建议定义一个有意义的名称，方便调用\n命名规范：`frmXxxx`\n2）窗体标题 : `Text`\n3）背景颜色 : `BackColor`\n4）设置窗体背景图片：`BackgroundImage`\n`BackgroundImageLayout`：设置背景图片布局\n5）修改窗体的大小：`Size（Width、Height）`\n6）设置按Enter键时所单击窗体上的按钮：`AcceptButton`\n7）窗体的图标：`Icon*.ico`\n8）窗体边框样式：`FormBorderStyle`\n`Fixed3D`：固定的三维边框\n`FixedDialog`：固定的对话框样式的粗边框\n`FixedSingle`：固定的单行边框\n`FixedToolWindow`：不可调整大小的工具窗口边框\n`None`：无边框\n`Sizable`：可调整大小的边框\n`SizableToolWindow`：可调整大小的工具窗口边框\n\n9）控件窗体的显示位置：`StartPosition`\n`CenterParent`：窗体在其父窗体中居中\n`CenterScreen`：窗体在屏幕中居中\n`Manual`：由Location属性确定\n`WindowsDefaultBounds`：Windows默认位置，其边界由Windows默认决定。\n`WindowsDefaultLocation`：Windows默认位置，其尺寸在窗体大小中指定。\n10）控件窗体的最大化和最小化\n`MaximizeBox MinimizeBox`\n\n11）设置窗体启动时，默认是最大化还是最小化：WindowState\n`Normal`：还原窗口\n`Minimized`：最小化窗口\n`Maximized`：最大化窗口\n\n12）控件窗体总在最前：`TopMost`\n13）设置窗体透明度：`Opacity`\n\n####  窗体的方法（必须要实例化对象访问）\n1）显示窗体\n模式窗体：`ShowDialog()`：只有关闭当前窗口才能访问另一个窗口\n非模式窗体：`Show()`\n2）`Hide()`：隐藏窗体，不破坏窗体，也不释放资源\n3）`Close()`：关闭窗体，释放资源\n\n#### 事件\n1）`Activated`：窗体激活\n2）`Load`：窗体加载\n3）`FormClosing`：窗体关闭\n\n### 第二章（上）：控件与窗体\n####  文本编辑控件\n1、标签：`Label`\n1）作用：用于显示文字（标签、标题）\n2）常用属性：\n`Text`：设置显示的文本内容\n`ForeColor`：设置前景颜色\n`AutoSize`：是否自动调整大小\n`Font`：设置字体\n\n#### 按钮：Button\n1）作用：提供用户通过单击来执行各种各样的操作\n2）常用属性：\n`BackgroundImage`：背景图像\n`BackgroundImageLayout`：设置背景图像的布局样式\n`FlatStyle`：设置平面样式外观\n`Text`：设置显示的文本内容\n`TextAlign`：对齐方式\n`Enabled` : 设置按钮是否可用\n\n#### 常用事件：\nclick\n#####  文本框：TextBox\n1）作用\n提供用户输入数据，或显示数据\n默认单行\n最多可以接收32767个字符\n不包括制表符、图片\n可以实现密码输入效果\n2）常用属性\nText：设置/获取文本框中的内容\nMaxLength：输入最大字符数\nReadOnly：是否只读（不可编辑）\nPasswordChar：密码字符\nMultiLine：是否为多行文本框\nScrollBars：为多行文本框时，设置滚动条\n\n#### 常用方法\nFocus()：获取焦点\nClear()：清除文本框内容\n\n#### 常用事件\nTextChanged：Text属性更改时发生\nleave：当焦点离开控件时触发\n\n#### 富文本框：RichTextBox\n##### 作用\n功能同上，比TextBox功能更强大\n默认是多行\n最多可以接收2147483647个字符\n包括制表符、图片\n无法实现密码输入效果\n2）常用属性\n3）常用方法\n4）常用事件\n```csharp\nBitmap bmp = new Bitmap(@\"D:\\test\\20140226082603.jpg\");\nClipboard.SetDataObject(bmp);\nDataFormats.Format dataFormat = DataFormats.GetFormat(DataFormats.Bitmap);//格式\nif (richTextBox1.CanPaste(dataFormat))\n​ richTextBox1.Paste(dataFormat);\n```\n\n### 图片框：PictureBox\n作用\n显示图片\n支持bmp、jpeg、gif、png等格式\n常用属性\nName : 控件名称，前缀pic\nImage : 控件显示的图片\nImage.FromFile(\"c:\\1.jpg\") ;\nSizeMode：控制PictureBox将如何处理图片位置和控件大小\n3）常用方法\n）常用事件\n\n### 定时器:Timer\n作用\n控制每隔一段时间做某些操作\n常用属性\nName : 控件名称\nEnabled : 启用定时器\nInterval : 设置时间间隔，单位是毫秒\n1秒 = 1000毫秒\n常用方法\n常用事件\nTick : 每隔一段时间，所做的事情在此事件中实现\n操作步骤：\n第一：拖Timer控件到窗体中\n第二：设置时间间隔--Interval\n第三：添加Tick事件，实现每间隔一段时间所做事情（功能）\n第四：启用定时器--Enabled=true ;\n注：\n1>各个控件必须指定Name属性值，便于调用\n2>控件就是对象，因此，可以通过以下代码来设置属性:\n设置属性：控件名.属性 = 值 ;\n获取属性: 数据类型 变量名 = 控件名.属性 ;\n3>控件都有以下三个特性:\n属性\n方法 -> [数据类型 变量名 = ]控件名.方法名([参数列表]) ;\n事件\n4>不规则窗体的移动\n鼠标坐标位置：MousePosition\n窗体坐标位置：Location\n坐标对象：Point\n鼠标按下事件：MouseDown\n鼠标移动事件：MouseMove\n\n### 第二章（下）：继续控件\n#### 选择控件\n1、单选框：RadioButton\n1）作用：互斥选择一个内容\n2）常用属性\nChecked：是否已经选择\nText：显示内容\nAppearance : 显示样式\n3）常用事件\nCheckedChaged：更改选择时发生\nClick : 单击事件\n注：在当前窗体默认只有一组单选框，可以结合GroupBox和Panel控件实现多组单选框。\n\n2、多选框类：CheckBox\n1）作用：选择多个内容\n2）常用属性：\nChecked：选择\nText：内容\nAppearance : 显示样式\n3）常用事件\nCheckedchanged：更改选择时发生\n\n#### 列表控件\n1、下拉列表(组合框)：ComboBox\n1）作用：用于下拉显示数据\n2）常用属性：\nItems：下拉列表的所有内容\nItems.Count : 选项数量\nMaxDroDownItems：设置下拉显示内容的数量\nDropDownStyle：设置下拉列表框样式（不可编辑）\nSelectedItem：当前选定的内容\nSelectedIndex：设置/获取列表选中内容的下标索引(从0开始)\n3）常用方法\nComboBox对象.FindString(内容) : 查找内容对应的下标位置（从0开始），如果找不到返回-1；\nComboBox对象.FindString(内容,下标位置) : 从指定下标位置开始查找内容对应的下标位置，如果找不到返回-1；\nComboBox对象.Items.Add(内容) : 添加内容；\nComboBox对象.Items.AddRange(new string[]{项1,项2,...,项n}) ；\nComboBox对象.Items.Insert(下标索引,内容) : 在指定索引位置添加内容；\nComboBox对象.Items.Remove(内容) : 删除内容；\nComboBox对象.Items.RemoveAt(下标索引) : 根据下标索引删除内容；\nComboBox对象.Items.Clear() : 清空内容；\n4）常用事件\nSelectedIndexChanged：改变下拉列表框时发生的事件\n\n2、列表选择控件：ListBox\n1）作用：把数据以列表的形式显示，用户可以选择其中的数据\n​ 2）常用的属性：\nItems：列表框的所有内容，是ArrayList类对象，内容是字符串\nItems.Count：所有选项的数量\nSelectedItems：获取包含ListBox中当前选定项的集合\nSelectedItems.Count : 选中选项的数量\nSelectedIndex : 设置/获取列表选中内容的下标索引(从0开始)\nSelectedItem ：返回当前选定的某一项，如果没选中，则发生异常\nText : 返回当前选定的某一项，如果没选中，则返回空字符串\nSelectionMode：设置可选的条目数\nSorted：是否以字母的顺序排序\n\n3）常用的方法\n同ComboBox控件\nListBox对象.SetSelected(下标索引,bool) ： 选择或取消选择某项内容。\n\n\n#### 菜单栏和快捷菜单\n1、菜单栏：MenuStrip\n文件(&F)：添加快捷提示 -> alt + F\n-：菜单分隔符\nShortcutKeys：设置快捷键\n2、快捷菜单：ContextMenu\n第一：设置菜单 (同上)\n第二：关联控件 -> ContextMenuStrip属性\n\n### 四、多窗体的实现（重点、难点）\n1、面向对象的复习\n1）类和对象\n类：类是对象的概括(类是对象的模板)->抽象的、模糊的、不具体的\n对象：对象是类的实例->具体的，实际存在的\n注：概括:有用的，本质的，共同的\n学生是一个类\n每个学生都是一个对象\n面向对象的操作步骤：\n\n第一：定义类(对象的概括)\n[访问修饰符] class 类名\n{\n​ //1.字段 -> 类（对象）的具体数据（信息）\n​ private 数据类型 字段名 ;\n​ //2.属性 -> 是对字段的封装，对字段数据进行访问\n​ public 数据类型 属性名\n​ {\n​ set {字段名=value;}\n​ get {return 字段名;}\n​ }\n​ //3.方法 -> 是类（对象）实现的功能（业务）\n​ [访问修饰符] 数据类型 方法名([数据类型 形参1,...,数据类型 形参N])\n​ {\n​ 方法体 -> 具体功能的实现\n​ [return 数据;]\n​ }\n​ 注：在方法内，如果没有返回值，则数据类型声明为void\n​ }\n​ 注：\n​ 类的访问修饰符：public 、 internal（默认）\n​ 类名、属性名、方法名使用帕斯卡名称规则\n​ 字段名使用驼峰名称规则\n​ 属性与字段息息相关(名称一般一样)\n​ 特殊方法:构造方法\n​ 方法名与类名相同\n​ 没有返回值\n​ 不能手动调用，在实例化对象时自动调用\n​ 在实例化对象的同时，初始化对象\n​ 在类中，如果用户没有定义构造方法，则默认存在一个构造方法\n​ 语法如下：\n​ public 方法名类名\n​ {\n​ }\n\n第二：实例化对象（创建对象）\n类名 对象名 = new 类名() ;\n\n第三：初始化对象 -> 给对象的字段赋值\n对象名.属性 = 值 ;\n\n第四：操作 -> 调用方法\n[数据类型 变量名 = ]对象名.方法名([参数列表]) ;\n\n2、建立多窗体程序\n//第一：创建窗体对象\n窗体类 窗体对象 = new 窗体类() ;\n//第二：显示窗体\n窗体对象.Show() ;\n或\n窗体对象.ShowDialog() ;\n或\nif(窗体对象==null || 窗体对象.IsDisposed)\n{\n​ 窗体对象 = new 窗体类() ;\n​ 窗体对象.Show() ;\n}\n\n3、传参 -> 构造方法\n第一：创建窗体对象，把数据放在构造方法中传递\n窗体类 窗体对象 = new 窗体类(数据1,数据2,...,数据n) ;\n注：\n​ 在窗体类中，默认只有一个缺省的构造方法（没有参数的构造方法）\n​ 在窗体类中，必须存在对应的构造方法，且InitializeComponent()不能丢\n第二：在窗体类中，定义对应参数的构造方法\n第三：在窗体类中，定义对应的全局变量，接收构造方法获取的参数数据\n第四：使用传递过来的数据->调用全局变量\n第五：调用方法，显示窗体\n窗体对象.Show() ;\n注意：\n1）如果要传递多个数据，且这些数据都是相关的，我们一般把这些数据封装成相关的对象进行传递。\n2）如果在第二个窗体中，要操作第一个窗体，怎么办呢？\n在创建第二个窗体实例对象时，通过构造方法，把第一个窗体传递过去：\n窗体类 窗体对象 = new 窗体类(this) ;\n窗体类 窗体对象 = new 窗体类(this,数据1,...,数据N) ;\n4、返回值\n\n### 第三章：文件的读写\n一、概述\n1、流：相当于一个管道，C#程序通过流来读写文件\n流，分为：\n输入流 : 相当于程序而言，数据从文件写入到程序这个过程\n输出流 : 相当于程序而方，数据从程序输出到文件中的过程\n\n2、FileStream对象\nFileStream对象表示在磁盘或网络路径上指向文件的流（指向要操作的文件）;\n在FileStream的基础上，使用StreamReader或StreamWriter实现文件的读写（字节方式）。\nFileStream 对象 = new FileStream(String path,FileModel model[,FileAccess access,FileShare share])\n\n参数说明：\npath：指向要操作的文件（路径+文件名）\nmodel：打开文件的方式\naccess：访问文件的方式\nshare：文件共享方式\n\n二、文件的读取（StreamReader）\n1、语法\nStreamReader 对象 = new StreamReader(Stream stream[,Encoding.字符编码]) ;\nStreamReader 对象 = new StreamReader(filename[,Encoding.字符编码]) ;\n\n参数说明：\nstream : 要读取的文件流（FileStrem是其中的Stream）\nfilename : 路径+文件名\nEncoding : 字符编码\n\n2、方法\nReadLine() : 一行一行地读取文件，读到文件的末尾时，返回null\nReadToEnd() : 从文件的开始到末尾，一次性读取\nClose() : 关闭流\n\n三、文件的写入（StreamWriter）\n1、语法：\nStreamWriter 对象 = new StreamWriter(Stream stream) ;\nStreamWriter 对象 = new StreamWriter(Stream stream,bool append,Encoding encoding) ;\nStreamWriter 对象 = new StreamWriter(string filename,bool append,Encoding encoding) ;\n参数说明：\nstream : 要写入文件的流\nappend : 是否追加\nencoding : 字符编码\nfilename : 路径+文件名\n\n2、方法\nWrite() : 写入数据\nWriteLine() : 写入数据并换行\nflush() : 清空缓冲区\nClose() : 关闭流\n\n####  快速文件操作\n1、文件写入\n1）File.AppendAllText(string path,string content,Encoding encoding)\npath : 路径+文件\ncontent : 向文件添加的内容\nencoding : 编码\n添加内容到文件，如果文件存在，追加内容到文件，最后关闭文件；\n如果文件不存在，则创建文件并添加内容到文件，最后关闭文件\nFile.AppendAllText(\"e:\\bb.txt\",\"你好\",Encoding.Default);\n\n2）File.WriteAllBytes(string path,byte[] bytes)\nFile.WriteAllBytes(\"e:\\bb.txt\", Encoding.Default.GetBytes(\"你好\"));\n3）File.WriteAllLines(string path,string[] content,Encoding encoding) ;\nstring[] str = { \"我\", \"好\" };\nFile.WriteAllLines(\"e:\\bb.txt\", str, Encoding.Default);\n4）File.WriteAllText(string path,string content,Encoding encoding) ;\nFile.WriteAllText(\"e:\\bb.txt\", \"好好学习\", Encoding.Default);\n\n2、文件读取\n1）File.ReadAllText(string path[,Encoding encoding]) ;\nString str = File.ReadAllText(\"e:\\bb.txt\",Encoding.Default);\n\n2）File.ReadAllBytes(string path) ;\nbyte[] str = File.ReadAllBytes(\"e:\\bb.txt\");\n\nMessageBox.Show(System.Text.Encoding.Default.GetString(str));\n\n3）File.ReadAllLines(string path[,Encoding encoding]) ;\nstring[] str = File.ReadAllLines(\"e:\\bb.txt\", Encoding.Default);\nMessageBox.Show(string.Join(\",\",str));\n\n3、文件操作\n1）File.Encrypt(string path) ： 加密文件\n2）File.Decrypt(string path) ： 解密文件\n3）File.Exists(string path) ： 判断文件是否存在\n4）File.Delete(string path) ： 删除文件\n5）File.Copy(string sourceFile,String DestFile) ： 复制文件\n\n### 第四章：ADO.NET\n一、ADO.NET概述\n1、概述\n（ActiveX Data Objects），数据库访问的方法和技术（组件）。\n2、组成\n1）.NET框架数据提供程序(.NET Framework Data Provider)\n2）数据集(DataSet)\n注：\n2.1）以上两个组成部分包含相关的数据库操作对象，如：\nConnection：连接数据库\nCommand：执行SQL语句\nDataReader：读取查询结果\nDataAdapter：桥接数据库与数据集的联系，把数据库中的数据填充到DataSet中\nDataSet： 数据在内存中缓存\n\n2.2）SQL Server的数据提供程序中，其命名空间为：System.Data.SqlClient\nSqlXxxxx\n\n二、连接对象（SqlConnection）\n连接SQL Server数据库\nSystem.Data.SqlClient\n\n三、配置文件\n1、在项目中新建一个配置文件，命名为：App.config\n右键项目 -> 添加 -> 新建项 -> 应用程序配置文件 -> 确定\n注意：如果项目中已经存在App.config文件，则不需要添加\n2、在App.config文件中，进行配置\n方式一：\n```csharp\n<connectionStrings>\n​ <add name=\"dbstr\" connectionString=\"Server=.;uid=sa;pwd=;DataBase=abc\"/>\n</connectionStrings>\n```\n说明：\n1）connectionStrings : 表示定义连接字符串\n2）add : 添加具体的连接字符串\nname : 字符串的名称\nconnectionString : 连接字符串的具体内容\n3）相当于在App.config文件中定义：\nstring dbstr = \"Server=.;uid=sa;pwd=;DataBase=abc\" ;\n\n方式二：\n```csharp\n<appSettings>\n​ <add key=\"connStr\" value=\"Server=.;uid=sa;pwd=;DataBase=abc\"/>\n​ <add key=\"age\" value=\"18\"/>\n</appSettings>\n```\n3.在程序中，读取App.config文件中的连接信息\nstring str1 = ConfigurationSettings.AppSettings[\"dbstr\"];\nstring str2 = ConfigurationManager.AppSettings[\"dbstr\"];\nstring str3 = ConfigurationManager.ConnectionStrings[\"dbstr\"].ConnectionString;\n注意：需要在项目中，添加引用System.Configuration，操作如下：\n右键项目 -> 添加 -> 引用 -> 勾选System.Configuration -> 确定\n\n四、异常处理\n特殊的程序控制语句： 程序出错了，保证程序能正常的执行，而不会被终止\n```csharp\ntry\n{\n​ 有可能发生错误的代码 ;\n​ conn.Open() ;\n​ ....\n​ conn.Close() ;\n​ }\n​ catch(Xxxxx x)\n​ {\n​ 对错误进行相关的处理\n​ }\n​ [\n​ finally\n​ {\n​ 不管正确与否，都会被执行->一般用于释放资源\n​ conn.Close() ;\n​ }\n​ ]\n​ 注：Xxxxx表示的异常的种类\n​ Exception : 能捕获所有的异常\n```\n\n### 第五章：知识巩固\n一、Connection对象\n1、使用SqlConnection对象连接数据库\n第一步：字义连接数据库字符串\n第二步：创建连接对象并，打开数据库连接，详细参数如下表所示：\n第三步：做相关操作\n参数	说明\nProvider	这个属性用于设置或返回连接提供程序的名称，仅用于OleDBConnection对象\nConnection Timeout	在终止尝试并产生异常前，等连接到服务器的连接时间长度（以秒为单位），默认值是15秒\nInitial Catalog或DataBase	连接数据库的名称\nData Source或Server	连接打开使用的SQL Server名称\nPassword或pwd	连接数据的密码\nUser ID或uid	SQL SERVER 登录帐户\n\n2．使用OleDbConnection对象连接数据库\n第一步：定义连接数据库字符串\n第二步：打开数据库连接，详细参数如下表所示：\n第三步：相关操作\n\n### 第六章：复习提升\n一、Command对象（SqlCommand）\n1、作用\n设置和执行SQL语句的对象。\n2、常用属性\nCommandType：获取和设置Command对象要执行命令的类型\nCommandText：获取和设置要对数据源执行的SQL语句或存储过程名或表名\nCommandTimeOut：获取和设置在终止对执行命令的尝试并生成错误之前的待时间\nConnection：获取或设置Command对象使用的Connection对象的名称\nParameters： 获取Command对象需要使用的参数集合\nTransaction：获取或设置将在SqlCommand对象执行的SqlTransaction对象\n\n3、常用方法\nExecuteNonQuery：用户执行非Select命令，返回受影响的数据行数\nExecuteScalar：用于执行Select命令，返回数据中第一行第一列的值\nExecuteReader：执行Select命令，并返回一个DataReader对象\n\n4、使用\n类名 对象名 = new 类名() ;\nSqlCommand cmd = new SqlCommand() ;\nSqlCommand cmd = new SqlCommand(string sql) ;\nSqlCommand cmd = new SqlCommand(string sql,SqlConnection conn) ;\nSqlCommand cmd = new SqlCommand(string sql,SqlConnection conn,SqlTransaction tran) ;\n\n5、实现CRUD的操作\n第一：创建连接对象 -> SqlConnection\n1）定义连接字符串\nstring dbstr = \"server=.;uid=sa;pwd=123;database=xsgl\" ;\n2）创建SqlConnection并设置连接字符串\nSqlConnection conn = new SqlConnection(dbstr) ;\n\n3）打开连接\nconn.Open() ;\n第二：创建语句对象 -> SqlCommand\n1）创建语句对象\nSqlCommand cmd = new SqlCommand() ;\n2）设置属性\ncmd.CommandText = \"SQL语句\" ;\ncmd.Connection = 连接对象 ;\n\n第三：执行SQL语句 -> 返回受影响的记录数/DataReader对象\n命令对象.ExecuteNonQuery() ;\n或\n命令对象.ExecuteScalar() ;\n或\n命令对象.ExecuteReader() ;\n第四：关闭对象\n连接对象.Close() ;\n\n#### MD5加密\n1、引用命名空间\nusing System.Security.Cryptography ;\n2、操作\n//第一：创建Md5加密对象\nMD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();\n//第二：把加密的数据转换为字节数组\nbyte[] bytes = Encoding.UTF8.GetBytes(\"明文\");\n//第三：对字节数组进行加密\nbyte[] newBytes = md5.ComputeHash(bytes);\n//第四:把字符数组转换字符串，输出结果\nMessageBox.Show(BitConverter.ToString(bytes));\n\n注：MD5加密后，得到一个32位的十六进制的字符串\n\n三、Parameter对象（SqlParameter）\n1、作用：给SQL语句设置参数\n2、好处\n1）操作方便\n2）防止SQL注入，提高安全性\n3）提高查询执行性能\n3、使用-创建对象（构造方法）\nSqlParameter param = new SqlParameter() ;\nSqlParameter param = new SqlParameter(参数名称,数据类型) ;\nSqlParameter param = new SqlParameter(参数名称,数据) ;\nSqlParameter param = new SqlParameter(参数名称,数据类型,大小) ;\n\n4、常用属性\nDirection：获取或设置一个值，该值表示参数是只可输入、只可输出、双向还是存储过程返回值参数。\nParameterName：获取或设置参数的名称。\nSize：获取或设置列中数据的最大大小。\nSqlDbType：获取或设置参数的数据类型，语法：SqlDbType.Xxxx。\nValue：获取或设置该参数的值。\n\n5、常用方法\nCommand对象.Parameters.add(Parameter对象) ;\nCommand对象.Parameters.AddRange(Parameter对象数组) ;\n\n6、操作\n第一：定义参数化的SQL语句,参数的语法：@参数名称\nstring sql = \"insert into student(name,age) values (@xm,@age)\" ;\n\n第二：创建SqlParameter对象或SqlParameter对象数组\nSqlParameter param1 = new SqlParameter(\"@xm\",\"张三\") ;\nSqlParameter param2 = new SqlParameter(\"@age\",18) ;\n或\nSqlParameter[] ps =\n{\n​ new SqlParameter(\"@xm\",\"张三\"),\n​ new SqlParameter(\"@age\",18)\n}\n\n第三：添加参数\nCommand对象.Parameters.add(param1) ;\nCommand对象.Parameters.add(param2) ;\n或\nCommand对象.Parameters.AddRange(ps) ;\n\n四、DataReader对象（SqlDataReader）\n1、作用：读取查询的数据\n2、特点\n只读（而DataSet可读可写）\n以流的方式，单向读取\n一次只能读取一条记录\n3、使用\n通过Command对象的ExecuteReader()方法返回（创建）DataReader对象\nSqlDataReader reader = new SqlDataReader() ;\n4、常用属性\nFieldCount：返回列数（字段数量）\nHasRows：是否存在数据（记录、行）\nIsClosed：DataReader对象是否关闭\n\n5、常用方法\nRead()：读取记录中的数据\nClose()：关闭DataReader对象\nGetValue(字段的下标索引)：获取指定字段的数据\nGetValues()：获取全部字段的数据\nIsNull(\"userId\")：判断指定字段的数据是否为Null值\n\n6、操作\n第一：执行查询的SQL语句，获取DataReader对象的实例\nSqlDataReader reader = Command对象.ExecuteReader() ;\n\n第二：循环的读到数据\nwhile(reader.read()\n{\n​ //读取数据\n}\n\n注：读取数据的方式有：\n方式一：通过下标读取(下标从0开始)\n数据类型 变量 = (数据类型)SqlDataReader对象[下标] ;\n方式二：通过字段名称读取\n数据类型 变量 = (数据类型)SqlDataReader对象[\"字段名称\"] ;\n\n第三：关闭SqlDataReader对象\nreader.Close() ;\n\n### 第七章：记事本开发\n https://www.cnblogs.com/xdzy/p/9458683.html\n\n#### 文章来源 https://www.cnblogs.com/xdzy/p/9457848.html\n\n',0,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(121,'自定义定时器使用','定时器触发函数  private void Timer_TimesUp(object sender, System.Timers.ElapsedEventArgs e)  {  try  {   Form1.hdt.Title.Text=DateTime.Now.ToString(CultureInfo.InvariantCulture);       }       catch (Exception ex)       {         LogHelper.WriteLog(ex.Message, ex','#  定义\n\n```java\nSystem.Timers.Timer t = new System.Timers.Timer(1000); *//设置时间间隔为1秒*\n```\n##   定时器函数\n\n```java\n public void Timers()\n {\n *//t.Elapsed += new   System.Timers.ElapsedEventHandler(Timer_TimesUp);*\n  t.Elapsed += Timer_TimesUp;\n  t.AutoReset = true; *//每到指定时间Elapsed事件是触发一次（false），还是 一直触发（true）*\n  *//t.Enabled = true; //是否触发Elapsed事件*\n   t.Start();\n}\n\n```\n\n## 定时器触发函数\n\n```java\n private void Timer_TimesUp(object sender, System.Timers.ElapsedEventArgs e)\n {\n try\n {\n  Form1.hdt.Title.Text=DateTime.Now.ToString(CultureInfo.InvariantCulture);\n      }\n      catch (Exception ex)\n      {\n        LogHelper.WriteLog(ex.Message, ex);\n      }\n }\n```\n\n',0,0,'blog/1.jpg',0,23,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(122,'加载当前日期测试数量','','###  定义\n\n```java\n     public void Getcount()\n        {\n            using (XmlReader reader = XmlReader.Create(@\".\\Config\\count.txt\"))\n            {\n                reader.ReadStartElement(\"setting\");\n                Countpass = Convert.ToInt16(reader.ReadElementString(\"countpass\"));\n                Countfail = Convert.ToInt16(reader.ReadElementString(\"countfail\"));\n                _time = reader.ReadElementString(\"time\");\n                reader.Close();\n                if (_time != DateTime.Now.ToString(\"d\"))\n                {\n                    if (!File.Exists(@\".\\Config\\counter.csv\"))\n                    {\n                        FileInfo aFile = new FileInfo(@\".\\Config\\counter.csv\");\n                        aFile.CreateText();\n                    }\n                    using (StreamWriter sw = new StreamWriter(@\".\\Config\\counter.csv\", true))\n                    {\n                        sw.WriteLine(_time + \",\" + Countpass + \",\" + Countfail);\n                        _time = DateTime.Now.ToString(\"d\");\n                        Countfail = 0;\n                        Countpass = 0;\n                        sw.Close();\n                        using (XmlWriter writer = XmlWriter.Create(@\".\\Config\\count.txt\"))\n                        {\n                            writer.WriteStartElement(\"setting\");\n                            writer.WriteElementString(\"countpass\", Convert.ToString(Countpass));\n                            writer.WriteElementString(\"countfail\", Convert.ToString(Countfail));\n                            writer.WriteElementString(\"time\", _time);\n                            writer.Close();\n                        }\n                    }\n                }\n            }\n            Form1.hdt.label5.Text = Convert.ToString(Countpass);\n            Form1.hdt.label6.Text = Convert.ToString(Countfail);\n\n\n        }\n```',1,0,'blog/1.jpg',0,14,3,4,'2020-09-03 00:00:00','2021-08-02 00:00:00'),
(125,'vue仓库、组件间通信、前后台数据交互、前端储存数据大汇总（转）','uex插件：可以完成任意组件间信息交互（移动端) 大白话原理：仓库充当第三方，其他组件都从第三方仓库获取info，那么获取的数据都是一份。类似全局单例 在其他组件中，用组件钩子created','[https://www.cnblogs.com/guyouyin123/p/12318617.html][1]\n**vuex插件**：可以完成任意组件间信息交互（移动端)\n大白话原理：仓库充当第三方，其他组件都从第三方仓库获取info，那么获取的数据都是一份。类似全局单例\n    在其他组件中，用组件钩子created，把仓库中的info取出来，然后再赋值给本组件的变量。\n    再监听，如果本组件的变量发生变化，返回去把仓库的info赋值。\n\n**缺点：**\n    页面刷新，回到初始值info。但是再手机移动端时，页面是不能刷新重新加载的。比如微信，只能重新向后台\n发送请求，不能刷新系统重新加载一边\n\n**总结：**\n\nvuex通常运用在开发移动端项目，pc端项目可以用localStorege和localStorege数据库来替换\n原因：vuex中的数据，会在页面刷新后，重置到store/index.js配置的默认值\n\n**案例：**\n\nHome.vue与FreeCourse.vue一致：\n\n### **仓库代码**\n\n\n\n```javascript\nimport Vue from ''vue''\nimport Vuex from ''vuex''\nVue.use(Vuex);\nexport default new Vuex.Store({\n    state: {\n        info:''这是初始值''\n    },\n    mutations: {},\n    actions: {},\n    modules: {}\n})\n```\n\n### Home代码：\n\n\n\n```javascript\n<template>\n    <div class=\"home\">\n        <Nav/>\n        <h1>主页</h1>\n        <input type=\"text\" v-model=\"info\">\n        <p>{{info}}</p>\n    </div>\n</template>\n\n<script>\n    import Nav from ''../components/Nav''\n    export default {\n        data(){\n            return{\n                info:''''\n            }\n        },\n        created(){\n            // this.info = this.$store.state.info;\n            this.info = localStorage.info;  //PC端数据库，数据永久的\n        },\n        watch:{\n            info(){\n                //this.$store.state.info = this.info;\n                localStorage.info = this.info;  //更新数据库\n            }\n        },\n            components:{\n        Nav,\n    }\n}\n</script>\n```\n\n\n\n\n\n\n### FreeCourse代码：\n\n\n\n```javascript\n<template>\n    <div class=\"free-course\">\n        <Nav/>\n        <h1>免费课</h1>\n        <input type=\"text\" v-model=\"info\">\n        <p>{{info}}</p>\n    </div>\n</template>\n\n<script>\n    import Nav from ''../components/Nav''\n    export default {\n        name: \"FreeCourse\",\n        data(){\n            return{\n                info:''''\n            }\n        },\n        created(){\n            //this.info = this.$store.state.info;\n            this.info = localStorage.info;  //PC端数据库，数据永久的\n        },\n        watch:{\n            info(){\n                //this.$store.state.info = this.info;\n                localStorage.info = this.info;  //更新数据库\n            }\n        },\n        components:{\n            Nav\n        }\n    }\n</script>\n\n<style scoped>\n    </style>\n```\n\n\n\n\n\n\n### 前端存储数据大汇总\n\n1）cookie：以字符串形式存储，数据有过期时间（过期时间到，数据失效吗，否则永远有效）\n\n2）localStorage：以对象形式存储，数据永久保存\n\n3）sessionStorage：以对象形式存储，生命周期同所属页面标签（页面不关闭，数据就有效）\n\n4）vuex(store)：仓库，以对象形式存储，当页面刷新数据就重置（移动端不能刷新，所以只有应用大退才会重置）\n\n### 前后台交互方式（重点）\n\n1）form表单方式\n    i）get | post 两种请求方式，get请求包含直接在浏览器中输入url回车后发送的请求\n    ii）该方式的特点是一定会发生页面的跳转（刷新页面叫本页跳转） - 后台决定页面路由\n    \n        2）ajax异步方式\n    i）get | post | patch | put | delete 等众多请求方式，请求的目的都是异步获取后台的数据\n    ii）该方式的特点是不会刷新页面，只是得到新的数据，前台自己完成页面的局部刷新、整体刷新、页面跳转 - 前台决定页面路由\n    \n注：\n\ni）前后台不分离项目，采用form表单请求，可以完成页面跳转，同步ajax异步请求完成页面局部刷新\nii）前后台分离项目，不采用form表单请求，页面刷新、页面跳转的请求，都是由ajax完成，只不过页面跳转，后台相应的是跳转的目标url，前台再自己完成跳转\n\niii）前后台分离项目，前台也会出现大量的form表单，但是form表单的提交按钮，走的不是form表单的submit提交，而是ajax请求\n\n\n\n### 前后台数据交互\n\naxios插件：完成前后台ajax交互的\n\n1）安装：在前端项目根目录下的终端\n\n`cnpm install axios`\n\n2）项目配置：\n\n```javascript\nmain.js\nimport axios from ''axios''\nVue.prototype.$axios = axios;\n```\n\n3）在任何一个组件的逻辑中，都可以访问 this.$axios()\n\n\n\n### 同源策略 - 前后端跨域问题\n\n一、django默认是同源策略，所以前后台分离项目，访问django会出现CORS跨域问题的报错\n\n\n\n```javascript\nbeforeMount() {\n    // 请求后台\n    this.$axios({\n        url: this.$settings.base_url + ''/test/'',\n        method: ''delete'',\n    })\n}\n```\n\n二、什么叫跨域\n\ni）ip不同：前后台（两个服务器）不在一台主机上运行的\n       ii）port不同：前后台（两个服务器）是相互独立的，运行在不同的端口之上\n      iii）协议不同：http与https之间也同样是跨域问题\n\n注：三者满足一个，就是跨域\n\n三、解决跨域\n\ni）伪装：将前台请求伪装成后台自己对自己发生的请求\n       ii）后台主动允许跨域：后台配置允许跨域即可（在响应头中处理）\n\n四、Django解决跨域\n\ni）安装模块：\n\nii）注册app：\n\niii）添加中间件\n\n```javascript\nINSTALLED_APPS = [\n    ...\n    ''corsheaders''\n]\n```\n\niii）添加中间件\n\niv）允许跨域\n\n`CORS_ORIGIN_ALLOW_ALL = True`\n\n### 前后台分离项目交互流程\n\n\n\n1）启动前后台项目\n\n\n\n```javascript\nMIDDLEWARE = [\n    ...\n    ''corsheaders.middleware.CorsMiddleware''\n]\n```\n\niv）允许跨域\n\n`CORS_ORIGIN_ALLOW_ALL = True`\n\n### 前后台分离项目交互流程\n\n\n\n1）启动前后台项目\n\n\n\n```\n pip install django-cors-headers\n```\n\nii）注册app：\n\niii）添加中间件\n\niv）允许跨域\n\n`CORS_ORIGIN_ALLOW_ALL = True\n\n### 前后台分离项目交互流程\n\n1）启动前后台项目\n\n```javascript\nMIDDLEWARE = [\n    ...\n    ''corsheaders.middleware.CorsMiddleware''\n]\n```\n\niv）允许跨域\n\n`CORS_ORIGIN_ALLOW_ALL = True`\n\n### 前后台分离项目交互流程\n\n1）启动前后台项目\n\n\n\n```javascript\nINSTALLED_APPS = [\n    ...\n    ''corsheaders''\n]\n```\n\niii）添加中间件\n\n\n\n```javascript\nMIDDLEWARE = [ \n    ''corsheaders.middleware.CorsMiddleware''\n]\n```\n\niv）允许跨域\n\n`CORS_ORIGIN_ALLOW_ALL = True`\n\n### 前后台分离项目交互流程\n\n1）启动前后台项目\n\n2）前台配置页面路由，渲染前台页面 | 后台配置数据路由，响应数据（处理好跨域问题）\n\n3）前台通过ajax请求后台接口\n    i）将前台数据提交给后台\n    ii）得到后台的响应结果\n    iii）根据响应结果的数据，最后完成页面的局部刷新、整体刷新、页面跳转\n\n前台传数据到后台，异步请求细节\n\n1）vue框架用axios完成ajax异步请求\n    语法：`this.$axios().then().catch();`\n    解读：$axios()是请求逻辑 | then()是正常响应逻辑 | catch()是错误响应逻辑\n    具体语法：\n\n前台传数据到后台，异步请求细节\n\n1）vue框架用axios完成ajax异步请求\n    语法：`this.$axios().then().catch();`\n    解读：$axios()是请求逻辑 | then()是正常响应逻辑 | catch()是错误响应逻辑\n    具体语法：\n\n```javascript\n this.$axios({\n        url: ''后台接口链接'',\n        method: ''请求方式'',\n        params: {},  // url拼接数据，所有的请求都可以发送该数据\n        data: {},  // 数据包数据，除了get请求外，都可以发送该数据\n        headers: {}  // 请求头参数\n    }).then(response => {\n        // response是http状态2xx的响应结果，响应数据是response.data\n    }).catch(error => {\n        // error是http状态4xx、5xx的响应结果，错误响应对象是error.response，错误响应数据是error.response.data\n    })\n```\n\n2）前台提交数据的两种方式：\n\n​    i）url拼接参数：\n​        所有请求都拥有的提交数据的方式\n​        该方式会将数据都在请求url后用?拼接的方式提交给后台\n​        提交数据只能采用url字符串方式提交给后台，数据是不安全的\n​        axios插件可以用params属性携带url拼接参数\n​          ii）数据包参数：\n​    除get请求外的所有请求都拥有的提交数据的方式\n​    该方式会将数据进行加密，打包成数据包方式提交给后台\n​    打包加密数据有三种方式：urlencoded(form默认的方式)、form-data(可以提交文件)、json(提交json数据)\n​    原生Django没有提供所有类型的数据包数据解析规则，但是数据会在request.body中，我们可以自己手动解析\n​     Django rest-framework框架提供了三种类型的数据包参数解析\n​    axios插件可以用data属性携带数据包参数\n\n\n注意项：\n\n1）`this.$axios({}).then(response => {}).catch(error => {})` 中的then和catch回调函数，不能写function，因为实际vue项目开发，一定会在回调逻辑用到this语法(代表vue对象)，而在function中使用了this语法，function就不是普通函数了(可以理解为类，this就不能代表vue对象了）\n\n2）原生django没有提供所有类型的数据包数据解析规则，但是数据会在request.body中，可以自己解析；Django-rest-framework框架是提供了三种类型的数据包参数解析\n\n案例：\n\n\n```javascript\n<template>\n    <div class=\"home\">\n        <Nav/>\n        <h1>主页</h1>\n        <input type=\"text\" v-model=\"info\">\n        <p>{{info}}</p>\n    </div>\n</template>\n\n<script>\n    import Nav from ''../components/Nav''\n    export default {\n        data(){\n            return{\n                info:''''\n            }\n        },\n        beforeMount(){\n            //请求后台\n            this.$axios({\n                url:this.$settings.base_url + ''/test/'',\n                //拼接参数，可以用params提交，也可以用?在url后直接拼接   url:this.$settings.base_url + ''/test/?a=1&b=2''\n                method:''post'',\n                params:{  //url拼接数据，所有的请求都可以发送该数据\n                    a:1,\n                    b:2\n                },\n                //数据包参数有三种：urlencoded(form表单默认格式) | form-data(提交文件)|json(下面这种，Django无法解析)\n                //原生Django没有提供所有类型的数据包数据解析规则，但是数据会在request.body中，我们可以自己手动解析\n                //Django rest-framework框架时提供了三种类型的数据包参数解析\n                data:{     //数据包数据，除了get请求外，都可以发送该数据\n                    x:100,\n                    y:200,\n                }\n            }).then((response)=>{\n                console.log(response.data);\n                this.info = response.data.name\n            }).catch(error=>{\n                console.log(error.response)\n            })\n        },\n        created(){\n            // this.info = this.$store.state.info;\n            this.info = localStorage.info;  //PC端数据库，数据永久的\n        },\n        watch:{\n            info(){\n                // this.$store.state.info = this.info;\n                localStorage.info = this.info;  //更新数据库\n            }\n        },    \n\ncomponents:{\n    Nav,\n}\n}\n</script>\n```\n\n\n\n\n\n',27,1,'blog/4.jpg',0,16,7,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(126,'窗体刷新','主窗体 定义静态字段  public static string ALLID = \"\"; //  事件方法        private void Button1_Click(object sender, EventArgs e)         {       intAlltests addEmploye = new intAlltests();         addEmploye.ShowDialog();         if (addEmploye.DialogResult == DialogResult.OK)         {             ComboBoxSelecte','\n\n### 主窗体\n\n **定义静态字段**\n\n`public static string ALLID = \"\"; //`\n\n**事件方法**\n\n```c#\n      private void Button1_Click(object sender, EventArgs e)\n        {\n      intAlltests addEmploye = new intAlltests();\n        addEmploye.ShowDialog();\n        if (addEmploye.DialogResult == DialogResult.OK)\n        {\n            ComboBoxSelectedIndexChanged1(ALLID); //拿到子窗体传的值\n        }\n\n    }\n```\n\n### 子窗体\n\n```c#\n         alltestitem.ALLID = name1; //赋值\n         this.DialogResult = DialogResult.OK;\n```\n\n',0,0,'blog/1.jpg',0,14,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(127,'调用进度条进行按键测试','主窗体源码：        private Progress pro;          public void ButtonTest1(int i)         {             string[] row = un.Getlistviewitem(i);        un.DisplaylistboxMsg(\"Start Surround 7.1 Button Test....\");         pro = new Progress(\"请按环绕音功能键\");         pro.ShowDialog();         if (pro.keyValue != 0xEE)','\n### 主窗体源码：\n\n```c#\n       private Progress pro; \n        public void ButtonTest1(int i)\n        {\n            string[] row = un.Getlistviewitem(i);\n       un.DisplaylistboxMsg(\"Start Surround 7.1 Button Test....\");\n        pro = new Progress(\"请按环绕音功能键\");\n        pro.ShowDialog();\n        if (pro.keyValue != 0xEE)\n        {\n            ErrorFlag = false;\n\n        }\n        if (ErrorFlag == false) return;\n        un.DisplaylistboxMsg(\"环绕音功能键PASS\");\n\n        pro = new Progress(\"请按上键\");\n        pro.ShowDialog();\n        if (pro.keyValue != 0xDD)\n        {\n            ErrorFlag = false;\n        }\n        if (ErrorFlag == false) return;\n        un.DisplaylistboxMsg(\"上键PASS\");\n\n        pro = new Progress(\"请按下键\");\n        pro.ShowDialog();\n\n        if (pro.keyValue != 0xAA)\n        {\n            ErrorFlag = false;\n        }\n        if (ErrorFlag == false) return;\n        un.DisplaylistboxMsg(\"下键PASS\");\n        pro = new Progress(\"请按左键\");\n        pro.ShowDialog();\n\n        if (pro.keyValue != 0xBB)\n        {\n            ErrorFlag = false;\n        }\n        if (ErrorFlag == false) return;\n        un.DisplaylistboxMsg(\"左键PASS\");\n        pro = new Progress(\"请按右键\");\n        pro.ShowDialog();\n\n        if (pro.keyValue != 0xCC)\n        {\n            ErrorFlag = false;\n        }\n        if (ErrorFlag == false) return;\n        un.DisplaylistboxMsg(\"右键PASS\");\n\n        if (!ErrorFlag)\n        {\n            row[6] = \"FAIL\";\n        }\n        else\n        {\n            row[6] = \"PASS\";\n        }\n        un.Listupdate(row, i);\n    }\n```\n\n### Progress进度条窗体代码\n\n```c#\nusing System;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.Windows.Forms;\nnamespace WindowsFormsApplication1\n{\n    public partial class Progress : Form\n    {\n        public Progress(string str)\n        {\n            InitializeComponent();\n            Text = str;\n        }\n        public sealed override string Text\n        {\n            get { return base.Text; }\n            set { base.Text = value; }\n        }\n        private int _keyValue = 0;\n\n        public int keyValue\n        {\n            get\n            {\n                return _keyValue;\n            }\n        }\n\n        private void Progress_Load(object sender, EventArgs e)\n        {\n            progressBar1.Maximum =10000 / timer1.Interval;\n            timer1.Start();\n\n            Thread thWaiting = new Thread(WaitingHidInput);\n            thWaiting.Start();\n        }\n        //等待按键输入\n        private void WaitingHidInput()\n        {\n            int olen = 64;\n            byte[] sData = new byte[] { 0x07, 0x88, 0x02, 0x01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n            byte[] oData = new byte[olen];\n            if (CHID.WriteDataToHIDDeviceB(\"0951\", \"16eb\", 0, sData) != 0)\n            {\n                return;\n            }\n            Stopwatch sWatch = new Stopwatch();\n            sWatch.Start();\n            double msec;\n            double timeout;\n            while (true)\n            {\n                msec = sWatch.ElapsedMilliseconds / 1000.0;\n                timeout = 10000 / 1000.0;\n                if (msec > timeout)\n                {\n                    break;\n                }\n                try\n                {\n                    //2019-02-28 == 改为 !=\n                    if (CHID.ReadDataFromHIDDeviceB(\"0951\", \"16eb\", 0, oData, 300, out olen) != 0)\n                    {\n\n                        continue;\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show(@\"WaitingHIDInput->\" + ex.Message);\n                    break;\n                }\n\n            }\n            //  MSGGenerator.SendMessage(MSGGenerator.GetHandleByName(\"Form1\"), MSG.WM_USERDEFINE, oData[3], 0);\n            _keyValue = oData[3];\n            CloseForm();    //关闭进度条对话框\n        }\n\n        private void CloseForm()\n        {\n            if (InvokeRequired)\n            {\n                Invoke(new Action(CloseForm), new object[] { });\n                return;\n            }\n            Close();\n        }\n        private void timer1_Tick(object sender, EventArgs e)\n        {\n            if (progressBar1.Value < progressBar1.Maximum)\n            {\n                progressBar1.Value += 2;\n                label2.Text = progressBar1.Value.ToString()+@\"%\";\n                return;\n            }\n           \n            \n            progressBar1.Value = progressBar1.Maximum;\n            Thread.Sleep(timer1.Interval);\n            timer1.Enabled = false;\n            Close();\n        }\n\n        private void Progress_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            timer1.Stop();\n        }\n    }\n}\n\n```',0,0,'blog/1.jpg',0,14,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(129,'c#爬取图片下载','c#爬取图片下载 using System; using System.IO; using System.Net; using System.Text; using System.Text.RegularExpressions;  namespace ConsoleApp1 {     class Program     {         static void Main(string[] args)         {             string htmlurl = \"https://fabiaoqing.com/biaoqing/lists/page/12.html\";             string urltext = getHtml(htmlurl);','### c#爬取图片下载\n\n```c#\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nnamespace ConsoleApp1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string htmlurl = \"https://fabiaoqing.com/biaoqing/lists/page/12.html\";\n            string urltext = getHtml(htmlurl);\n\n            //构造正则表达式\n\n            string regstr = \"http://wx[1-4].sinaimg.cn/bmiddle/.+?.[jg][pi][fg]\";\n\n            foreach (Match match in Regex.Matches(urltext, regstr))\n            {\n                downLoadPic(match.Value);\n                Console.WriteLine(\"下载图片\" + match.Value.Substring(match.Value.Length - 10, 10));\n            }\n            Console.ReadKey();\n\n        }\n\n        public static string getHtml(string url)\n        {\n            //列表数据，一般通过抓包工具，点击下一页，来发现共同的规则，从而找到对应的URL\n\n            //根据抓包工具，获取需要POST的数据， 并分析对应的数值， 明细这里PageIndex：1 是指第二页。其他的暂不做分析\n            string postData = \"{ \\\"CategoryType\\\":\\\"SiteHome\\\",\\\"ParentCategoryId\\\":0,\\\"CategoryId\\\":808,\\\"PageIndex\\\":1,\\\"TotalPostCount\\\":4000,\\\"ItemListActionName\\\":\\\"PostList\\\"}\";\n\n            //1.构建Request\n\n            HttpWebRequest req = (HttpWebRequest)WebRequest.Create(url);\n            req.Method = \"POST\";// POST OR GET， 如果是GET, 则没有第二步传参，直接第三步，获取服务端返回的数据\n            req.AllowAutoRedirect = false;//服务端重定向。一般设置false\n            req.ContentType = \"application/x-www-form-urlencoded\";//数据一般设置这个值，除非是文件上传\n\n            //2.同过流的形式，传输参数。\n\n            byte[] postBytes = Encoding.UTF8.GetBytes(postData);\n            req.ContentLength = postBytes.Length;\n            Stream postDataStream = req.GetRequestStream();\n            postDataStream.Write(postBytes, 0, postBytes.Length);\n            postDataStream.Close();\n            //3. 获取服务器端的返回数据。\n\n            HttpWebResponse resp = (HttpWebResponse)req.GetResponse();\n            string html = new StreamReader(resp.GetResponseStream()).ReadToEnd();\n            return html;\n\n        }\n\n        public static void downLoadPic(string picURL)\n\n        {\n            WebClient web = new WebClient();\n            string targetPath = \"C:\\\\Users\\\\CH190006\\\\Desktop\\\\Test\\\\img\\\\\" + picURL.Substring(picURL.Length - 10, 10);//构造图片保存的名字\n            web.DownloadFile(picURL, targetPath);\n        }\n\n       \n    }\n}\n\n```\n\n### 异常\n\n**The remote server returned an error: (407) Proxy Authentication Required.”**\n\nApp.config\n\n```c#\n <system.net>\n    <defaultProxy useDefaultCredentials=\"true\" >\n    </defaultProxy>\n  </system.net>\n```\n\n',0,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(130,'使用Html Agility Pack快速解析Html内容','','### 用法：vs上通过Nuget搜索**Html Agility Pack并安装\n\n### 获取网页内容\n\n```c#\n        /// <summary>\n        /// 获取网页内容\n        /// </summary>\n        /// <returns></returns>\n        private static string GetHtml()\n        {\n            string html = string.Empty;\n            string url = \"http://oykperson.xyz/\";\n\n            using (var client = new HttpClient())\n            {\n                client.BaseAddress = new Uri(url);\n\n                //关键代码1：设置请求头采用GZip和deflate两种压缩算法\n                client.DefaultRequestHeaders.Add(\"Accept-Encoding\", \"gzip, deflate\");\n                var response = client.GetAsync(url).Result;\n\n                var fileStream = response.Content.ReadAsStreamAsync().Result;\n\n                //关键代码2：对文件流采用GZip算法解压\n                GZipStream gzip = new GZipStream(fileStream, CompressionMode.Decompress);\n\n                using (StreamReader reader = new StreamReader(gzip, Encoding.GetEncoding(\"utf-8\")))//中文编码处理\n                {\n                    html = reader.ReadToEnd();\n                    //File.WriteAllText(@\"C:\\stock.html\", reader.ReadToEnd(), Encoding.Default);\n                }\n            }\n\n            return html;\n        }\n```\n\n### main\n\n```c#\n       static void Main(string[] args)\n        {\n            string html = GetHtml();\n\n            var doc = new HtmlDocument();\n            doc.LoadHtml(html);\n\n            //查找dom节点div的Id为quotesearch下所有ul下的li下的所有a节点\n            var nodes = doc.DocumentNode.SelectNodes(\"//div[@class=''post-meta wrapper-lg'']/h2/a\");\n            foreach (var node in nodes)\n            {\n                var arrays = node.InnerText.Split(''('');\n                Console.WriteLine(string.Format(\"标题：{0}\",  arrays[0].Replace(\")\", \"\")));\n            }\n            //File.WriteAllText(@\"C:\\stock.html\", matches.ToString(), Encoding.Default);\n\n            Console.ReadKey();\n\n        }\n```',0,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(131,'HtmlAgilityPack解析html文档（转）','一、概述 HtmlAgilityPack(以下简称HAP)是一个基于.Net的、第三方免费开源的微型类库，主要用于在服务器端解析html文档。  HtmlAgilityPack为网页提供了标准的DOM API和XPath导航。使用WebBrowser和HttpWebRequest下载的网页可以用Html Agility Pack来解析。  Xpath表达式的参考文档可见','原文[https://www.cnblogs.com/springsnow/p/11388673.html][1]\n\n### 一、概述\n\nHtmlAgilityPack(以下简称HAP)是一个基于.Net的、第三方免费开源的微型类库，主要用于在服务器端解析html文档。\n\nHtmlAgilityPack为网页提供了标准的DOM API和XPath导航。使用WebBrowser和HttpWebRequest下载的网页可以用Html Agility Pack来解析。\n\nXpath表达式的参考文档可见：http://www.w3school.com.cn/xpath/xpath_syntax.asp\n\n\n\n### 参考：\n\nGitHub：https://github.com/zzzprojects/html-agility-pack/releases\n\n官网：https://html-agility-pack.net/\n\nhttps://www.nuget.org/packages/HtmlAgilityPack/\n\n[回到顶部](https://www.cnblogs.com/springsnow/p/11388673.html#_labelTop)\n\n### 二、属性和方法\n\nHtmlAgilityPack中的HtmlNode类与XmlNode类差不多，HtmlDocument类与XmlDocument类差不多。下面来看看该类提供功能。\n\n\n\n### 属性\n\nAttributes 　　　　　　　　　　　　获取节点的属性集合\nChildNodes　　　　　　　　　　　　获取子节点集合(包括文本节点)\nClosed　　　　　　　　　　　　　　该节点是否已关闭(</xxx>)\nClosingAttributes 在关闭标签的属性集合\nFirstChild 获取第一个子节点\nHasAttributes 判断该节点是否含有属性\nHasChildNodes　　　　　　　　　　判断该节点是否含有子节点\nHasClosingAttributes 判断该节点的关闭标签是否含有属性(</xxx class=\"xxx\">)\nId　　　　　　　　　　　　　　　　 获取该节点的Id属性\nInnerHtml　　　　　　　　　　　　 获取该节点的Html代码\nInnerText　　　　　　　　　　　　 获取该节点的内容，与InnerHtml不同的地方在于它会过滤掉Html代码，而InnerHtml是连Html代码一起输出\nLastChild 获取最后一个子节点\nLine　　　　　　　　　　　　　　　 获取该节点的开始标签或开始代码位于整个HTML源代码的第几行(行号)\nName Html元素名\nNextSibling　　　　　　　　　　　　获取下一个兄弟节点\nNodeType 获取该节点的节点类型\nOuterHtml　　　　　　　　　　　　 整个节点的代码\nOwnerDocument　　　　　　　　　节点所在的HtmlDocument文档\nParentNode　　　　　　　　　　　　获取该节点的父节点\nPreviousSibling　　　　　　　　　　获取前一个兄弟节点\nStreamPosition　　　　　　　　　　该节点位于整个Html文档的字符位置\nXPath 根据节点返回该节点的XPath\n\n\n\n### 方法：\n\nvoid Load(string path);   从路径中加载一个文档\nIEnumerable<HtmlNode> Ancestors(); 　　　　　　　　　　　　　　返回此元素的所有上级节点的集合。\nHtmlNode AppendChild(HtmlNode newChild);  将参数元素追加到为调用元素的子元素(追加在最后)\nHtmlNode PrependChild(HtmlNode newChild);  将参数中的元素作为子元素，放在调用元素的最前面\nIEnumerable<HtmlAttribute> ChildAttributes(string name); 　　　　获取所有子元素的属性(参数名要与元素名匹配)\nHtmlNode Clone(); 　　　　　　　　　　　　　　　　　　　　　　　　 本节点克隆到一个新的节点\nvoid CopyFrom(HtmlNode node); 创建重复的节点和其下的子树。\nXPathNavigator CreateNavigator(); 　　　　　　　　　　　　　　　　 返回的一个对于此文档的XPathNavigator\nstatic HtmlNode CreateNode(string html);  静态方法，允许用字符串创建一个新节点\nXPathNavigator CreateRootNavigator(); 　　　　　　　　　　　　　　创建一个根路径的XPathNavigator\nIEnumerable<HtmlNode> DescendantNodes(); 　　　　　　　　　　 获取所有子代节点\nHtmlNode Element(string name); 根据参数名获取一个元素\nIEnumerable<HtmlNode> Elements(string name); 　　　　　　　　　根据参数名获取匹配的元素集合\nbool GetAttributeValue(string name, bool def); 帮助方法，用来获取此节点的属性的值(布尔类型)。如果未找到该属性，则将返回默认值。\nHtmlNode InsertAfter(HtmlNode newChild, HtmlNode refChild); 将一个节点插入到第二个参数节点的后面，与第二个参数是兄弟关系\nHtmlNode InsertBefore(HtmlNode newChild, HtmlNode refChild); 　　讲一个节点插入到第二个参数节点的后面，与第二个参数是兄弟关系\nstatic bool IsEmptyElement(string name);  确定是否一个空的元素节点。\nstatic bool IsOverlappedClosingElement(string text); 确定是否文本对应于一个节点可以保留重叠的结束标记。\nvoid Remove(); 从父集合中移除调用节点\nHtmlNodeCollection SelectNodes(string xpath);　　　　　　　　　　　根据XPath获取一个节点集合\nHtmlNode SelectSingleNode(string xpath); 　　　　　　　　　　　　　根据XPath获取唯一的一个节点\nHtmlAttribute SetAttributeValue(string name, string value); 设置调用节点的属性\nstring WriteContentTo(); 将该节点的所有子级都保存到一个字符串中。\nstring WriteTo(); 　　　　　　　　　　　　　　　　　　　　　　　　　　将当前节点保存到一个字符串中。\nvoid Save(string filename);  将HTML文档保存到指定的路径\n\n\n\n### 三、用法 \n\n下面是几个简单使用说明：\n\n1、获取网页title：doc.DocumentNode.SelectSingleNode(\"//title\").InnerText;//XPath中“//title”表示所有title节点。SelectSingleNode用于获取满足条件的唯一的节点。\n\n2、获取所有的超链接：doc.DocumentNode.Descendants(\"a\")\n\n3、获取name为kw的input，也就是相当于getElementsByName()：var kwBox = doc.DocumentNode.SelectSingleNode(\"//input[@name=''kw'']\");\n\n\n\n```c#\nprivate void Form1_Load(object sender, EventArgs e)\n{\n    List<Result> list = new List<Result>();\n\n    HtmlWeb htmlWeb = new HtmlWeb();\n\n    htmlWeb.OverrideEncoding = Encoding.UTF8;//编码，这里网上有些很多写法都不正确\n\n    HtmlAgilityPack.HtmlDocument htmlDoc = htmlWeb.Load(@\"http://www.cnblogs.com/\");\n\n    //选择博客园首页文章列表\n    htmlDoc.DocumentNode.SelectNodes(\"//div[@id=''post_list'']/div[@class=''post_item'']\").//双斜杠“//”表示从跟节点开始查找\n        AsParallel().ToList().ForEach(ac =>\n        {\n            //抓取图片，因为有空的，所以拿变量存起来\n            HtmlNode node = ac.SelectSingleNode(\".//p[@class=''post_item_summary'']/a/img\");\n\n            list.Add(new Result\n            {\n                url = ac.SelectSingleNode(\".//a[@class=''titlelnk'']\").Attributes[\"href\"].Value,\n                title = ac.SelectSingleNode(\".//a[@class=''titlelnk'']\").InnerText,\n                //图片如果为空，显示默认图片\n                img = node == null ? \"http ://www.cnblogs.com//Content/img/avatar.png\" : node.Attributes[\"src\"].Value,\n                content = ac.SelectSingleNode(\".//p[@class=''post_item_summary'']\").InnerText\n            });\n        });\n\n    foreach (Result item in list)\n    {\n        this.listBox1.Items.Add(item.title);\n    }\n\n\n}/// <summary>\n    /// 页面抓取结果\n    /// </summary>\npublic class Result\n{\n    /// <summary>\n    /// 链接\n    /// </summary>\n    public string url { get; set; }\n    /// <summary>\n    /// 标题\n    /// </summary>\n    public string title { get; set; }\n    /// <summary>\n    /// 头像地址\n    /// </summary>\n    public string img { get; set; }\n    /// <summary>\n    /// 正文内容\n    /// </summary>\n    public string content { get; set; }\n}\n```\n\n\n  [1]: https://www.cnblogs.com/springsnow/p/11388673.html',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(132,'C#里面的时间工具类','','\n原文：[请输入链接描述][1]\n\n```c#\nusing System;\nnamespace ToolBox.DateTimeTool\n{\n    public static class DateTimeExtend\n    {\n        /// <summary>\n        /// 获取本日开始时间（0点0分0秒）\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetDayStart(this DateTime dateTime)\n        {\n            return dateTime.Date;\n        }\n\n        /// <summary>\n        /// 获取本日结束时间（23点59分59秒）\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetDayEnd(this DateTime dateTime)\n        {\n            return dateTime.Date.AddDays(1).AddMilliseconds(-1);\n        }\n\n        /// <summary>\n        /// 获取本周开始时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetWeekStart(this DateTime dateTime)\n        {\n            return dateTime.AddDays(-(int)dateTime.DayOfWeek + 1).GetDayStart();\n        }\n\n        /// <summary>\n        /// 获取本周结束时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetWeekEnd(this DateTime dateTime)\n        {\n            return dateTime.AddDays(7 - (int)dateTime.DayOfWeek).GetDayEnd();\n        }\n\n        /// <summary>\n        /// 获取本月开始时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetMonthStart(this DateTime dateTime)\n        {\n            return new DateTime(dateTime.Year, dateTime.Month, 1, 0, 0, 0, 0);\n        }\n\n        /// <summary>\n        /// 获取本月结束时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetMonthEnd(this DateTime dateTime)\n        {\n            return GetMonthStart(dateTime).AddMonths(1).AddMilliseconds(-1);\n        }\n\n        /// <summary>\n        /// 获取本季度开始时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetSeasonStart(this DateTime dateTime)\n        {\n            var time = dateTime.AddMonths(0 - ((dateTime.Month - 1) % 3));\n            return DateTime.Parse(time.AddDays(-time.Day + 1).ToString(\"yyyy/MM/dd 00:00:00\"));\n        }\n\n        /// <summary>\n        /// 获取本季度结束时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetSeasonEnd(this DateTime dateTime)\n        {\n            var time = dateTime.AddMonths((3 - ((dateTime.Month - 1) % 3) - 1));\n            return DateTime.Parse(time.AddMonths(1).AddDays(-time.AddMonths(1).Day + 1).AddDays(-1).ToString(\"yyyy/MM/dd 23:59:59\"));\n        }\n\n        /// <summary>\n        /// 获取本年开始时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetYearStart(this DateTime dateTime)\n        {\n            return DateTime.Parse(dateTime.AddDays(-dateTime.DayOfYear + 1).ToString(\"yyyy/MM/dd 00:00:00\"));\n        }\n\n        /// <summary>\n        /// 获取本年结束时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime GetYearEnd(this DateTime dateTime)\n        {\n            var time2 = dateTime.AddYears(1);\n            return DateTime.Parse(time2.AddDays(-time2.DayOfYear).ToString(\"yyyy/MM/dd 23:59:59\"));\n        }\n\n        /// <summary>\n        /// 北京时间转换成unix时间戳(10位/秒)\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static long BeijingTimeToUnixTimeStamp10(this DateTime dateTime)\n        {\n            return (long)(dateTime - new DateTime(1970, 1, 1, 8, 0, 0)).TotalSeconds;\n        }\n\n        /// <summary>\n        /// 格林威治时间转换成unix时间戳(10位/秒)\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static long UtcTimeToUnixTimeStamp10(this DateTime dateTime)\n        {\n            return (long)(dateTime - new DateTime(1970, 1, 1, 0, 0, 0)).TotalSeconds;\n        }\n\n        /// <summary>\n        /// 北京时间转换成unix时间戳(13位/毫秒)\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static long BeijingTimeToUnixTimeStamp13(this DateTime dateTime)\n        {\n            return (long)(dateTime - new DateTime(1970, 1, 1, 8, 0, 0)).TotalMilliseconds;\n        }\n\n        /// <summary>\n        /// 格林威治时间转换成unix时间戳(13位/毫秒)\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static long UtcTimeToUnixTimeStamp13(this DateTime dateTime)\n        {\n            return (long)(dateTime - new DateTime(1970, 1, 1, 0, 0, 0)).TotalMilliseconds;\n        }\n\n        /// <summary>\n        /// 10位unix时间戳转换成北京时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime UnixTimeStamp10ToBeijingTime(this long unixTimeStamp)\n        {\n            return new DateTime(1970, 1, 1, 8, 0, 0).AddSeconds(unixTimeStamp);\n        }\n\n        /// <summary>\n        /// 10位unix时间戳转换成格林威治\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime UnixTimeStamp10ToUtcTime(this long unixTimeStamp)\n        {\n            return new DateTime(1970, 1, 1, 0, 0, 0).AddSeconds(unixTimeStamp);\n        }\n\n        /// <summary>\n        /// 13位unix时间戳转换成北京时间\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime UnixTimeStamp13ToBeijingTime(this long unixTimeStamp)\n        {\n            return new DateTime(1970, 1, 1, 8, 0, 0).AddMilliseconds(unixTimeStamp);\n        }\n\n        /// <summary>\n        /// 13位unix时间戳转换成格林威治\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static DateTime UnixTimeStamp13ToUtcTime(this long unixTimeStamp)\n        {\n            return new DateTime(1970, 1, 1, 0, 0, 0).AddMilliseconds(unixTimeStamp);\n        }\n\n        /// <summary>\n        /// 当前日期所在月份第一个指定星期几的日期\n        /// </summary>\n        /// <param name=\"date\">给定日期</param>\n        /// <param name=\"dayOfWeek\">星期几</param>\n        /// <returns>所对应的日期</returns>\n        public static DateTime GetFirstWeekDayOfMonth(this DateTime date, DayOfWeek dayOfWeek)\n        {\n            var dt = date.GetMonthStart();\n            while (dt.DayOfWeek != dayOfWeek)\n                dt = dt.AddDays(1);\n\n            return dt;\n        }\n\n        /// <summary>\n        /// 当前日期所在月份最后1个指定星期几的日期\n        /// </summary>\n        /// <param name=\"date\">给定日期</param>\n        /// <param name=\"dayOfWeek\">星期几</param>\n        /// <returns>所对应的日期</returns>\n        public static DateTime GetLastWeekDayOfMonth(this DateTime date, DayOfWeek dayOfWeek)\n        {\n            var dt = date.GetMonthEnd();\n            while (dt.DayOfWeek != dayOfWeek)\n                dt = dt.AddDays(-1);\n\n            return dt;\n        }\n\n        /// <summary>\n        /// 判断是否比指定之间早\n        /// </summary>\n        /// <param name=\"date\"></param>\n        /// <param name=\"other\"></param>\n        /// <returns></returns>\n        public static bool IsBefore(this DateTime date, DateTime other)\n        {\n            return date < other;\n        }\n\n        /// <summary>\n        /// 判断是否比指定时间晚\n        /// </summary>\n        /// <param name=\"date\"></param>\n        /// <param name=\"other\"></param>\n        /// <returns></returns>\n        public static bool IsAfter(this DateTime date, DateTime other)\n        {\n            return date > other;\n        }\n\n        /// <summary>\n        /// 给定日期所在月份共有多少天\n        /// </summary>\n        /// <param name=\"date\"></param>\n        /// <returns></returns>\n        public static int GetCountDaysOfMonth(this DateTime date)\n        {\n            return date.GetMonthEnd().Day;\n        }\n\n        /// <summary>\n        /// 当前日期与给定日期是否是同一天\n        /// </summary>\n        /// <param name=\"date\">当前日期</param>\n        /// <param name=\"dateToCompare\">给定日期</param>\n        /// <returns></returns>\n        public static bool IsDateEqual(this DateTime date, DateTime dateToCompare)\n        {\n            return date.Date == dateToCompare.Date;\n        }\n\n        /// <summary>\n        /// 是否是周未\n        /// </summary>\n        /// <param name=\"date\"></param>\n        /// <returns></returns>\n        public static bool IsWeekend(this DateTime date)\n        {\n            return date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;\n        }\n\n        /// <summary>\n        /// 是否是工作日\n        /// </summary>\n        /// <param name=\"date\"></param>\n        /// <returns></returns>\n        public static bool IsWeekDay(this DateTime date)\n        {\n            return !date.IsWeekend();\n        }\n\n        /// <summary>\n        /// 判断是否为今天\n        /// </summary>\n        /// <param name=\"date\"></param>\n        /// <returns></returns>\n        public static bool IsToday(this DateTime date)\n        {\n            return date.Date == DateTime.Now.Date;\n        }\n\n        /// <summary>\n        /// 判定公历闰年遵循的一般规律为：四年一闰，百年不闰，四百年再闰。\n        /// 公历闰年的精确计算方法：（按一回归年365天5小时48分45.5秒）\n        /// 普通年能被4整除而不能被100整除的为闰年。 （如2004年就是闰年，1900年不是闰年）\n        /// 世纪年能被400整除而不能被3200整除的为闰年。 (如2000年是闰年，3200年不是闰年)\n        /// 对于数值很大的年份能整除3200,但同时又能整除172800则又是闰年。(如172800年是闰年，86400年不是闰年）\n        /// 公元前闰年规则如下：\n        /// 非整百年：年数除4余数为1是闰年，即公元前1、5、9……年；\n        /// 整百年：年数除400余数为1是闰年，年数除3200余数为1，不是闰年,年数除172800余1又为闰年，即公元前401、801……年。\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static bool IsLeap(this DateTime dateTime)\n        {\n            var year = dateTime.Year;\n            if ((year % 400 == 0 && year % 3200 != 0)\n               || (year % 4 == 0 && year % 100 != 0)\n               || (year % 3200 == 0 && year % 172800 == 0))\n                return true;\n            else\n                return false;\n        }\n\n        /// <summary>\n        /// 获取当前年天数\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static int GetDaysByYear(this DateTime dateTime)\n        {\n            return (new DateTime(dateTime.Year + 1, 1, 1) - new DateTime(dateTime.Year, 1, 1)).Days;\n        }\n\n        /// <summary>\n        /// 获取当前年天数\n        /// </summary>\n        /// <param name=\"dateTime\"></param>\n        /// <returns></returns>\n        public static int GetWeekCountByYear(this DateTime dateTime)\n        {\n            //找到今年的第一天是周几\n            int firstWeekend = Convert.ToInt32(DateTime.Parse(dateTime.Year + \"-1-1\").DayOfWeek);\n\n            //获取第一周的差额,如果是周日，则firstWeekend为0，第一周也就是从周天开始的。\n            int weekDay = firstWeekend == 0 ? 1 : (7 - firstWeekend + 1);\n\n            //获取今天是一年当中的第几天\n            int currentDay = dateTime.DayOfYear;\n\n            //（今天 减去 第一周周末）/7 等于 距第一周有多少周 再加上第一周的1 就是今天是今年的第几周了\n            //    刚好考虑了惟一的特殊情况就是，今天刚好在第一周内，那么距第一周就是0 再加上第一周的1 最后还是1\n            int current_week = Convert.ToInt32(Math.Ceiling((currentDay - weekDay) / 7.0)) + 1;\n            return current_week;\n        }\n\n    }\n}\n```\n\n\n  [1]: https://www.cnblogs.com/xiaotimor/p/12326820.html',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(133,'测试信息记录','','\n## Writelog\n\n```c#\n public void Writelog(bool errorFlag)\n        {\n            try\n            {\n                int num = Form1.hdt.listView1.Items.Count;\n                bool bExist = false;\n                string time1 = DateTime.Now.ToString(\"d\").Replace(\"/\", \"-\");\n                if (File.Exists(\"TestData/\" + time1 + \"-Log.csv\"))\n                {\n                    bExist = true;\n                }\n                StreamWriter sw = new StreamWriter(\"TestData/\" + time1 + \"-Log.csv\", true);\n                if (!bExist)\n                {\n                    switch (num)\n                    {\n                        case 14:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) +\n                                         \",\" + Testrecord2(5) + \",\" + Testrecord2(6) + \",\" + Testrecord2(7) + \",\" + Testrecord2(8) +\n                                         \",\" + Testrecord2(9) + \",\" + Testrecord2(10) + \",\" + Testrecord2(11) + \",\" + Testrecord2(12) +\n                                         \",\" + Testrecord2(13) + \",\" + \"测试时间\"); break;\n                        case 13:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) +\n                                         \",\" + Testrecord2(5) + \",\" + Testrecord2(6) + \",\" + Testrecord2(7) + \",\" + Testrecord2(8) + \",\" + Testrecord2(9) + \",\"\n                                         + Testrecord2(10) + \",\" + Testrecord2(11) + \",\" + Testrecord2(12) + \",\" + \"测试时间\"); break;\n                        case 12:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) +\n                                         \",\" + Testrecord2(5) + \",\" + Testrecord2(6) + \",\" + Testrecord2(7) + \",\" + Testrecord2(8) +\n                                         \",\" + Testrecord2(9) + \",\" + Testrecord2(10) + \",\" + Testrecord2(11) + \",\" + \"测试时间\"); break; ; break;\n                        case 11:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) +\n                                         \",\" + Testrecord2(5) + \",\" + Testrecord2(6) + \",\" + Testrecord2(7) + \",\" + Testrecord2(8) +\n                                         \",\" + Testrecord2(9) + \",\" + Testrecord2(10) + \",\" + \"测试时间\"); break;\n                        case 10:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) +\n                                         \",\" + Testrecord2(5) + \",\" + Testrecord2(6) + \",\" + Testrecord2(7) + \",\" + Testrecord2(8) + \",\" + Testrecord2(9) + \",\" + \"测试时间\"); break;\n                        case 9:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) +\n                                         \",\" + Testrecord2(5) + \",\" + Testrecord2(6) + \",\" + Testrecord2(7) + \",\" + Testrecord2(8) + \",\" + \"测试时间\"); break;\n                        case 8:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) +\n                                         \",\" + Testrecord2(5) + \",\" + Testrecord2(6) + \",\" + Testrecord2(7) + \",\" + \"测试时间\"); break;\n                        case 7:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4)\n                                         + \",\" + Testrecord2(5) + \",\" + Testrecord2(6) + \",\" + \"测试时间\"); break;\n                        case 6:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) + \",\" + Testrecord2(5) + \",\" + \"测试时间\"); break;\n                        case 5:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1)\n                                         + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + Testrecord2(4) + \",\" + \"测试时间\"); break;\n                        case 4:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + Testrecord2(3) + \",\" + \"测试时间\"); break;\n                        case 3:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + Testrecord2(2) + \",\" + \"测试时间\"); break;\n                        case 2:\n                            sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + Testrecord2(1) + \",\" + \"测试时间\"); break;\n                        case 1: sw.WriteLine(\"SN\" + \",\" + Testrecord2(0) + \",\" + \"测试时间\"); break;\n                    }\n                }\n\n                switch (num) //判断获取目前功能数量\n                {\n                    case 14:\n                        sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5)\n                                     + \",\" + Testrecord(6) + \",\" + Testrecord(7) + \",\" + Testrecord(8) + \",\" + Testrecord(9) + \",\" + Testrecord(10) + \",\" + Testrecord(11) + \",\" + Testrecord(12)\n                                     + \",\" + Testrecord(13) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 13:\n                        sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5)\n                                     + \",\" + Testrecord(6) + \",\" + Testrecord(7) + \",\" + Testrecord(8) + \",\" + Testrecord(9) + \",\" + Testrecord(10) + \",\" + Testrecord(11) + \",\" + Testrecord(12) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 12:\n                        sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5)\n                                     + \",\" + Testrecord(6) + \",\" + Testrecord(7) + \",\" + Testrecord(8) + \",\" + Testrecord(9) + \",\" + Testrecord(10) + \",\" + Testrecord(11) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 11:\n                        sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5)\n                                     + \",\" + Testrecord(6) + \",\" + Testrecord(7) + \",\" + Testrecord(8) + \",\" + Testrecord(9) + \",\" + Testrecord(10) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 10:\n                        sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5)\n                                     + \",\" + Testrecord(6) + \",\" + Testrecord(7) + \",\" + Testrecord(8) + \",\" + Testrecord(9) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 9:\n                        sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5)\n                                     + \",\" + Testrecord(6) + \",\" + Testrecord(7) + \",\" + Testrecord(8) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 8:\n                        sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5)\n                                     + \",\" + Testrecord(6) + \",\" + Testrecord(7) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 7: sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5) + \",\" + Testrecord(6) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 6: sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + Testrecord(5) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 5: sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + Testrecord(4) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 4: sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + Testrecord(3) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 3: sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + Testrecord(2) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 2: sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + Testrecord(1) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    case 1: sw.WriteLine(Form1.hdt.textSN.Text + \",\" + Testrecord(0) + \",\" + DateTime.Now.ToString(\"T\")); break;\n                    default:\n                        sw.Close();\n                        break;\n                }\n                sw.Close();\n\n            }\n            catch (Exception e)\n            {\n                MessageBox.Show(e.Message);\n\n            }\n        }\n```\n\n\n\n## Testrecord\n\n```c#\nprivate string Testrecord(int i)\n        {\n            string st = \"\";\n            //st = st + Form1.hdt.listView1.Items[i].SubItems[1].Text + \",\";\n            st = st + Form1.hdt.listView1.Items[i].SubItems[5].Text;\n           // st = st + DateTime.Now.ToString(\"T\") + \",\";\n           // st = st + Form1.hdt.textSN.Text + \",\";\n           \n            return st;\n        }\n```\n\n## Testrecord2\n\n```c#\n private string Testrecord2(int i)\n        {\n            string st = \"\";\n            st = st + Form1.hdt.listView1.Items[i].SubItems[1].Text;\n            //  }\n            return st;\n        }\n```\n\n',0,0,'blog/1.jpg',0,14,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(134,'.Net Core3.1下用Swagger搭建web api（1）','','\n### 基于.net core 3.1建一个web api的项目\n\n先下载.net core 3.1的SDK(开发.net core项目时会用到)和Runtime(用来运行.net core的应用程序)\n\n地址：https://dotnet.microsoft.com/download/visual-studio-sdks?utm_source=getdotnetsdk&utm_medium=referral\n\n\n\n1  创建ASP.NET Core web项目 \n\n2 引入Swashbuckle.AspNetCore程序包\n\n **执行以下命令**\n\n```\nInstall-Package Swashbuckle.AspNetCore -Version 5.0.0-rc4\n```\n\n\n\n 添加 并配置Swagger中间件\n\n```c#\n   public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n\n            //注册swagger\n            services.AddSwaggerGen(c =>\n                {\n                    c.SwaggerDoc(\"v1.0\", new OpenApiInfo { Title = \"1\", Version = \"1.0\" });\n                    var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n                    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n                    c.IncludeXmlComments(xmlPath);\n                });\n           \n        }\n```\n\n\n\n```c#\n  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n\n            //Swagger规范和Swagger UI\n            app.UseSwagger();\n            app.UseSwaggerUI(c =>\n                {\n                    c.SwaggerEndpoint(\"/swagger/v1.0/swagger.json\", \"1\");\n                    c.RoutePrefix = string.Empty;\n                });\n               \n\n            app.UseHttpsRedirection();\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n```\n\n\n\n 地址栏改一下\n\n```\nindex.html\n```\n\n\n\n 如果对接口做了xml注释，要在Startup添加如下代码,才可以显示出来\n\n先引入NuGet包:Microsoft.Extensions.PlatformAbstractions\n\n然后右键属性\n\n\n\n 再在Startup中添加下面的代码\n\n```c#\n var basePath = PlatformServices.Default.Application.ApplicationBasePath;\n //Core.Admin.webapi.xml是我的项目生成XML文档的后缀名,具体的以你项目为主\n var xmlPath = Path.Combine(basePath, \"Core.Admin.webapi.xml\");\n c.IncludeXmlComments(xmlPath);\n```\n\n \n\n 运行项目，注释已经出来了\n\n在launchSettings.json中更改一下launchUrl这个环境变量 index.html\n\n\n\n \n\n \n\n \n\n',1,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(135,'.Net Core3.1 配置Pomelo.EntityFrameworkCore.MySql数据操作(2)','','\n\n###  引入Pomelo.EntityFrameworkCore.MySql程序包\n\n### ConfigureServices\n\n```c#\n// other service configurations go here\n            // replace \"YourDbContext\" with the class name of your DbContext\n            services.AddDbContextPool<DbModel>(options => options\n                // replace with your connection string\n                .UseMySql(\"Server=localhost;Database=test;User=root;Password=woshishui;\", mySqlOptions => mySqlOptions\n                    // replace with your Server Version and Type\n                    .ServerVersion(new ServerVersion(new Version(8, 0, 19), ServerType.MySql))\n                ));\n```\n\n### appsettings.json\n\n```xml\n{\n\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=localhost;database=test;uid=root;pwd=woshishui;\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n\n\n\n```\n\n### 创建Models实体类\n\n**alltestitem**\n\n```c#\nusing System.ComponentModel.DataAnnotations;\n\nnamespace BackStageCore3.Models\n{\n    public class alltestitem\n    {\n        // <summary>\n        /// 机型\n        /// </summary>\n        [Key]\n        public string 机型 { get; set; }\n\n        /// <summary>\n        /// 测试项目\n        /// </summary>\n        public string 测试项目 { get; set; }\n        /// <summary>\n        /// 耳机指令\n        /// </summary>\n        public string 耳机指令 { get; set; }\n        /// <summary>\n        /// 数值上限\n        /// </summary>\n        public string 数值上限 { get; set; }\n        /// <summary>\n        /// 数值下限\n        /// </summary>\n        public string 数值下限 { get; set; }\n        /// <summary>\n        /// 编号\n        /// </summary>\n        public int 编号 { get; set; }\n\n    }\n}\n\n```\n\n### Controllers\n\n**AlltestitemController.cs**\n\n```c#\nusing BackStageCore3.Models;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace BackStageCore3.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class AlltestitemController : ControllerBase\n    {\n        private readonly DbModel _coreDbContext;\n\n        public AlltestitemController(DbModel coreDbContext)\n        {\n            _coreDbContext = coreDbContext;\n        }\n\n\n        /// <summary>\n        /// 查询所有\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet]\n        public async Task<ActionResult<IEnumerable<alltestitem>>> Get()\n        {\n            return await _coreDbContext.Alltestitem.ToListAsync();\n        }\n\n        /// <summary>\n        /// 查询type类型下的内容\n        /// </summary>\n        /// <param name=\"id\">条件</param>\n        /// <returns>返回text</returns>\n        [HttpGet(\"{id}\", Name = \"Getgj\")]\n        public List<alltestitem> Get(string id)\n        {\n            return _coreDbContext.Set<alltestitem>().Where(b => b.机型 == id).ToList();\n        }\n\n\n        /// <summary>\n        /// 添加数据\n        /// </summary>\n        /// <param name=\"item\"></param>\n        /// <returns></returns>\n        // POST: api/Gj\n        [HttpPost]\n        public async Task<ActionResult<alltestitem>> Post(alltestitem gjs)\n        {\n            _coreDbContext.Alltestitem.Add(gjs);\n            await _coreDbContext.SaveChangesAsync();\n            //CreatedAtAction(actionName,routeValues,value).\n            return CreatedAtAction(nameof(Get), new { id = gjs.机型 }, gjs);\n        }\n\n\n        /// <summary>\n        /// 按条件更新数据\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"item\"></param>\n        /// <returns></returns>\n        // PUT: api/Gj/5\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> Put(string id, alltestitem item)\n        {\n            if (id != item.机型)\n            {\n                return BadRequest();\n            }\n            _coreDbContext.Entry(item).State = EntityState.Modified;\n            await _coreDbContext.SaveChangesAsync();\n\n            return NoContent();\n        }\n        /// <summary>\n        /// 删除\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        // DELETE: api/ApiWithActions/5\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> Delete(int id)\n        {\n            var todoItem = await _coreDbContext.Alltestitem.FindAsync(id);\n            if (todoItem == null)\n            {\n                return NotFound();\n            }\n            _coreDbContext.Alltestitem.Remove(todoItem);\n            await _coreDbContext.SaveChangesAsync();\n            return NoContent();\n        }\n    }\n}\n\n```\n\n\n\n',1,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(136,'net core 3.1 跨域 Cors 找不到 “Access-Control-Allow-Origin”','','原文:[net core 3.1 跨域 Cors 找不到 “Access-Control-Allow-Origin”](https://www.cnblogs.com/xiaotimor/p/12068984.html)\n\n### 首先在ConfigureServices添加\n\n```c#\npublic void ConfigureServices(IServiceCollection services)\n        {\n            services.AddCors(options =>\n            {\n                options.AddPolicy(\"any\", builder =>\n                {\n                    //builder.AllowAnyOrigin() //允许任何来源的主机访问\n                    builder\n                    \n                    .WithOrigins(\"http://*.*.*.*\")//.SetIsOriginAllowedToAllowWildcardSubdomains()//设置允许访问的域\n\n                    .AllowAnyMethod()\n\n                    .AllowAnyHeader()\n\n                    .AllowCredentials();//\n\n                });\n\n            });\n            services.AddControllers();\n        }\n```\n\n\n\n\n\n### 然后新增CorsMiddleware 类\n\n\n\n```c#\npublic class CorsMiddleware\n    {\n        private readonly RequestDelegate _next;\n        public CorsMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            if (!context.Response.Headers.ContainsKey(\"Access-Control-Allow-Origin\"))\n            {\n                context.Response.Headers.Add(\"Access-Control-Allow-Origin\", \"*\");\n            }\n            await _next(context);\n        }\n    }\n```\n\n\n\n\n\n### 然后在Configure 使用中间件\n\n```c#\n app.UseMiddleware<CorsMiddleware>();\n```\n\n',1,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(137,'.NET core3.1 使用Jwt保护api','','\n\n## 摘要：\n\n\n本文演示如何向有效用户提供jwt，以及如何在webapi中使用该token通过JwtBearerMiddleware中间件对用户进行身份认证。\n\n## 认证和授权区别？\n\n首先我们要弄清楚认证（Authentication）和授权（Authorization）的区别，以免混淆了。认证是确认的过程中你是谁，而授权围绕是你被允许做什么，即权限。显然，在确认允许用户做什么之前，你需要知道他们是谁，因此，在需要授权时，还必须以某种方式对用户进行身份验证。 \n\n## 什么是JWT？\n\n根据维基百科的定义，JSON WEB Token（JWT），是一种基于JSON的、用于在网络上声明某种主张的令牌（token）。JWT通常由三部分组成：头信息（header），消息体（payload）和签名（signature）。\n\n头信息指定了该JWT使用的签名算法:\n\n```c#\nheader = ''{\"alg\":\"HS256\",\"typ\":\"JWT\"}''\n```\n\n`HS256`表示使用了HMAC-SHA256来生成签名。\n\n消息体包含了JWT的意图：\n\n```c#\npayload = ''{\"loggedInAs\":\"admin\",\"iat\":1422779638}''//iat表示令牌生成的时间\n```\n\n未签名的令牌由`base64url`编码的头信息和消息体拼接而成（使用\".\"分隔），签名则通过私有的key计算而成：\n\n```c#\nkey = ''secretkey''  \nunsignedToken = encodeBase64(header) + ''.'' + encodeBase64(payload)  \nsignature = HMAC-SHA256(key, unsignedToken)\n```\n\n最后在未签名的令牌尾部拼接上`base64url`编码的签名（同样使用\".\"分隔）就是JWT了：\n\n```c#\ntoken = encodeBase64(header) + ''.'' + encodeBase64(payload) + ''.'' + encodeBase64(signature)\n\n# token看起来像这样: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI\n```\n\n\n\nJWT常常被用作保护服务端的资源（resource），客户端通常将JWT通过HTTP的`Authorization` header发送给服务端，服务端使用自己保存的key计算、验证签名以判断该JWT是否可信：\n\n```c#\nAuthorization: Bearer eyJhbGci*...<snip>...*yu5CSpyHI\n```\n\n## 准备工作\n\n使用vs2019创建webapi项目，并且安装nuget包\n\n```c#\nMicrosoft.AspNetCore.Authentication.JwtBearer\n```\n\n## Startup类\n\n- ConfigureServices 添加认证服务\n\n```c#\nservices.AddAuthentication(options =>\n            {\n                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n                options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddJwtBearer(options =>\n            {\n                options.SaveToken = true;\n                options.RequireHttpsMetadata = false;\n                options.TokenValidationParameters = new TokenValidationParameters()\n                {\n                    ValidateIssuer = true,\n                    ValidateAudience = true,\n                    ValidAudience = \"https://www.cnblogs.com/chengtian\",\n                    ValidIssuer = \"https://www.cnblogs.com/chengtian\",\n                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"SecureKeySecureKeySecureKeySecureKeySecureKeySecureKey\"))\n                };\n            });\n```\n\n-  Configure 配置认证中间件\n\n`app.UseAuthentication();//认证中间件`\n\n## 创建一个token\n\n添加一个登录model命名为LoginInput\n\n```c#\npublic class LoginInput\n    {\n\n        public string Username { get; set; }\n\n        public string Password { get; set; }\n    }\n```\n\n添加一个认证控制器命名为AuthenticateController\n\n```c#\n[Route(\"api/[controller]\")]\n    public class AuthenticateController : Controller\n    {\n        [HttpPost]\n        [Route(\"login\")]\n        public IActionResult Login([FromBody]LoginInput input)\n        {\n            //从数据库验证用户名，密码 \n            //验证通过 否则 返回Unauthorized\n\n            //创建claim\n            var authClaims = new[] {\n                new Claim(JwtRegisteredClaimNames.Sub,input.Username),\n                new Claim(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString())\n            };\n            IdentityModelEventSource.ShowPII = true;\n            //签名秘钥 可以放到json文件中\n            var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"SecureKeySecureKeySecureKeySecureKeySecureKeySecureKey\"));\n\n            var token = new JwtSecurityToken(\n                   issuer: \"https://www.cnblogs.com/chengtian\",\n                   audience: \"https://www.cnblogs.com/chengtian\",\n                   expires: DateTime.Now.AddHours(2),\n                   claims: authClaims,\n                   signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)\n                   );\n\n            //返回token和过期时间\n            return Ok(new\n            {\n                token = new JwtSecurityTokenHandler().WriteToken(token),\n                expiration = token.ValidTo\n            });\n        }\n    }\n```\n\n## 添加api资源\n\n**利用默认的控制器****WeatherForecastController**\n\n- - 添加个Authorize标签\n  - 路由调整为：[Route(\"api/[controller]\")] 代码如下\n\n```c#\n    [Authorize]\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WeatherForecastController : ControllerBase\n```\n\n到此所有的代码都已经准好了，下面进行运行测试\n\n## 运行项目\n\n**使用postman进行模拟**\n\n1. 发现返回时401未认证，下面获取token\n2. 通过用户和密码获取token\n3. 如果我们的凭证正确，将会返回一个token和过期日期，然后利用该令牌进行访问\n4. 利用token进行请求\n5. 现请求状态200！\n\n原文：[https://www.cnblogs.com/chengtian/p/11927663.html]()',0,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(138,'SqlSugar + NetCore','','\n\n### SqlSugar\n\n[官方文档：http://www.codeisbug.com/Doc/8]()\n\n\n\n### Nuget 安装\n\nSqlSugar是.NET版本，SqlSugarCore是.NET CORE版本，根据你的项目选择你的引用dll\n\n`Install-Package sqlSugar `\n\n`Install-Package sqlSugarCore`\n\n**优点**\n\n很多人都会问您这款ORM有哪些特点,有什么竞争力，我归纳出以上几点供你参考\n\n1、高性能 ,不夸张的说，去掉Sql在数据库执行的时间，SqlSugar是EF数倍性能，另外在批量操作和一对多查询上也有不错的SQL优化\n\n2、高扩展性 ，支持自定义拉姆达函数解析、扩展数据类型、支持自定义实体特性，外部缓存等\n\n### 定义DbContext\n\n```c#\n  public DbContext()\n        {\n            Db = new SqlSugarClient(new ConnectionConfig()\n            {\n                ConnectionString = \"server=localhost;uid=root;pwd=woshishui;database=test\",\n                DbType = DbType.MySql,\n                InitKeyType = InitKeyType.Attribute,//从特性读取主键和自增列信息\n                IsAutoCloseConnection = true,//开启自动释放模式和EF原理一样我就不多解释了\n\n            });\n            //调式代码 用来打印SQL \n            Db.Aop.OnLogExecuting = (sql, pars) =>\n            {\n                Console.WriteLine(sql + \"\\r\\n\" +\n                    Db.Utilities.SerializeObject(pars.ToDictionary(it => it.ParameterName, it => it.Value)));\n                Console.WriteLine();\n            };\n\n        }\n        //注意：不能写成静态的，不能写成静态的\n        public SqlSugarClient Db;//用来处理事务多表查询和复杂的操作\n        public SimpleClient<User> Userdb { get { return new SimpleClient<User>(Db); } }//用来处理Student表的常用操作\n       // public SimpleClient<School> SchoolDb { get { return new SimpleClient<School>(Db); } }//用来处理School表的常用操作\n```\n\n### 使用DbContext完成增删查改\n\nDemoManager\n\n```c#\n  public class DemoManager : DbContext//继承DbContext\n    {\n        public void query()\n        {\n          \n            var data2 = Userdb.GetList();//查询所有\n            var data1 = Userdb.GetById(1);//根据ID查询\n        }\n\n        public void SearchDemo()\n        {\n\n          \n            var data2 = Userdb.GetList();//查询所有\n            var data3 = Userdb.GetList(it => it.id == 1);  //根据条件查询  \n            var data4 = Userdb.GetSingle(it => it.id == 1);//根据条件查询一条\n\n            var p = new PageModel() { PageIndex = 1, PageSize = 2 };// 分页查询\n            var data5 = Userdb.GetPageList(it => it.用户 == \"xx\", p);\n            Console.Write(p.PageCount);//返回总数\n\n\n            // 分页查询加排序\n            var data6 = Userdb.GetPageList(it => it.用户 == \"xx\", p, it => it.用户, OrderByType.Asc);\n            Console.Write(p.PageCount);//返回总数\n\n\n            //组装条件查询作为条件实现 分页查询加排序\n            List<IConditionalModel> conModels = new List<IConditionalModel>();\n            conModels.Add(new ConditionalModel() { FieldName = \"id\", ConditionalType = ConditionalType.Equal, FieldValue = \"1\" });//id=1\n            var data7 = Userdb.GetPageList(conModels, p, it => it.用户, OrderByType.Asc);\n\n            //4.9.7.5支持了转换成queryable,我们可以用queryable实现复杂功能\n            Userdb.AsQueryable().Where(x => x.id == 1).ToList();\n        }\n\n\n        //插入例子\n        public void InsertDemo()\n        {\n\n            var student = new User() { 用户 = \"jack\" };\n            var studentArray = new User[] { student };\n\n            Userdb.Insert(student);//插入\n\n            Userdb.InsertRange(studentArray);//批量插入\n\n            var id = Userdb.InsertReturnIdentity(student);//插入返回自增列\n\n            //4.9.7.5我们可以转成 Insertable实现复杂插入\n           // Userdb.AsInsertable(insertObj).ExecuteCommand();\n        }\n\n\n        //更新例子\n        public void UpdateDemo()\n        {\n            var student = new User() { id = 1, 用户 = \"jack\" };\n            var studentArray = new User[] { student };\n\n            Userdb.Update(student);//根据实体更新\n\n            Userdb.UpdateRange(studentArray);//批量更新\n\n           // Userdb.Update(it => new User() { 用户 = \"a\", CreateTime = DateTime.Now }, it => it.Id == 1);// 只更新Name列和CreateTime列，其它列不更新，条件id=1\n\n            //支持Userdb.AsUpdateable(student)\n        }\n\n        //删除例子\n        public void DeleteDemo()\n        {\n            var student = new User() { id = 1, 用户 = \"jack\" };\n\n            Userdb.Delete(student);//根据实体删除\n            Userdb.DeleteById(1);//根据主键删除\n            Userdb.DeleteById(new int[] { 1, 2 });//根据主键数组删除\n            Userdb.Delete(it => it.id == 1);//根据条件删除\n\n            //支持Userdb.AsDeleteable()\n        }\n\n        //使用事务的例子\n        public void TranDemo()\n        {\n\n            var result = Db.Ado.UseTran(() =>\n            {\n                //这里写你的逻辑\n            });\n            if (result.IsSuccess)\n            {\n                //成功\n            }\n            else\n            {\n                Console.WriteLine(result.ErrorMessage);\n            }\n        }\n\n        //多表查询\n        public void JoinDemo()\n        {\n\n            var list = Db.Queryable<User, User>((st, sc) => new object[] {\n            JoinType.Left,\n            st.用户==sc.用户\n        }).Select<User>().ToList();\n        }\n    }\n```\n\n### 实体类\n\n```c#\n [SugarTable(\"user\")]\n    public class User\n    {\n        //指定主键和自增列，当然数据库中也要设置主键和自增列才会有效\n        [SugarColumn(IsPrimaryKey = true, IsIdentity = true)]\n        public int id { get; set; }\n        public string 用户 { get; set; }\n        public string 密码 { get; set; }\n        public int 权限 { get; set; }\n    }\n```\n\n###  使用\n\n `DemoManager demo = new DemoManager();`\n\n` demo.query();`',1,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(139,'c# 输出心形状代码','','\n\n### c# 输出心形状代码\n\n```c#\n static void Main(string[] args)\n        {\n           \n\n            string outString = \"*\";//输出的字\n            for (int i = 1; i <= 8; i++)\n            {\n                for (int j = 1; j <= 9; j++)\n                {\n                    if (((i == 1) && ((j == 5) || (j == 1) || (j == 9))) || ((i >= 4) && ((j <= i - 3) || (j >= 13 - i))))\n                    {\n                        Console.Write(\"  \");\n                    }\n                    else\n                    {\n                        Console.Write(\" \" + outString);//英文或是字符，符号输出方式\n                         Console.Write(outString);//中文输出方式\n                    }\n                }\n                Console.WriteLine(\"\");\n                Console.ReadLine();\n            }\n\n\n            for (int i = 1; i <= 8; i++)\n            {\n                for (int j = 1; j <= 9; j++)\n                {\n                    if (((i == 1) && ((j == 5) || (j == 1) || (j == 9))) || ((i >= 4) && ((j <= i - 3) || (j >= 13 - i))))\n                    {\n                        Console.Write(\"  \");\n                    }\n                    else\n                    {\n                        Console.Write(\" \" + outString);//英文或是字符，符号输出方式\n                        // Console.Write(outString);//中文输出方式\n                    }\n                }\n                Console.WriteLine(\"\");\n                Console.ReadLine();\n\n            }\n\n            float y, x, z, f;\n            for (y = 1.5f; y > -1.5f; y -= 0.1f)\n            {\n                for (x = -1.5f; x < 1.5f; x += 0.05f)\n                {\n                    z = x * x + y * y - 1;\n                    f = z * z * z - x * x * y * y * y;\n                    Console.Write(f <= 0.0f ? \".:-=+*#%@\"[(int)(f * -8.0f)] : '' '');\n                }\n                Console.WriteLine();\n            }\n\n            Console.Write(\"爱你宝贝\");\n            Console.ReadLine();\n\n\n        }\n```\n\n',0,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(140,'c#文件上传下载功能实现','NuGet 安装SqlSugar 1.Model文件下新建 DbContext 类  public class DbContext     {         public DbContext()         {             Db = new SqlSugarClient(new ConnectionConfig()             {                 ConnectionString = \"server=localhost;uid=root;pwd=woshishui;database=test\",                 DbType = DbType.MySql,                 InitKeyType = InitKeyType.Attribu','# c#文件上传下载功能实现\n\n### NuGet 安装SqlSugar\n\nModel文件下新建 DbContext 类\n\n```c#\npublic class DbContext \n{\n	public DbContext() \n	{\n		Db = new SqlSugarClient(new ConnectionConfig() \n		{\n			ConnectionString = \"server=localhost;uid=root;pwd=woshishui;database=test\",\n			                DbType = DbType.MySql,\n			                InitKeyType = InitKeyType.Attribute,//从特性读取主键和自增列信息\n			IsAutoCloseConnection = true,//开启自动释放模式和EF原理一样我就不多解释了\n			});\n			//调式代码 用来打印SQL \n			Db.Aop.OnLogExecuting = (sql, pars) =>\n			            {\n			                Console.WriteLine(sql + \"rn\" +\n                                  Db.Utilities.SerializeObject(pars.ToDictionary(it => it.ParameterName, it => it.Value)));\n                Console.WriteLine();\n            };\n        }\n        //注意：不能写成静态的，不能写成静态的\n        public SqlSugarClient Db;//用来处理事务多表查询和复杂的操作\n        public SimpleClient<uploading> uploadingdb { get { return new SimpleClient<uploading>(Db); } }//用来处理Student表的常用操作\n    }\n```\n\n### uploading实体类\n\n```c#\n[SugarTable(\"uploading\")]\n   public class uploading\n    {\n        //指定主键和自增列，当然数据库中也要设置主键和自增列才会有效\n        [SugarColumn(IsPrimaryKey = true, IsIdentity = true)]\n        public int id { get; set; }\n        public string name { get; set; }\n        public string path { get; set; }\n    }\n```\n\n### UploadingManager\n\n```c#\n class UploadingManager : DbContext\n    {\n        public List<uploading> Query()\n        {\n            try\n            {\n                List<uploading> data = Db.Queryable<uploading>()\n                    .Select(f => new uploading\n                    {\n                        name = f.name,\n                        path = f.path\n                    })\n                    .ToList();\n                return data;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n                throw;\n            }\n        }\n\n        public List<string> GetName(string name)\n        {\n            List<string> data = Db.Queryable<uploading>()\n                .Where(w=>w.name== name)\n                .Select(f => f.path)\n                .ToList();\n            return data;\n        }\n    }\n```\n\n\n\n### 窗体加载\n\n 读取到数据库字段name并赋值\n\n```c#\n private void Form1_Load(object sender, EventArgs e)\n        {\n            List<uploading> data = uploading.Query();\n            foreach (var data1 in data)\n            {\n                comboBox1.Items.Add(data1.name);\n            }\n            comboBox1.SelectedIndex = 0;\n\n        }\n```\n\n comboBox事件触发条件查询到上传的path\n\n```c#\n private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            List<string> data = uploading.GetName(comboBox1.Text);\n\n            for (int i = 0; i < data.Count; i++)\n            {\n                textBox1.Text = data[0];\n            }\n        }\n```\n\n### 上传事件触发\n\n```c#\n  private void Button1_Click(object sender, EventArgs e)\n        {\n             string path = textBox1.Text;\n            CopyDirs(textBox3.Text,\n                path);\n        }\n```\n\n```c#\n private void CopyDirs(string srcPath, string aimPath)\n        {\n            try\n            {\n                // 检查目标目录是否以目录分割字符结束如果不是则添加\n                if (aimPath[aimPath.Length - 1] != System.IO.Path.DirectorySeparatorChar)\n                {\n                    aimPath += System.IO.Path.DirectorySeparatorChar;\n                }\n                // 判断目标目录是否存在如果不存在则新建\n                if (!System.IO.Directory.Exists(aimPath))\n                {\n                    System.IO.Directory.CreateDirectory(aimPath);\n                }\n                // 得到源目录的文件列表，该里面是包含文件以及目录路径的一个数组\n                // 如果你指向copy目标文件下面的文件而不包含目录请使用下面的方法\n                // string[] fileList = Directory.GetFiles（srcPath）；\n                string[] fileList = System.IO.Directory.GetFileSystemEntries(srcPath);\n                // 遍历所有的文件和目录\n                foreach (string file in fileList)\n                {\n                    // 先当作目录处理如果存在这个目录就递归Copy该目录下面的文件\n                    if (System.IO.Directory.Exists(file))\n                    {\n                        CopyDir(file, aimPath + System.IO.Path.GetFileName(file));\n                        DisplaylistboxMsg(\"上传成功\");\n                    }\n                    // 否则直接Copy文件\n                    else\n                    {\n                        System.IO.File.Copy(file, aimPath + System.IO.Path.GetFileName(file), true);\n                        DisplaylistboxMsg(\"上传成功\");\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                DisplaylistboxMsg(\"上传失败\" + e.Message);\n            }\n        }\n```\n\n### 下载事件触发\n\n```c#\nprivate void Button2_Click(object sender, EventArgs e)\n        {\n            CopyDir(@\"\\\\10.55.2.3\\mech_production_line_sharing\\Test\\\" + textBox2.Text, textBox4.Text);\n        }\n\nprivate void CopyDir(string srcPath, string aimPath)\n        {\n            // 检查目标目录是否以目录分割字符结束如果不是则添加\n            if (aimPath[aimPath.Length - 1] != System.IO.Path.DirectorySeparatorChar)\n            {\n                aimPath += System.IO.Path.DirectorySeparatorChar;\n            }\n\n            // 判断目标目录是否存在如果不存在则新建\n            if (!System.IO.Directory.Exists(aimPath))\n            {\n                System.IO.Directory.CreateDirectory(aimPath);\n            }\n\n            // 得到源目录的文件列表，该里面是包含文件以及目录路径的一个数组\n            // 如果你指向copy目标文件下面的文件而不包含目录请使用下面的方法\n            // string[] fileList = Directory.GetFiles（srcPath）；\n            string[] fileList = System.IO.Directory.GetFileSystemEntries(srcPath);\n            // 遍历所有的文件和目录\n            foreach (string file in fileList)\n            {\n                // 先当作目录处理如果存在这个目录就递归Copy该目录下面的文件\n                if (System.IO.Directory.Exists(file))\n                {\n                    CopyDir(file, aimPath + System.IO.Path.GetFileName(file));\n                    DisplaylistboxMsg(\"下载成功\");\n                }\n                // 否则直接Copy文件\n                else\n                {\n                    System.IO.File.Copy(file, aimPath + System.IO.Path.GetFileName(file), true);\n                    DisplaylistboxMsg(\"下载成功\");\n                }\n            }\n        }\n```\n\n',0,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-10-29 00:00:00'),
(141,'ReSharper使用','ReSharper和谐详细方法： 1.先安装好Resharper；  2.下载完补丁后解压，复制到%LOCALAPPDATA%\\JetBrains\\Installations文件夹下，以管理员身份运行和谐补丁（补丁只支持resharper以用户模式安装，不支持管理员模式安装）；','\n### ReSharper和谐详细方法：\n\n1.先安装好Resharper；\n\n2.下载完补丁后解压，复制到%LOCALAPPDATA%\\JetBrains\\Installations文件夹下，以管理员身份运行和谐补丁（补丁只支持resharper以用户模式安装，不支持管理员模式安装）；\n\n3.打开VS，打开ReSharper的注册窗口：ReSharper->Help->License Information...\n\n### Resharper首选项配置\n\nResharper->Manage Options->Import from File,选择配置文件导入即可。\n\n### Ctrl+Shift+R万般兼重构\n\n1. 封装字段 —— Introduce Field\n2. 提取方法 —— Extract Method\n3. 提取接口 —— Extract Interface （另增加了Extract Superclass提取为基类）\n4. 提升局部变量 —— Introduce Variable\n5. 移除参数 —— 移到Change Signature（改变方法签名）中\n6. 重命名 —— Rename （Resharper会根据对象的类型名称，提供你几个可选的最合适的名称）\n7. 重新排列参数 —— 移到Change Signature（改变方法签名）中\n\nCtrl +Alt + F 格式化代码\n\nAlt+Insert自动生成代码\n\nCtrl + D复制当 前行或选定的块\n\nCtrl + Alt + Insert 添加类\n\nCtrl +F11 查看定义方法\n\n\n\n快速代码定位的核心就是三个功能：\n\n转到定义：Ctrl+B;\n\n查找所有使用：Alt+F7;\n\n从这里浏览：Ctrl+Shift+G.\n\n用Ctrl+F12 找到需要的方法',1,0,'blog/1.jpg',0,19,2,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(142,'c# 执行windows模拟登录','','### 1.登录代码\n\n```c#\n    /// <summary>\n        /// 登录权限\n        /// </summary>\n        /// <param name=\"path\"></param>\n        /// <param name=\"userName\"></param>\n        /// <param name=\"passWord\"></param>\n        /// <returns></returns>\n          public  bool ConnectState(string path, string userName, string passWord)\n        {\n            bool Flag = false;\n            Process proc = new Process();\n            try\n            {\n                proc.StartInfo.FileName = \"cmd.exe\";\n                proc.StartInfo.UseShellExecute = false;\n                proc.StartInfo.RedirectStandardInput = true;\n                proc.StartInfo.RedirectStandardOutput = true;\n                proc.StartInfo.RedirectStandardError = true;\n                proc.StartInfo.CreateNoWindow = true;\n                proc.Start();\n                string dosLine = \"net use \" + path + \" \" + passWord + \" /user:\" + userName;\n                proc.StandardInput.WriteLine(dosLine);\n                proc.StandardInput.WriteLine(\"exit\");\n                while (!proc.HasExited)\n                {\n                    proc.WaitForExit(1000);\n                }\n                string errormsg = proc.StandardError.ReadToEnd();\n                proc.StandardError.Close();\n                if (string.IsNullOrEmpty(errormsg))\n                {\n                    Flag = true;\n                }\n                else\n                {\n                    throw new Exception(errormsg);\n                }\n            }\n            catch (Exception ex)\n            {\n              DisplaylistboxMsg(ex.Message);\n            }\n            finally\n            {\n                proc.Close();\n                proc.Dispose();\n            }\n            return Flag;\n        }\n```\n\n### 2.执行登录\n\n```c#\n private void 登录_Click(object sender, EventArgs e)\n        {\n             bool userbool = ConnectState(@\"\\\\**.**.*.*\",User.Text,Pwd.Text);\n           if (userbool)\n           {\n                DisplaylistboxMsg(\"登录成功：\"+User.Text);\n           }\n           else\n           {\n                DisplaylistboxMsg(\"登录失败\");\n           }\n        }\n```\n\n',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(143,'c#文件压缩解压','','\n\n### 压缩\n\n```js\nprivate void skinButton1_Click(object sender, EventArgs e)\n        {\n            FilesUploadFor.ZipDirectory(foldertozip.Text,zipedfilename.Text);\n            filesUploadFor.DisplaylistboxMsg(\"压缩完成\");\n        }\n```\n\n### ZipDirectory\n\n压缩用的是库函数\n\n```js\n       /// <summary>\n       /// 压缩文件夹\n       /// </summary>\n       /// <param name=\"folderToZip\">需要压缩的文件夹</param>\n       /// <param name=\"zipedFileName\">压缩后的Zip完整文件名</param>\n        public static void ZipDirectory(string folderToZip, string zipedFileName)\n        {\n            ZipDirectory(folderToZip, zipedFileName, string.Empty, true, string.Empty, string.Empty, true);\n        }\n \n        /// <summary>\n        /// 压缩文件夹\n        /// </summary>\n        /// <param name=\"folderToZip\">需要压缩的文件夹</param>\n        /// <param name=\"zipedFileName\">压缩后的Zip完整文件名（如D:\\test.zip）</param>\n        /// <param name=\"isRecurse\">如果文件夹下有子文件夹，是否递归压缩</param>\n        /// <param name=\"password\">解压时需要提供的密码</param>\n        /// <param name=\"fileRegexFilter\">文件过滤正则表达式</param>\n        /// <param name=\"directoryRegexFilter\">文件夹过滤正则表达式</param>\n        /// <param name=\"isCreateEmptyDirectories\">是否压缩文件中的空文件夹</param>\n \n        public static void ZipDirectory(string folderToZip, string zipedFileName, string password, bool isRecurse, string fileRegexFilter, string directoryRegexFilter, bool isCreateEmptyDirectories)\n        {\n            FastZip fastZip = new FastZip();\n            fastZip.CreateEmptyDirectories = isCreateEmptyDirectories;\n            fastZip.Password = password;\n            fastZip.CreateZip(zipedFileName, folderToZip, isRecurse, fileRegexFilter, directoryRegexFilter);\n        }\n```\n\n### 解压缩\n\n```js\n  private void skinButton2_Click(object sender, EventArgs e)\n        {\n            filesUploadFor.UnZip(zipedfilename.Text,\"\");\n             filesUploadFor.DisplaylistboxMsg(\"解压缩完成\");\n        }\n```\n\n### UnZip\n\n解压用的是库函数\n\n```js\n        /// <summary>  \n        /// 功能：解压zip格式的文件。  \n        /// </summary>  \n        /// <param name=\"zipFilePath\">压缩文件路径</param>  \n        /// <param name=\"unZipDir\">解压文件存放路径,为空时默认与压缩文件同一级目录下，跟压缩文件同名的文件夹</param>  \n        /// <returns>解压是否成功</returns>  \n        public void UnZip(string zipFilePath, string unZipDir)\n        {\n            if (zipFilePath == string.Empty)\n            {\n                throw new Exception(\"压缩文件不能为空！\");\n            }\n            if (!File.Exists(zipFilePath))\n            {\n                throw new FileNotFoundException(\"压缩文件不存在！\");\n            }\n            //解压文件夹为空时默认与压缩文件同一级目录下，跟压缩文件同名的文件夹  \n            if (unZipDir == string.Empty)\n                unZipDir = zipFilePath.Replace(Path.GetFileName(zipFilePath), Path.GetFileNameWithoutExtension(zipFilePath));\n            if (!unZipDir.EndsWith(\"/\"))\n                unZipDir += \"/\";\n            if (!Directory.Exists(unZipDir))\n                Directory.CreateDirectory(unZipDir);\n \n            using (var s = new ZipInputStream(File.OpenRead(zipFilePath)))\n            {\n \n                ZipEntry theEntry;\n                while ((theEntry = s.GetNextEntry()) != null)\n                {\n                    string directoryName = Path.GetDirectoryName(theEntry.Name);\n                    string fileName = Path.GetFileName(theEntry.Name);\n                    if (!string.IsNullOrEmpty(directoryName))\n                    {\n                        Directory.CreateDirectory(unZipDir + directoryName);\n                    }\n                    if (directoryName != null && !directoryName.EndsWith(\"/\"))\n                    {\n                    }\n                    if (fileName != String.Empty)\n                    {\n                        using (FileStream streamWriter = File.Create(unZipDir + theEntry.Name))\n                        {\n \n                            int size;\n                            byte[] data = new byte[2048];\n                            while (true)\n                            {\n                                size = s.Read(data, 0, data.Length);\n                                if (size > 0)\n                                {\n                                    streamWriter.Write(data, 0, size);\n                                }\n                                else\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n```\n\n',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-11-01 00:00:00'),
(144,'Swagger配置','添加并配置 Swagger 中间件 将 Swagger 生成器添加到 Startup.ConfigureServices 方法中的 服务集合中：  ConfigureServices  //注册Swagger生成器，定义一个和多个Swagger 文档             services.AddSwaggerGen(c =>                 {                     c.SwaggerDoc(\"1.0\", new OpenApiInfo                     {','\n\n### 添加并配置 Swagger 中间件\n\n将 Swagger 生成器添加到 Startup.ConfigureServices 方法中的 服务集合中：\n\nConfigureServices\n\n```c#\n//注册Swagger生成器，定义一个和多个Swagger 文档\n            services.AddSwaggerGen(c =>\n                {\n                    c.SwaggerDoc(\"1.0\", new OpenApiInfo\n                    {\n                        Title = \" KaiOuYang\", //标题  \n                        Version = \"1.0.1\"  ,   //版本\n                        Description = \"A simple example ASP.NET Core Web API\",\n         \n      \n                    });\n                 \n                    var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n                    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n                    c.IncludeXmlComments(xmlPath,true);\n                });\n```\n\n\n\n在 `Startup.Configure` 方法中，启用中间件为生成的 JSON 文档和 Swagger UI 提供服务：\n\n```c#\n//启用中间件服务生成Swagger作为JSON终结点\n            app.UseSwagger();\n            //启用中间件服务对swagger-ui，指定Swagger JSON终结点\n            app.UseSwaggerUI(c =>\n                {\n                    c.SwaggerEndpoint(\"/swagger/1.0/swagger.json\", \"TE后台管理\");\n                    c.RoutePrefix = string.Empty;\n                });\n```\n\n### 启用XML 注释\n\n可使用以下方法启用 XML 注释：\n\n- 右键单击“解决方案资源管理器”中的项目，然后选择“属性”\n- 查看“生成”选项卡的“输出”部分下的“XML 文档文件”框\n\n启用 XML 注释后会为未记录的公共类型和成员提供调试信息。如果出现很多警告信息 例如，以下消息指示违反警告代码 1591：\n\n`warning CS1591: Missing XML comment for publicly visible type or member ''TodoController.GetAll()''`\n\n\n\n### Swagger UI 显示上述注释代码的 \n\n```c#\n/// <summary>\n /// 这是一个带参数的get请求\n /// </summary>\n /// <remarks>\n /// 例子:\n /// Get api/Values/1\n /// </remarks>\n /// <param name=\"id\">主键</param>\n /// <returns>测试字符串</returns>          \n```\n\n\n\n### 描述响应类型\n\n```c#\n /// <summary>\n /// 这是一个带参数的get请求\n /// </summary>\n /// <remarks>\n /// 例子:\n /// Get api/Values/1\n /// </remarks>\n /// <param name=\"id\">主键</param>\n /// <returns>测试字符串</returns> \n /// <response code=\"201\">返回value字符串</response>\n/// <response code=\"400\">如果id为空</response>  \n // GET api/values/2\n[HttpGet(\"{id}\")]\n[ProducesResponseType(201)]\n[ProducesResponseType(400)]\npublic ActionResult<string> Get(int id)\n{\n     return $\"你请求的 id 是 {id}\";\n}\n```\n\n',0,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(145,'效率利器 AutoHotKey','Download —— 下载 AutoHotkey —— 官网  进入官网，没什么可说的，直接点击 Download 下载安装  安装成功后，是没有任何提示的，直接关闭安装程序即可！  Create a program —— 创建项目 桌面右键→→新建→→ AutoHotkey Script 即可创建一个脚本  新建一个文本文件，修改文件后缀名为 .ahk 格式也行  快捷键定义','\n\n> ### 自动热键\n>\n> 强大。简单易学。\n>\n> Windows的终极自动化脚本语言。\n\n## Download —— 下载\n\n**[AutoHotkey —— 官网](https://www.autohotkey.com/)**\n\n**进入官网，没什么可说的，直接点击 Download 下载安装**\n\n**安装成功后，是没有任何提示的，直接关闭安装程序即可！**\n\n## Create a program —— 创建项目\n\n**桌面右键→→新建→→ AutoHotkey Script 即可创建一个脚本**\n\n**新建一个文本文件，修改文件后缀名为 .ahk 格式也行**\n\n\n\n##  快捷键定义\n\n**;#代表win，**\n\n**+代表shift，^代表Ctrl，**\n\n**！代表Alt ;**\n\n **如果要注释，可以用分号 也可以用/**/**\n\n- ### 1. 热键标记\n\n  `!`：是热键标记，这里的感叹号代表键盘上的 alt 键。\n  `!n`：即对应键盘热键 alt + n。\n\n  常用热键标记对应关系：\n\n  - `#` ：win 键\n  - `!` ：alt\n  - `^` ：ctrl\n  - `+` ：shift\n\n  ### 2. 连接\n\n  符号 `::` 意味着每次按下前面的热键时，随后的命令将会被执行。这里用来连接热键标记和 Run 命令。\n\n  ### 3. Run 命令\n\n  Run 命令：用来启动一个程序、文档、URL 网址或者快捷方式。如：\n\n  ```text\n  Run Notepad\n  Run C:\\My Documents\\Address List.doc\n  Run www.yahoo.com\n  Run mailto:someone@somedomain.com\n  ```\n\n  \n\n  把上面 3 部分组合起来即可实现自定义快捷键。\n\n| Ctrl                   | ^            | ^                             |\n| ---------------------- | ------------ | ----------------------------- |\n| Shift                  | +            | +                             |\n| Alt                    | !            | !                             |\n| Windows键              | #            | #                             |\n| #、^、+、!等           | 一般不用     | {#}、{^}、{+}、{!}等          |\n|                        |              |                               |\n| 左Ctrl、左Shift、左Alt | <^   <+   <! |                               |\n| 右Ctrl、右Shift、右Alt | >^   >+   >! |                               |\n| Enter                  |              | {enter}                       |\n| Tab                    |              | {Tab}                         |\n| F1、F12等              | F1、F12等    | {F1}、{F12}等                 |\n| Esc                    |              | {Esc}或{Escape}               |\n| 空格                   |              | {Space}                       |\n| Backspace              |              | {Backspace}或{BS}             |\n| Delete                 |              | {Delete} or {Del}             |\n| Insert                 |              | {Insert} or {Ins}             |\n| ↑、↓、←、→             |              | {Up}、{Down}、{Left}、{Right} |\n| Home键                 |              | {Home}                        |\n| End键                  |              | {End}                         |\n| PageUp键               |              | {PgUp}                        |\n| PageDown键             |              | {PgDn}                        |\n| CapsLock键             |              | {CapsLock}                    |\n\n## Substitute character —— 替换字符\n\n\n\n**[AutoHotkey —— 中文脚本手册](http://ahkcn.sourceforge.net/docs/AutoHotkey.htm)**\n**我们来一个简单的例子：输入 chinar 自动替换为 `http://www.chinar.xin`**\n\n**在打开的记事本中输入：**\n\n**第一种写法：**\n\n```ahk\n::oyk::http://oykperson.xyz/\n```\n\n**第二种写法：**\n\n```ahk\n::oyk::\nSend http://oykperson.xyz/\nreturn\n::bky::\nSend https://www.cnblogs.com/\nreturn\n```\n\n**AHK语法中： Send 是发送命令， return 是结束**\n\n**保存后，右键文件 →→ Run Script 运行脚本**\n\n**然后，当我们输入文本`chinar` 按下 空格键 / 回车键 / tab 键时，会自动帮我们替换为`http://www.chinar.xin`**\n\n\n\n## **极速打开网页**\n\n```\n#0::Run https://tinypng.com/\n```\n\n**Win+0**\n\n##  自定义快捷键-打开文件或网址\n\n```ruby\n!n::run notepad\n```\n\n```ruby\n!c::run, D:\\SoftwareKit\\_jade_new_soft\\cmd_markdown_win64\\Cmd Markdown.exe\n```\n\n**Alt+n 或+c启动程序**\n\n## **一键拷贝文件路径**\n\n```kotlin\n^+c::\n; null= \nsend ^c\nsleep,200\nclipboard=%clipboard% ;%null%\ntooltip,%clipboard%\nsleep,500\ntooltip,\nreturn\n```\n\n只需要**Ctrl+shift+c**即可拷贝文件路径\n\n## **缩写快速打出常用语**\n\n```ruby\n::/mail::gmail@gmail.com\n::/jeff::http://www.jeffjade.com/\n::/con::console.log();\n::/js::javascript:;\n::/fk::轩先生这会子肯定在忙，请骚后。thx。祝君：天天开心，日日欣悦。\n```\n\n键入`/jeff` 后，再加**空格**、或 **tab**、或**回车**\n\n## **激活/打开/隐藏程序**\n\n```php\n#c::\nIfWinNotExist ahk_class Chrome_WidgetWin_1\n{\n    Run \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\"\n    WinActivate\n}\nElse IfWinNotActive ahk_class Chrome_WidgetWin_1\n{\n    WinActivate\n}\nElse\n{\n    WinMinimize\n}\nReturn\n```\n\n**快捷键：Win+C**\n\n## 音量随心所欲\n\n\n\n```\n;最钟爱代码之音量随心所欲\n;=========================================================\n~lbutton & enter:: ;鼠标放在任务栏，滚动滚轮实现音量的加减\nexitapp  \n~WheelUp::  \nif (existclass(\"ahk_class Shell_TrayWnd\")=1)  \nSend,{Volume_Up}  \nReturn  \n~WheelDown::  \nif (existclass(\"ahk_class Shell_TrayWnd\")=1)  \nSend,{Volume_Down}  \nReturn  \n~MButton::  \nif (existclass(\"ahk_class Shell_TrayWnd\")=1)  \nSend,{Volume_Mute}  \nReturn  \n\nExistclass(class)  \n{  \nMouseGetPos,,,win  \nWinGet,winid,id,%class%  \nif win = %winid%  \nReturn,1  \nElse  \nReturn,0  \n}\n;=========================================================\n```\n\n## 窗口操作\n\n```\n;=========================================================================\n#enter:: ;最大化窗口\nWinGet,S,MinMax,A\nif S=0\n    WinMaximize,A\nelse if S=1\n    WinRestore,A\nelse if S=-1\n    WinRestore,A\nreturn\n\n!enter:: ;最爱代码之窗口置顶\n    WinGet ow, id, A\n    WinTopToggle(ow)\n    return\nWinTopToggle(w) {\n \n    WinGetTitle, oTitle, ahk_id %w%\n    Winset, AlwaysOnTop, Toggle, ahk_id %w%\n    WinGet, ExStyle, ExStyle, ahk_id %w%\n    if (ExStyle & 0x8)  ; 0x8 为 WS_EX_TOPMOST.在WinGet的帮助中\n        oTop = 置顶\n    else\n        oTop = 取消置顶\n    tooltip %oTitle% %oTop%\n    SetTimer, RemoveToolTip, 5000\n    return\n \n    RemoveToolTip:\n    SetTimer, RemoveToolTip, Off\n    ToolTip\n    return\n}\n\n!x:: ;关闭窗口\nsend ^w\nreturn\n\n#c:: ;cosea版以管理员身份打开cmd命令行\nRun *RunAs cmd ,,max\nreturn\n\n#m:: ;窗口最小化\nWinMinimize, A\nreturn\n\n^delete::FileRecycleEmpty ;ctrl+del，清空回收站\n\nF7::\nShutdown, 1 ;关机\n;Shutdown, 2 ;重启\nreturn\n\n;代码之清除所有标点符号================================\nF2:: ;清除所有标点符号，并换行\nrun notepad,,max\nLoop\n{\nStringReplace, clipboard, clipboard, `, , `r`n, UseErrorLevel ;清除英文逗号\nStringReplace, clipboard, clipboard, ， , `r`n, UseErrorLevel ;清除中文逗号\nStringReplace, clipboard, clipboard, `; , `r`n, UseErrorLevel ;清除英文分号\nStringReplace, clipboard, clipboard, ； , `r`n, UseErrorLevel ;清除英文分号\nStringReplace, clipboard, clipboard, . , `r`n, UseErrorLevel ;清除英文句号\nStringReplace, clipboard, clipboard, 。 , `r`n, UseErrorLevel ;清除中文句号\nStringReplace, clipboard, clipboard, : , `r`n, UseErrorLevel ;清除英文冒号\nStringReplace, clipboard, clipboard, ： , `r`n, UseErrorLevel ;清除中文冒号\nStringReplace, clipboard, clipboard, ‘’ , `r`n, UseErrorLevel ;清除中文双引号1\nStringReplace, clipboard, clipboard, “ , `r`n, UseErrorLevel ;清除中文双引号2\nStringReplace, clipboard, clipboard, ” , `r`n, UseErrorLevel ;清除中文双引号3\nStringReplace, clipboard, clipboard, '' , `r`n, UseErrorLevel ;清除英文双引号\nStringReplace, clipboard, clipboard, 、 , `r`n, UseErrorLevel ;清除中文顿号\nStringReplace, clipboard, clipboard, / , `r`n, UseErrorLevel ;清除右斜杠\nStringReplace, clipboard, clipboard, \\ , `r`n, UseErrorLevel ;清除左斜杠\nStringReplace, clipboard, clipboard, - , `r`n, UseErrorLevel ;清除短横线\nStringReplace, clipboard, clipboard, —— , `r`n, UseErrorLevel ;清除长横线\nStringReplace, clipboard, clipboard, = , `r`n, UseErrorLevel ;清除等号\nStringReplace, clipboard, clipboard, + , `r`n, UseErrorLevel ;清除加号\nStringReplace, clipboard, clipboard, （ , `r`n, UseErrorLevel ;清除中文左括号\nStringReplace, clipboard, clipboard, ） , `r`n, UseErrorLevel ;清除中文右括号\nStringReplace, clipboard, clipboard, ( , `r`n, UseErrorLevel ;清除英文左括号\nStringReplace, clipboard, clipboard, ) , `r`n, UseErrorLevel ;清除英文右括号\nStringReplace, clipboard, clipboard, 【 , `r`n, UseErrorLevel ;清除中文【\nStringReplace, clipboard, clipboard, 】 , `r`n, UseErrorLevel ;清除中文】\nStringReplace, clipboard, clipboard, [ , `r`n, UseErrorLevel ;清除[\nStringReplace, clipboard, clipboard, ] , `r`n, UseErrorLevel ;清除]\nStringReplace, clipboard, clipboard, ! , `r`n, UseErrorLevel ;清除英文感叹号\nStringReplace, clipboard, clipboard, ！ , `r`n, UseErrorLevel ;清除中文感叹号\nStringReplace, clipboard, clipboard, ？ , `r`n, UseErrorLevel ;清除中文问号\nStringReplace, clipboard, clipboard, ? , `r`n, UseErrorLevel ;清除英文问号\nStringReplace, clipboard, clipboard, < , `r`n, UseErrorLevel ;清除英文<\nStringReplace, clipboard, clipboard, > , `r`n, UseErrorLevel ;清除英文>\nStringReplace, clipboard, clipboard, 《 , `r`n, UseErrorLevel ;清除中文《\nStringReplace, clipboard, clipboard, 》 , `r`n, UseErrorLevel ;清除英文》\nStringReplace, clipboard, clipboard, @ , `r`n, UseErrorLevel ;清除@\nStringReplace, clipboard, clipboard, # , `r`n, UseErrorLevel ;清除#\nStringReplace, clipboard, clipboard, $ , `r`n, UseErrorLevel ;清除$\nStringReplace, clipboard, clipboard, `% , `r`n, UseErrorLevel ;清除%\nStringReplace, clipboard, clipboard, ^ , `r`n, UseErrorLevel ;清除^\nStringReplace, clipboard, clipboard, & , `r`n, UseErrorLevel ;清除&\nStringReplace, clipboard, clipboard, * , `r`n, UseErrorLevel ;清除*\nStringReplace, clipboard, clipboard, `` , `r`n, UseErrorLevel ;清除`\nStringReplace, clipboard, clipboard, `:: , `r`n, UseErrorLevel ;清除::\nStringReplace, clipboard, clipboard, \" , `r`n, UseErrorLevel ;清除\"\nStringReplace, clipboard, clipboard, { , `r`n, UseErrorLevel ;清除{\nStringReplace, clipboard, clipboard, }, `r`n, UseErrorLevel ;清除}\nStringReplace, clipboard, clipboard, |, `r`n, UseErrorLevel ;清除|\nStringReplace, clipboard, clipboard, ·, `r`n, UseErrorLevel ;清除中文···\nStringReplace, clipboard, clipboard, ~, `r`n, UseErrorLevel ;清除~\nStringReplace, clipboard, clipboard, _ , `r`n, UseErrorLevel ;清除_\n    if ErrorLevel = 0  ; 不需要再进行替换.\n        break\n}\nsleep,200\nsend,^v\nreturn\n\nF8:: ;清除Windows中文件名不能包含下列任何字符： \\ / : * ? \" < > | \nLoop\n{\nStringReplace, clipboard, clipboard, ? , , UseErrorLevel ;清除英文问号\nStringReplace, clipboard, clipboard, * , , UseErrorLevel ;清除*\nStringReplace, clipboard, clipboard, : , , UseErrorLevel ;清除英文冒号\nStringReplace, clipboard, clipboard, \" , , UseErrorLevel ;清除\"\nStringReplace, clipboard, clipboard, < , , UseErrorLevel ;清除英文<\nStringReplace, clipboard, clipboard, > , , UseErrorLevel ;清除英文>\nStringReplace, clipboard, clipboard, / , , UseErrorLevel ;清除右斜杠\nStringReplace, clipboard, clipboard, \\ , , UseErrorLevel ;清除左斜杠\nStringReplace, clipboard, clipboard, |, , UseErrorLevel ;清除|\n    if ErrorLevel = 0  ; 不需要再进行替换.\n        break\n}\nreturn\n\n;神级代码之锁定中英文=============================================\n;功能：输入法状态提示 ;f3强制中文 f4强制英文小写\n;环境：win10+搜狗输入法，输入法状态切换用默认的shift键。\n;作者：kazhafeizhale 知乎@oahgnat11\n#NoEnv ; Recommended for performance and compatibility with future AutoHotkey releases.\nSendMode Input ; Recommended for new scripts due to its superior speed and reliability.\nSetWorkingDir %A_ScriptDir% ; Ensures a consistent starting directory.\n#SingleInstance force\n\nXButton1::^c\nXButton2::^v\n\nF3::\n	SetCapsLockState,off\n	switchime(0)\n	switchime()\nreturn\n\nF4::\n	SetCapsLockState,off\n	switchime(0)\nreturn\n\nswitchime(ime := \"A\")\n{\n    if (ime = 1){\n        DllCall(\"SendMessage\", UInt, WinActive(\"A\"), UInt, 80, UInt, 1, UInt, DllCall(\"LoadKeyboardLayout\", Str,\"00000804\", UInt, 1))\n    }else if (ime = 0)\n    {\n        DllCall(\"SendMessage\", UInt, WinActive(\"A\"), UInt, 80, UInt, 1, UInt, DllCall(\"LoadKeyboardLayout\", Str,, UInt, 1))\n    }else if (ime = \"A\")\n    {\n        ;ime_status:=DllCall(\"GetKeyboardLayout\",\"int\",0,UInt)\n        Send, #{Space}\n    }\n}\n```\n\n## 得到当前选中文件的路径\n\n```\n;=========================================================\n#+c:: ;用快捷键得到当前选中文件的路径\nsend ^c\nsleep,200\nclipboard=%clipboard% ;windows 复制的时候，剪贴板保存的是“路径”。只是路径不是字符串，只要转换成字符串就可以粘贴出来了\ntooltip,%clipboard% ;提示文本\nsleep,500\ntooltip,\nreturn\n;=========================================================\n```\n\n\n\n## 开机自启\n\n把需要开机启动的脚本，放入 “启动” 文件夹即可。\n\n**目录：**{C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup}\n\n## 提示：避免和系统快捷键冲突\n\n> 系统的常用快捷键都是使用Ctrl+XX和Alt+XX来组合的,而Win+XX的很少，所以我们应该尽量使用Win+XX来组合\n\n```text\n/*温馨提示*/\n;Windows系统默认的Win快捷键:\n;Win + E：打开资源管理器;\n;Win + D：显示桌面;\n;Win + F：打开查找对话框;\n;Win + R：打开运行对话框;\n;Win + L：锁定电脑;\n;Win + PauseBreak：打开系统属性对话框;\n;Win + Q: 本地文件 / 网页等搜索;\n;Win + U: 打开控制面板－轻松使用设置中心;\n```',1,0,'blog/1.jpg',0,19,2,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(146,'AutoHotKey 个人整理','',';快捷键替换\n::oyk::\nSend http://oykperson.xyz/\nreturn\n::bky::\nSend https://www.cnblogs.com/\nreturn\n\n;极速打开网页或程序\n#0::Run http://oykperson.xyz/\n#1::Run https://www.cnblogs.com/\n#2::Run http://oykperson.xyz/admin/\n#3::Run http://1.1.1.1/login.html\n#4::Run http://www.codeisbug.com/Doc/8\n#5::Run https://avuejs.com/doc/crud/crud-doc\n#6::Run https://mp.weixin.qq.com/\n\n;======代码输出========================\n::/disp::DisplaylistboxMsg(\"\");\n;创建无返回值函数\n::/pvf:: public void f(){{}{}}\n;创建无返回值函数\n::/pvfs:: public void f(string name){{}{}}\n;创建无返回值函数\n::/pvfi:: public void f(int i){{}{}}\n;创建string值函数\n::/psf:: public string f(){{}{}}\n;创建string值函数\n::/psfs:: public string f(string name){{}{}}\n;创建string值函数\n::/psfi:: public string f(int i){{}{}}\n::/mess:: MessageBox.Show(@\"\");\n::/mysql::   public static string Constr = \"database=test;Password=merryte;user ID=root;server=10.55.22.34\";public static MySqlConnection conn = new MySqlConnection(Constr);\n        \n\n\n::/qqyx:: 851039536@qq.com ;qq邮箱\n::/sjh:: 19820035337 ;手机\n::/wx:: 851039536 ;微信\n\n\n;最钟爱代码之音量随心所欲\n;=========================================================\n~lbutton & enter:: ;鼠标放在任务栏，滚动滚轮实现音量的加减\nexitapp  \n~WheelUp::  \nif (existclass(\"ahk_class Shell_TrayWnd\")=1)  \nSend,{Volume_Up}  \nReturn  \n~WheelDown::  \nif (existclass(\"ahk_class Shell_TrayWnd\")=1)  \nSend,{Volume_Down}  \nReturn  \n~MButton::  \nif (existclass(\"ahk_class Shell_TrayWnd\")=1)  \nSend,{Volume_Mute}  \nReturn  \n\nExistclass(class)  \n{  \nMouseGetPos,,,win  \nWinGet,winid,id,%class%  \nif win = %winid%  \nReturn,1  \nElse  \nReturn,0  \n}\n;=========================================================\n\n;=========================================================\n#+c:: ;用快捷键得到当前选中文件的路径\nsend ^c\nsleep,200\nclipboard=%clipboard% ;windows 复制的时候，剪贴板保存的是“路径”。只是路径不是字符串，只要转换成字符串就可以粘贴出来了\ntooltip,%clipboard% ;提示文本\nsleep,500\ntooltip,\nreturn\n;=========================================================\n\n\n',0,0,'blog/1.jpg',0,19,2,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(147,'Markdown使用技巧','Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。','\n\n## 简介\n\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。\n\nMarkdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。\n\nMarkdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。\n\nMarkdown 编写的文档后缀为 **.md**, **.markdown**。\n\n[原文：菜鸟教程](https://www.runoob.com/markdown/md-tutorial.html)\n\n\n\n\n\n## Markdown 标题\n\n\n\n### 1.使用 = 和 - 标记一级和二级标题  \n\n\n\n```\n我展示的是一级标题\n=================\n\n我展示的是二级标题\n-----------------\n```\n\n\n\n### 2.使用 # 号标记\n\n\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n\n\n## Markdown 段落\n\n\n\n**段落的换行是使用两个以上空格加上回车**\n\n\n\n### 字体\n\n```\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n### 分隔线\n\n```\n***\n\n* * *\n\n*****\n\n- - -\n\n----------\n```\n\n### 删除线\n\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 **~~** 即可，实例如下：\n\n```\nRUNOOB.COM\nGOOGLE.COM\n~~BAIDU.COM~~\n```\n\n### 下划线\n\n下划线可以通过 HTML 的 **** 标签来实现：\n\n```\n<u>带下划线文本</u>\n```\n\n### 脚注\n\n脚注是对文本的补充说明。\n\nMarkdown 脚注的格式如下:\n\n```\n[^要注明的文本]\n```\n\n## Markdown 列表\n\n无序列表使用星号(*****)、加号(**+**)或是减号(**-**)作为列表标记：\n\n```\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n\n有序列表使用数字并加上 **.** 号来表示，如：\n\n```\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n### 列表嵌套\n\n列表嵌套只需在子列表中的选项添加四个空格即可：\n\n```\n1. 第一项：\n    - 第一项嵌套的第一个元素\n    - 第一项嵌套的第二个元素\n2. 第二项：\n    - 第二项嵌套的第一个元素\n    - 第二项嵌套的第二个元素\n```\n\n## Markdown 区块\n\nMarkdown 区块引用是在段落开头使用 **>** 符号 ，然后后面紧跟一个**空格**符号：\n\n```\n> 区块引用\n> 菜鸟教程\n> 学的不仅是技术更是梦想\n```\n\n另外区块是可以嵌套的，一个 **>** 符号是最外层，两个 **>** 符号是第一层嵌套，以此类推：\n\n```\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n\n### 区块中使用列表\n\n区块中使用列表实例如下：\n\n```\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> + 第一项\n> + 第二项\n> + 第三项\n```\n\n### 列表中使用区块\n\n如果要在列表项目内放进区块，那么就需要在 **>** 前添加四个空格的缩进。\n\n区块中使用列表实例如下：\n\n```\n* 第一项\n    > 菜鸟教程\n    > 学的不仅是技术更是梦想\n* 第二项\n```\n\n\n\n## Markdown 代码\n\n如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**），例如：\n\n```\n`printf()` 函数\n```\n\n### 代码区块\n\n代码区块使用 **4 个空格**或者一个**制表符（Tab 键）**。\n\n\n\n你也可以用 **```** 包裹一段代码，并指定一种语言（也可以不指定）：\n\n```\n​```javascript\n$(document).ready(function () {\n    alert(''RUNOOB'');\n});\n​```\n```\n\n\n\n## Markdown 链接\n\n链接使用方法如下：\n\n```\n[链接名称](链接地址)\n\n或者\n\n<链接地址>\n```\n\n例如：\n\n```\n这是一个链接 [菜鸟教程](https://www.runoob.com)\n```\n\n直接使用链接地址：\n\n```\n<https://www.runoob.com>\n```\n\n### 高级链接\n\n我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：\n\n```\n这个链接用 1 作为网址变量 [Google][1]\n这个链接用 runoob 作为网址变量 [Runoob][runoob]\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [runoob]: http://www.runoob.com/\n```\n\n\n\n\n\n## Markdown 图片\n\nMarkdown 图片语法格式如下：\n\n```\n![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 \"可选标题\")\n```\n\n- 开头一个感叹号 !\n- 接着一个方括号，里面放上图片的替代文字\n- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ''title'' 属性的文字。\n\n使用实例：\n\n```\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png)\n\n![RUNOOB 图标](http://static.runoob.com/images/runoob-logo.png \"RUNOOB\")\n```\n\n\n\n当然，你也可以像网址那样对图片网址使用变量:\n\n```\n这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾为变量赋值（网址）\n\n[1]: http://static.runoob.com/images/runoob-logo.png\n```\n\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。\n\n```\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n```\n\n\n\n\n\n## Markdown 表格\n\nMarkdown 制作表格使用 **|** 来分隔不同的单元格，使用 **-** 来分隔表头和其他行。\n\n语法格式如下：\n\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n\n对齐方式\n\n**我们可以设置表格的对齐方式：**\n\n- **-:** 设置内容和标题栏居右对齐。\n- **:-** 设置内容和标题栏居左对齐。\n- **:-:** 设置内容和标题栏居中对齐。\n\n实例如下：\n\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n\n\n\n## Markdown 高级技巧\n\n### 支持的 HTML 元素\n\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`       `等 ，如：\n\n```\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n### 转义\n\nMarkdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：\n\n```\n**文本加粗** \n\\*\\* 正常显示星号 \\*\\*\n```\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n```\n\\   反斜线\n`   反引号\n*   星号\n_   下划线\n{}  花括号\n[]  方括号\n()  小括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   感叹号\n```\n\n### 公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n\n### ypora 画流程图、时序图(顺序图)、甘特图\n\n**1、横向流程图源码格式：**\n\n```\n​```mermaid\ngraph LR\nA[方形] -->B(圆角)\n    B --> C{条件a}\n    C -->|a=1| D[结果1]\n    C -->|a=2| E[结果2]\n    F[横向流程图]\n​```\n```\n\n**2、竖向流程图源码格式：**\n\n```\n​```mermaid\ngraph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n​```\n```\n\n**3、标准流程图源码格式：**\n\n```\n​```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op\n​```\n```\n\n**4、标准流程图源码格式（横向）：**\n\n```\n​```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst(right)->op(right)->cond\ncond(yes)->io(bottom)->e\ncond(no)->sub1(right)->op\n​```\n```\n\n**5、UML时序图源码样例：**\n\n```\n​```sequence\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象A->对象B: 你真的好吗？\n​```\n```\n\n**6、UML时序图源码复杂样例：**\n\n```\n​```sequence\nTitle: 标题：复杂使用\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象B->小三: 你好吗\n小三-->>对象A: 对象B找我了\n对象A->对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩\n​```\n```\n\n**7、UML标准时序图样例：**\n\n```\n​```mermaid\n%% 时序图例子,-> 直线，-->虚线，->>实线箭头\n  sequenceDiagram\n    participant 张三\n    participant 李四\n    张三->王五: 王五你好吗？\n    loop 健康检查\n        王五->王五: 与疾病战斗\n    end\n    Note right of 王五: 合理 食物 <br/>看医生...\n    李四-->>张三: 很好!\n    王五->李四: 你怎么样?\n    李四-->王五: 很好!\n​```\n```\n\n**8、甘特图样例：**\n\n```\n​```mermaid\n%% 语法示例\n        gantt\n        dateFormat  YYYY-MM-DD\n        title 软件开发甘特图\n        section 设计\n        需求                      :done,    des1, 2014-01-06,2014-01-08\n        原型                      :active,  des2, 2014-01-09, 3d\n        UI设计                     :         des3, after des2, 5d\n    未来任务                     :         des4, after des3, 5d\n        section 开发\n        学习准备理解需求                      :crit, done, 2014-01-06,24h\n        设计框架                             :crit, done, after des2, 2d\n        开发                                 :crit, active, 3d\n        未来任务                              :crit, 5d\n        耍                                   :2d\n        section 测试\n        功能测试                              :active, a1, after des3, 3d\n        压力测试                               :after a1  , 20h\n        测试报告                               : 48h\n​```\n```',7,0,'blog/1.jpg',0,28,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(148,'WPF控件库MaterialDesignInXamlToolkit','','\n引用 MaterialDesignThemes.Wpf.dll\n\n**第一步：安装控件库**\n\n```c#\nInstall-Package MaterialDesignThemes\n```\n\n**第二步：配置App.xaml**\n\n你需要合并一个主题（Dark或者Light）到你的资源字典，你只需要添如下代码到你的资源字典就能完成此步骤\n\nLight theme：\n\n```c#\n<ResourceDictionary Source=\"pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml\" />\n```\n\n Dark theme:\n\n```c#\n<ResourceDictionary Source=\"pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml\" />\n```\n\n**第三步：添加色彩**\n\n```c#\n<ResourceDictionary Source=\"pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.COLOR_NAME.xaml\" />\n<ResourceDictionary Source=\"pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.COLOR_NAME.xaml\" />\n```\n\n**App.xaml文件**\n\n```c#\n<Application x:Class=\"MaterialTest.App\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             StartupUri=\"MainWindow.xaml\">\n    <Application.Resources>\n        <ResourceDictionary>\n            <ResourceDictionary.MergedDictionaries>\n\n                <ResourceDictionary Source=\"pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml\" />\n                <ResourceDictionary Source=\"pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml\" />\n                <ResourceDictionary Source=\"pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml\" />\n                <ResourceDictionary Source=\"pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml\" />\n\n            </ResourceDictionary.MergedDictionaries>            \n        </ResourceDictionary>\n    </Application.Resources>\n</Application>\n```\n\n**第四步：配置你的主窗口文件**\n\n\n\n```c#\n<Window [...]\n        TextElement.Foreground=\"{DynamicResource MaterialDesignBody}\"\n        Background=\"{DynamicResource MaterialDesignPaper}\"\n        TextElement.FontWeight=\"Medium\"\n        TextElement.FontSize=\"14\"\n        FontFamily=\"pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto\"\n        [...] >\n```\n\n',2,0,'blog/1.jpg',0,5,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(149,' c#类型转换','','\n## 类型转换\n\n| 序号 | 方法 & 描述                                                  |\n| :--- | :----------------------------------------------------------- |\n| 1    | **ToBoolean** 如果可能的话，把类型转换为布尔型。             |\n| 2    | **ToByte** 把类型转换为字节类型。                            |\n| 3    | **ToChar** 如果可能的话，把类型转换为单个 Unicode 字符类型。 |\n| 4    | **ToDateTime** 把类型（整数或字符串类型）转换为 日期-时间 结构。 |\n| 5    | **ToDecimal** 把浮点型或整数类型转换为十进制类型。           |\n| 6    | **ToDouble** 把类型转换为双精度浮点型。                      |\n| 7    | **ToInt16** 把类型转换为 16 位整数类型。                     |\n| 8    | **ToInt32** 把类型转换为 32 位整数类型。                     |\n| 9    | **ToInt64** 把类型转换为 64 位整数类型。                     |\n| 10   | **ToSbyte** 把类型转换为有符号字节类型。                     |\n| 11   | **ToSingle** 把类型转换为小浮点数类型。                      |\n| 12   | **ToString** 把类型转换为字符串类型。                        |\n| 13   | **ToType** 把类型转换为指定类型。                            |\n| 14   | **ToUInt16** 把类型转换为 16 位无符号整数类型。              |\n| 15   | **ToUInt32** 把类型转换为 32 位无符号整数类型。              |\n| 16   | **ToUInt64** 把类型转换为 64 位无符号整数类型。              |\n\n### 类型转换 int.TryParse() 方法\n\npublic static bool TryParse(string s, out Int32 result);\n\n如果转换成功则返回true。否则返回false\n\nint.TryParse(string s,out int i) 的参数： s是要转换的字符串，i 是转换的结果。\n\n执行成功返回true，输出转换成功的值；执行失败返回0\n\n\n\n### 将string类型转换枚举类型\n\n枚举 字段 = （枚举）Enum.Pares(typeof(枚举)，转换的字段)；\n\n实例：`QQ state = (QQ) Enum.Pares(typeof(QQ )，str);`\n\n### 使用 System.Enum 方法发现和操作枚举值\n\n\n\n```c#\n enum Days { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };\n\nstring s = Enum.GetName(typeof(Days), 4);\n            Console.WriteLine(s);\n\n            Console.WriteLine(\"The values of the Days Enum are:\");\n            foreach (int i in Enum.GetValues(typeof(Days)))\n                Console.WriteLine(i);\n\n            Console.WriteLine(\"The names of the Days Enum are:\");\n            foreach (string str in Enum.GetNames(typeof(Days)))\n                Console.WriteLine(str);\n            Console.ReadKey();\n```\n\n',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(150,'c#数组类型','','### 数组类型\n\n> 在 C# 中，数组实际上是对象，数组是一种数据结构，它包含若干相同类型的变量。\n\n###  数组概述\n\n数组具有以下属性：\n\n- 数组可以是 [一维](ms-xhelp:///?method=page&id=2cec1196-1de0-49d2-baf2-c607c33310e8&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)、  [多维](ms-xhelp:///?method=page&id=020ce02e-7dff-4273-8e53-bf0b33747232&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)或  [交错](ms-xhelp:///?method=page&id=537c65a6-0e0a-4a00-a2b8-086f38519c70&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)的。\n- 数值数组元素的默认值设置为零，而引用元素的默认值设置为 null。\n- 交错数组是数组的数组，因此其元素是引用类型并初始化为 null。\n- 数组的索引从零开始：具有 n 个元素的数组的索引是从  0 到 n-1。\n- 数组元素可以是任何类型，包括数组类型。\n- 数组类型是从抽象基类型 [Array](ms-xhelp:///?method=page&id=t%3asystem.array&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)  派生的 [引用类型](ms-xhelp:///?method=page&id=801cf030-6e2d-4a0d-9daf-1431b0c31f47&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)。  由于此类型实现了 [IEnumerable](ms-xhelp:///?method=page&id=t%3asystem.collections.ienumerable&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)  和 [IEnumerable<  T>  ](ms-xhelp:///?method=page&id=t%3asystem.collections.generic.ienumerable`1&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)，因此可以对 C# 中的所有数组使用[foreach](ms-xhelp:///?method=page&id=5a9c5ddc-5fd3-457a-9bb6-9abffcd874ec&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)  迭代。\n\n### 一维数组\n\n```c#\nint[] array = new int[5];\nstring[] stringArray = new string[6];\n```\n\n> 此数组包含从 array[0] 到 array[4] 的元素。 [new](ms-xhelp:///?method=page&id=e4136516-f058-45a8-84e5-da00a5cf9b6a&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)  运算符用于创建数组并将数组元素初始化为它们的默认值。 在此例中，所有数组元素都初始化为零。\n\n#### 数组初始化\n\n```c#\nint[] array1 = new int[] { 1, 3, 5, 7, 9 };\nstring[] weekDays = { \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" };\n```\n\n### 多维数组\n\n数组可以具有多个维度。 例如，下列声明创建一个四行两列的二维数组。\n\n```c#\nint[,] array = new int[4, 2];\n```\n\n声明创建一个三维（4、2 和 3）数组。\n\n```c#\nint[, ,] array1 = new int[4, 2, 3];\n```\n\n\n\n#### 数组初始化\n\n```c#\n// Two-dimensional array.\nint[,] array2D = new int[,] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } };\n// The same array with dimensions specified.\nint[,] array2Da = new int[4, 2] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } };\n// A similar array with string elements.\nstring[,] array2Db = new string[3, 2] { { \"one\", \"two\" }, { \"three\", \"four\" },\n                                        { \"five\", \"six\" } };\n\n// Three-dimensional array.\nint[, ,] array3D = new int[,,] { { { 1, 2, 3 }, { 4, 5, 6 } }, \n                                 { { 7, 8, 9 }, { 10, 11, 12 } } };\n// The same array with dimensions specified.\nint[, ,] array3Da = new int[2, 2, 3] { { { 1, 2, 3 }, { 4, 5, 6 } }, \n                                       { { 7, 8, 9 }, { 10, 11, 12 } } };\n\n// Accessing array elements.\nSystem.Console.WriteLine(array2D[0, 0]);\nSystem.Console.WriteLine(array2D[0, 1]);\nSystem.Console.WriteLine(array2D[1, 0]);\nSystem.Console.WriteLine(array2D[1, 1]);\nSystem.Console.WriteLine(array2D[3, 0]);\nSystem.Console.WriteLine(array2Db[1, 0]);\nSystem.Console.WriteLine(array3Da[1, 0, 1]);\nSystem.Console.WriteLine(array3D[1, 1, 2]);\n\n// Output:\n// 1\n// 2\n// 3\n// 4\n// 7\n// three\n// 8\n// 12\n```\n\n也可以初始化数组但不指定级别。\n\n```c#\nint[,] array4 = { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } };\n```\n\n如果选择声明一个数组变量但不将其初始化，必须使用 new 运算符将一个数组分配给此变量。 以下示例显示 new  的用法。\n\n```c#\nint[,] array5;\narray5 = new int[,] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } };   // OK\n//array5 = {{1,2}, {3,4}, {5,6}, {7,8}};   // Error\n```\n\n将值分配给特定的数组元素。\n\n```c#\narray5[2, 1] = 25;\n```\n\n将数组元素初始化为默认值（交错数组除外）：\n\n```c#\nint[,] array6 = new int[10, 10];\n```\n\n\n\n### 交错数组\n\n> 交错数组是元素为数组的数组。 交错数组元素的维度和大小可以不同。 交错数组有时称为“数组的数组”。\n\n```c#\nint[][] jaggedArray = new int[3][];\n```\n\n必须初始化 jaggedArray  的元素后才可以使用它。\n\n```c#\njaggedArray[0] = new int[5];\njaggedArray[1] = new int[4];\njaggedArray[2] = new int[2];\n```\n\n每个元素都是一个一维整数数组。 第一个元素是由 5 个整数组成的数组，第二个是由 4 个整数组成的数组，而第三个是由 2  个整数组成的数组。\n\n```c#\njaggedArray[0] = new int[] { 1, 3, 5, 7, 9 };\njaggedArray[1] = new int[] { 0, 2, 4, 6 };\njaggedArray[2] = new int[] { 11, 22 };\n```\n\n声明数组时将其初始化\n\n```c#\nint[][] jaggedArray2 = new int[][] \n{\n    new int[] {1,3,5,7,9},\n    new int[] {0,2,4,6},\n    new int[] {11,22}\n};\n```\n\n访问个别数组元素：\n\n```c#\n// Assign 77 to the second element ([1]) of the first array ([0]):\njaggedArray3[0][1] = 77;\n\n// Assign 88 to the second element ([1]) of the third array ([2]):\njaggedArray3[2][1] = 88;\n```\n\n### 数组使用 foreach\n\n创建一个名为 numbers 的数组，并用 foreach 语句循环访问该数组：\n\n```c#\nint[] numbers = { 4, 5, 6, 1, 2, 3, -2, -1, 0 };\nforeach (int i in numbers)\n{\n    System.Console.Write(\"{0} \", i);\n}\n// Output: 4 5 6 1 2 3 -2 -1 0\n```\n\n多维数组，可以使用相同方法来循环访问元素\n\n```c#\nint[,] numbers2D = new int[3, 2] { { 9, 99 }, { 3, 33 }, { 5, 55 } };\n// Or use the short form:\n// int[,] numbers2D = { { 9, 99 }, { 3, 33 }, { 5, 55 } };\n\nforeach (int i in numbers2D)\n{\n    System.Console.Write(\"{0} \", i);\n}\n// Output: 9 99 3 33 5 55\n```\n\n### 一维数组传递给方法\n\n```c#\nint[] theArray = { 1, 3, 5, 7, 9 };\nPrintArray(theArray);\n```\n\nprint 方法的部分实现。\n\n```c#\nvoid PrintArray(int[] arr)\n{\n    // Method code.\n}\n```\n\n初始化和传递新数组\n\n```c#\nPrintArray(new int[] { 1, 3, 5, 7, 9 });\n```\n\n官方示例\n\n```c#\nclass ArrayClass\n{\n    static void PrintArray(string[] arr)\n    {\n        for (int i = 0; i < arr.Length; i++)\n        {\n            System.Console.Write(arr[i] + \"{0}\", i < arr.Length - 1 ? \" \" : \"\");\n        }\n        System.Console.WriteLine();\n    }\n\n    static void ChangeArray(string[] arr)\n    {\n        // The following attempt to reverse the array does not persist when\n        // the method returns, because arr is a value parameter.\n        arr = (arr.Reverse()).ToArray();\n        // The following statement displays Sat as the first element in the array.\n        System.Console.WriteLine(\"arr[0] is {0} in ChangeArray.\", arr[0]);\n    }\n\n    static void ChangeArrayElements(string[] arr)\n    {\n        // The following assignments change the value of individual array \n        // elements. \n        arr[0] = \"Sat\";\n        arr[1] = \"Fri\";\n        arr[2] = \"Thu\";\n        // The following statement again displays Sat as the first element\n        // in the array arr, inside the called method.\n        System.Console.WriteLine(\"arr[0] is {0} in ChangeArrayElements.\", arr[0]);\n    }\n\n    static void Main()\n    {\n        // Declare and initialize an array.\n        string[] weekDays = { \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" };\n\n        // Pass the array as an argument to PrintArray.\n        PrintArray(weekDays);\n\n        // ChangeArray tries to change the array by assigning something new\n        // to the array in the method. \n        ChangeArray(weekDays);\n\n        // Print the array again, to verify that it has not been changed.\n        System.Console.WriteLine(\"Array weekDays after the call to ChangeArray:\");\n        PrintArray(weekDays);\n        System.Console.WriteLine();\n\n        // ChangeArrayElements assigns new values to individual array\n        // elements.\n        ChangeArrayElements(weekDays);\n\n        // The changes to individual elements persist after the method returns.\n        // Print the array, to verify that it has been changed.\n        System.Console.WriteLine(\"Array weekDays after the call to ChangeArrayElements:\");\n        PrintArray(weekDays);\n    }\n}\n// Output: \n// Sun Mon Tue Wed Thu Fri Sat\n// arr[0] is Sat in ChangeArray.\n// Array weekDays after the call to ChangeArray:\n// Sun Mon Tue Wed Thu Fri Sat\n// \n// arr[0] is Sat in ChangeArrayElements.\n// Array weekDays after the call to ChangeArrayElements:\n// Sat Fri Thu Wed Thu Fri Sat\n```\n\n### 多维数组传递给方法\n\n```c#\nint[,] theArray = { { 1, 2 }, { 2, 3 }, { 3, 4 } };\nPrint2DArray(theArray);\n```\n\n该方法接受一个二维数组作为其参数。\n\n```c#\nvoid Print2DArray(int[,] arr)\n{\n    // Method code.\n}\n```\n\n初始化和传递新数组\n\n```c#\nPrint2DArray(new int[,] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } });\n```\n\n官方示例\n\n```c#\nclass ArrayClass2D\n{\n    static void Print2DArray(int[,] arr)\n    {\n        // Display the array elements.\n        for (int i = 0; i < arr.GetLength(0); i++)\n        {\n            for (int j = 0; j < arr.GetLength(1); j++)\n            {\n                System.Console.WriteLine(\"Element({0},{1})={2}\", i, j, arr[i, j]);\n            }\n        }\n    }\n    static void Main()\n    {\n        // Pass the array as an argument.\n        Print2DArray(new int[,] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } });\n\n        // Keep the console window open in debug mode.\n        System.Console.WriteLine(\"Press any key to exit.\");\n        System.Console.ReadKey();\n    }\n}\n    /* Output:\n        Element(0,0)=1\n        Element(0,1)=2\n        Element(1,0)=3\n        Element(1,1)=4\n        Element(2,0)=5\n        Element(2,1)=6\n        Element(3,0)=7\n        Element(3,1)=8\n    */\n```\n\n### 使用 ref 和 out 传递数组\n\n使用数组类型的 out 参数前必须先为其赋值，即必须由被调用方为其赋值。\n\n```c#\nstatic void TestMethod1(out int[] arr)\n{\n    arr = new int[10];   // definite assignment of arr\n}\n```\n\n与所有的 [ref](ms-xhelp:///?method=page&id=b8a5e59c-907d-4065-b41d-95bf4273c0bd&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)  参数一样，数组类型的 ref 参数必须由调用方明确赋值。 因此不需要由接受方明确赋值。 可以将数组类型的  ref 参数更改为调用的结果。\n\n```c#\nstatic void TestMethod2(ref int[] arr)\n{\n    arr = new int[10];   // arr initialized to a different array\n}\n```\n\n示例\n\n在调用方（Main 方法）中声明数组 theArray，并在  FillArray 方法中初始化此数组。 然后将数组元素返回调用方并显示。\n\n```c#\nclass TestOut\n{\n    static void FillArray(out int[] arr)\n    {\n        // Initialize the array:\n        arr = new int[5] { 1, 2, 3, 4, 5 };\n    }\n\n    static void Main()\n    {\n        int[] theArray; // Initialization is not required\n\n        // Pass the array to the callee using out:\n        FillArray(out theArray);\n\n        // Display the array elements:\n        System.Console.WriteLine(\"Array elements are:\");\n        for (int i = 0; i < theArray.Length; i++)\n        {\n            System.Console.Write(theArray[i] + \" \");\n        }\n\n        // Keep the console window open in debug mode.\n        System.Console.WriteLine(\"Press any key to exit.\");\n        System.Console.ReadKey();\n    }\n}\n    /* Output:\n        Array elements are:\n        1 2 3 4 5        \n    */\n```\n\n在调用方（Main 方法）中初始化数组 theArray，并通过使用 ref  参数将其传递给 FillArray 方法。 在  FillArray 方法中更新某些数组元素。 然后将数组元素返回调用方并显示\n\n```c#\nclass TestRef\n{\n    static void FillArray(ref int[] arr)\n    {\n        // Create the array on demand:\n        if (arr == null)\n        {\n            arr = new int[10];\n        }\n        // Fill the array:\n        arr[0] = 1111;\n        arr[4] = 5555;\n    }\n\n    static void Main()\n    {\n        // Initialize the array:\n        int[] theArray = { 1, 2, 3, 4, 5 };\n\n        // Pass the array using ref:\n        FillArray(ref theArray);\n\n        // Display the updated array:\n        System.Console.WriteLine(\"Array elements are:\");\n        for (int i = 0; i < theArray.Length; i++)\n        {\n            System.Console.Write(theArray[i] + \" \");\n        }\n\n        // Keep the console window open in debug mode.\n        System.Console.WriteLine(\"Press any key to exit.\");\n        System.Console.ReadKey();\n    }\n}\n    /* Output:\n        Array elements are:\n        1111 2 3 4 5555\n    */\n```\n\n### 隐式类型的数组\n\n如何创建隐式类型的数组：\n\n```c#\nclass ImplicitlyTypedArraySample\n{\n    static void Main()\n    {\n        var a = new[] { 1, 10, 100, 1000 }; // int[]\n        var b = new[] { \"hello\", null, \"world\" }; // string[]\n\n        // single-dimension jagged array\n        var c = new[]   \n{  \n    new[]{1,2,3,4},\n    new[]{5,6,7,8}\n};\n\n        // jagged array of strings\n        var d = new[]   \n{\n    new[]{\"Luca\", \"Mads\", \"Luke\", \"Dinesh\"},\n    new[]{\"Karen\", \"Suma\", \"Frances\"}\n};\n    }\n}\n```\n\n创建包含数组的匿名类型时，必须在该类型的对象初始值设定项中对数组进行隐式类型化。 在下面的示例中，contacts  是一个隐式类型的匿名类型数组，其中每个匿名类型都包含一个名为 PhoneNumbers 的数组。  请注意，对象初始值设定项内部未使用 var 关键字。\n\n```c#\nvar contacts = new[] \n{\n    new {\n            Name = \" Eugene Zabokritski\",\n            PhoneNumbers = new[] { \"206-555-0108\", \"425-555-0001\" }\n        },\n    new {\n            Name = \" Hanying Feng\",\n            PhoneNumbers = new[] { \"650-555-0199\" }\n        }\n};\n```\n\n',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(151,'c#冒泡排序','冒泡排序 冒泡排序：就是将一个数组中的元素按照从大到小或者从小到大的排序进行排列。  int[] nums={9,8,7,6,5,4,3,2,1,0}; 0 1 2 3 4 5 6 7 8 9 第一趟比较：8 7 6 5 4 3 2 1 0 9 交换了9次   i=0 j=nums.Length-1-i 第二趟比较：7 6 5 4 3 2 1 0 8 9 交换了8次   i=1 j=nums.Length-1-i 第三趟比较：6 5 4 3 2 1 0 7 8 9 交换了7次   i=2 j=nums.Length-1-i 第四趟比较：5 4 3 2 1 0 6 7 8 9 交换了6次   i=3 j=nums.Length-1-i 第五趟比较：4 3 2 1 0 5 6 7 8 9 交换了5次 第六趟比较：3 2 1 0 4 5 6 7 8 9 交换了4次','### 冒泡排序\n\n冒泡排序：就是将一个数组中的元素按照从大到小或者从小到大的排序进行排列。\n\n```c#\nint[] nums={9,8,7,6,5,4,3,2,1,0}; 0 1 2 3 4 5 6 7 8 9\n第一趟比较：8 7 6 5 4 3 2 1 0 9 交换了9次   i=0 j=nums.Length-1-i\n第二趟比较：7 6 5 4 3 2 1 0 8 9 交换了8次   i=1 j=nums.Length-1-i\n第三趟比较：6 5 4 3 2 1 0 7 8 9 交换了7次   i=2 j=nums.Length-1-i\n第四趟比较：5 4 3 2 1 0 6 7 8 9 交换了6次   i=3 j=nums.Length-1-i\n第五趟比较：4 3 2 1 0 5 6 7 8 9 交换了5次\n第六趟比较：3 2 1 0 4 5 6 7 8 9 交换了4次\n第七趟比较：2 1 0 3 4 5 6 7 8 9 交换了3次\n第八趟比较：1 0 2 3 4 5 6 7 8 9 交换了2次\n第九趟比较：0 1 2 3 4 5 6 7 8 9 交换了1次\n```\n\n[排序实例](https://www.cnblogs.com/qy1234/p/11768501.html)\n\n',2,1,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(152,'wpf开源控件MahApps.Metro','安装 您可以通过NuGet GUI（右键单击您的项目，单击Manage NuGet Packages，选择Online并搜索MahApps.Metro）或使用Package Manager控制台安装MahApps.Metro。  PM> Install-Package MahApps.Metro 或使用软件包管理器控制台：  PM> Install-Package MahApps.Metro -Pre','\n\n### 安装\n\n您可以通过NuGet GUI（右键单击您的项目，单击**Manage NuGet Packages**，选择**Online**并搜索**MahApps.Metro**）或使用Package Manager控制台安装MahApps.Metro。\n\n```c#\nPM> Install-Package MahApps.Metro\n```\n\n或使用软件包管理器控制台：\n\n```c#\nPM> Install-Package MahApps.Metro -Pre\n```\n\n### 造型窗口\n\n您可以使用两种方法使用MahApps.Metro设置Window的样式：\n\n#### 修改XAML文件\n\n安装MahApps.Metro之后：\n\n- 打开 `MainWindow.xaml`\n- 在打开的Window标记内添加此属性。（这是您在XAML中引用其他名称空间的方式）：\n  `xmlns:Controls=\"clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro\"`\n  或\n  `xmlns:Controls=\"http://metro.mahapps.com/winfx/xaml/controls\"`\n- 将`标签更改为`（请记住也要更改结束标签！）\n\n您应该有类似以下内容（请勿复制和粘贴）：\n\n```xaml\n<Controls:MetroWindow x:Class=\"WpfApplication.MainWindow\"\n                      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n                      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n                      xmlns:Controls=\"clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro\"\n                      Title=\"MainWindow\"\n                      Height=\"600\"\n                      Width=\"800\">\n\n  <!-- your content -->\n\n</Controls:MetroWindow>\n```\n\n#### 修改CodeBehind文件\n\n您还需要修改`MainWindow.xaml.cs`文件，以使其基类`MainWindow`与`MetroWindow`XAML文件的类匹配。\n\n```c#\n// To access MetroWindow, add the following reference\nusing MahApps.Metro.Controls;\n\nnamespace WpfApplication\n{\n  public partial class MainWindow : MetroWindow\n  {\n    public MainWindow()\n    {\n      InitializeComponent();\n    }\n  }\n}\n```\n\n但是在大多数情况下，您可以删除基类（因为这是`partial`XAML应该处理的类）：\n\n```c#\nnamespace WpfApplication\n{\n  public partial class MainWindow\n  {\n    public MainWindow()\n    {\n      InitializeComponent();\n    }\n  }\n}\n```\n\n#### 使用内置样式\n\nMahApp.Metro的所有资源都包含在单独的资源词典中。为了使大多数控件采用MahApps.Metro主题，您需要将ResourceDictionaries添加到`App.xaml`。\n\n**App.xaml（v2.0.0及更高版本）**\n\n```xaml\n<Application x:Class=\"WpfApplication.App\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             StartupUri=\"MainWindow.xaml\">\n  <Application.Resources>\n    <ResourceDictionary>\n      <ResourceDictionary.MergedDictionaries>\n        <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->\n        <ResourceDictionary Source=\"pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml\" />\n        <ResourceDictionary Source=\"pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml\" />\n        <!-- Accent and AppTheme setting -->\n        <ResourceDictionary Source=\"pack://application:,,,/MahApps.Metro;component/Styles/Themes/Light.Blue.xaml\" />\n      </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n  </Application.Resources>\n</Application>\n```\n\n**App.xaml（v1.6.5和更低版本）**\n\n```xaml\n<Application x:Class=\"WpfApplication.App\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             StartupUri=\"MainWindow.xaml\">\n  <Application.Resources>\n    <ResourceDictionary>\n      <ResourceDictionary.MergedDictionaries>\n        <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->\n        <ResourceDictionary Source=\"pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml\" />\n        <ResourceDictionary Source=\"pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml\" />\n        <ResourceDictionary Source=\"pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml\" />\n        <!-- Accent and AppTheme setting -->\n        <ResourceDictionary Source=\"pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml\" />\n        <ResourceDictionary Source=\"pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml\" />\n      </ResourceDictionary.MergedDictionaries>\n    </ResourceDictionary>\n  </Application.Resources>\n</Application>\n```',2,0,'blog/1.jpg',0,5,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(153,'一站式WebAPI与认证授权服务','','\n\n保护WEBAPI有哪些方法？\n\n微软官方文档推荐了好几个：\n\n- Azure Active Directory\n- Azure Active Directory B2C (Azure AD B2C)]\n- IdentityServer4\n\n前面两个看着就觉得搞不太明白，第三个倒是非常常见，相关的文章也很多。不过这个东西是独立部署的，太重了，如果我就想写一个简单一点的API，把认证给包括的，是不是有好办法？\n\n### 准备\n\n假设你的WEBAPI使用JWT TOKEN来保存你的认证信息，并且通过JWT TOKEN进行保护。那么我们可以设计一个集成有认证授权的WEBAPI服务，一站式解决问题，代码简单且方便自行修改。\n\n要点：\n\n1. 使用类似[Authorize]的授权，需要基于token中`role`这个Claim来实现。\n2. 密码的保存需要进行特别设计。\n3. 用户对象返回需要避免password和passwordhash的传递。\n\n项目特点：\n\n1. RESTful设计（正常来说api的资源应该是复数userinfos，但是info应该就是不可数的，不纠结了。）\n2. 集成Swagger\n3. ASP.NET Core 3.1\n4. nullable设计\n5. EF Core\n6. 用户权限控制\n7. 密码安全存储\n8. Token实现与API集成\n9. 简单易于理解\n\n### 用户实体类\n\n所有认证之类的工作都在API这边实现，因此我们需要一个userinfo类来进行处理。\n\n```c#\nCopy[DataContract]\n[Table(\"userinfo\")]\npublic class UserInfo\n{\n    [DataMember]\n    [Key]\n    public string UserId { get; set; } = default!;\n    //传输的过程中会用到密码，但是这个密码不应该被存入数据库中。\n    [NotMapped]\n    [DataMember]\n    public string? Password { get; set; }\n    //传输的过程中不会用到密码哈希值，但是哈希值需要存入数据库中。\n    [IgnoreDataMember]\n    public string? PasswordHash { get; set; }\n    [DataMember]\n    public string? Role { get; set; }\n\n    public static string GetRole(string? role)\n    {\n        if (string.IsNullOrWhiteSpace(role)) return \"User\";\n        return role.ToLower() switch\n        {\n            \"administrator\" => \"Administrator\",\n            \"supervisor\" => \"Supervisor\",\n            _ => \"User\"\n        };\n    }\n}\n```\n\n> - 使用json进行序列化，[DataContract]不是必须的，我一般是不喜欢写这个东西，不写的话，那么所有的public属性和字段都会被序列化；如果标记了[DataContract]，那么只有标记有[DataMember]的会被序列化，使用[IgnoreDataMember]可以阻止序列化。\n> - 使用了EF Core用来持久化，标记[NotMapped]指示属性不被映射到数据库中，一般来说，数据库不应该直接保存密码。\n\n### 令牌发放\n\n具体实现TokenController如下。\n\n```c#\nCopy[AllowAnonymous]\n[HttpPost]\npublic ActionResult Post(UserInfo login)\n{\n    ActionResult response = BadRequest(\"登录失败，请检查用户名和密码\");\n    var user = AuthenticateUser(login);\n\n    if (user != null)\n    {\n        var tokenString = GenerateJSONWebToken(user);\n        response = Ok(new { access_token = tokenString, role = user.Role });\n    }\n\n    return response;\n}\n\nprivate string GenerateJSONWebToken(UserInfo userInfo)\n{\n    var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[\"Jwt:Key\"]));\n    var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);\n\n    var claims = new[] {\n        new Claim(JwtRegisteredClaimNames.Sub, userInfo.UserName),\n        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\n        new Claim(ClaimTypes.Role, userInfo.Role),\n    };\n\n    var token = new JwtSecurityToken(null,\n        null,\n        claims,\n        expires: DateTime.Now.AddMinutes(120),\n        signingCredentials: credentials);\n\n    return new JwtSecurityTokenHandler().WriteToken(token);\n}\n\nprivate UserInfo? AuthenticateUser(UserInfo login)\n{\n    UserInfo? user = null;\n    if (string.IsNullOrWhiteSpace(login.Password)) return user;\n\n    using (var context = new ManageDataContext())\n    {\n        var result = context.UserInfos.Where(w => w.UserName.ToLower() == login.UserName.ToLower()).FirstOrDefault();\n        if (result != null)\n            if (PasswordStorage.VerifyPassword(login.Password, result.PasswordHash!)) user = result;\n    }\n\n    return user;\n}\n```\n\n上面的类标志有`AllowAnonymous`，表示这个类是可以匿名访问的，用户先请求post请求token，然后再携带token访问其他API。\n\n> 上面用到一个PasswordStorage的库，这个库使用了加盐哈希的形式存储了密码，实践上比较可靠。值得一提的是它的`VerifyPassword()`函数，使用的比较算法很巧妙，我贴在了文末，推荐大家阅读。\n\n### 受保护的API\n\n被保护的用户管理API如下，只贴了一小部分：\n\n```c#\nCopy[EnableCors(\"AllowAll\")]\n[Route(\"api/[controller]\")]\n//只有角色为Admin可以访问\n[Authorize(Roles = \"Admin\")]\n//如果需要增加种子数据，可以注释上面这行，取消注释下面这一行\n//[AllowAnonymous]\n[ApiController]\npublic class UserInfoController : ControllerBase\n{\n    private readonly ManageDataContext _context;\n    public UserInfoController(ManageDataContext context)\n    {\n        _context = context;\n    }\n\n    /// <summary>\n    /// 有参GET请求\n    /// </summary>\n    /// <param name=\"id\">用户编号id</param>\n    /// <returns></returns>\n    [HttpGet(\"{id}\")]\n    [ProducesResponseType(typeof(UserInfo), Status200OK)]\n    [ProducesResponseType(typeof(string), Status404NotFound)]\n    public async Task<ActionResult> Get(string id)\n    {\n        var res = await _context.UserInfos.FindAsync(id);\n        if (res != null) return Ok(res);\n        else return NotFound(\"Cannot find key.\");\n    }\n}\n```\n\n### 启动配置\n\nStartup.cs注意一下顺序的问题。\n\n```c#\nCopypublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    //实际测试，这个UseCors如果在UseAuthentication和UseAuthorization的后面，可能会导致vue.js访问问题。\n    app.UseCors(\"AllowAll\");\n\n    app.UseAuthentication();\n    app.UseAuthorization();\n}\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_3_0);\n    //使用AddNewtonsoftJson为了避免json的严格检查。\n    services.AddControllers().AddNewtonsoftJson();\n    services.AddDbContext<ManageDataContext>();\n    //后面还有不贴了\n}\n```\n\n在ConfigureServices里面，调用了`AddNewtonsoftJson()`。之所以没有使用到默认的`System.Text.Json`，是因为它对客户端上传的信息要求太严格，如果是integer类型的值，上传使用了string就不能正确识别对象，而`Newtonsoft.Json`没有这个问题。\n\n> 也可以修改`System.Text.Json`的默认行为，但是总是没有那么方便了。\n\n### 调用方法\n\n#### 请求令牌(https://www.cnblogs.com/podolski/p/12737463.html#1871811899)\n\nPOST请求，api/token，设置header：Content-Type为application/json。body内容如下：\n\n```json\nCopy{\n  \"userName\": \"admin\",\n  \"password\": \"123\"\n}\n```\n\n调用即可返回access_token与role。\n\n## 调用被保护的API[#](https://www.cnblogs.com/podolski/p/12737463.html#1662401913)\n\n需要设置header：\n\n- Authorization值为Bearer [获取到的token]\n- Content-Type为application/json\n  然后就可以自由调用自己有权访问的API了。\n\n### 总结\n\n零零散散写了这么些，直接贴上代码，项目是基于asp.net core 3.1与swagger的，本项目也可以作为一些小型项目的模板。\n\n> 需要新建用户的话，可以注释掉[Authorize]或者我已经准备了一个用户admin，密码是123。\n> 如果需要在windows上进行服务部署，可以参考我之前写的TopShelf的[文章](https://www.cnblogs.com/podolski/p/10054286.html)。\n\nGithub[项目地址](https://github.com/circler3/DemoWebAPI)，欢迎Fork或者Star。\n\n### 展望(https://www.cnblogs.com/podolski/p/12737463.html#124683002)\n\n1. token刷新与吊销。\n2. 注册与手机/Email验证。\n\n### 参考资料(https://www.cnblogs.com/podolski/p/12737463.html#2328240139)\n\n1. [密码哈希指南](https://www.freebuf.com/articles/web/28527.html)\n2. [加盐哈希指南](https://crackstation.net/hashing-security.htm#ineffective)\n3. [password-hashing](https://github.com/defuse/password-hashing)\n\n作者： 波多尔斯基\n\n出处：https://www.cnblogs.com/podolski/p/12737463.html\n\n',2,0,'blog/1.jpg',0,4,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(154,'c#方法','','\n\n> 一个方法是把一些相关的语句组织在一起，用来执行一个任务的语句块。\n\n\n### 方法签名\n\n通过指定在 `class` 或 `struct` 中声明方法：\n\n- 可选的访问级别，如 `public` 或 `private`。 默认值为 `private`。\n- 可选的修饰符，如 `abstract` 或 `sealed`。\n- 返回值，或 `void`（如果该方法不具有）。\n- 方法名。\n- 任何方法参数。 方法参数在括号内，并且用逗号分隔。 空括号指示方法不需要任何参数。\n\n### C# 中定义方法\n\n当定义一个方法时，从根本上说是在声明它的结构的元素。在 C# 中，定义方法的语法如下：\n\n```c#\n<Access Specifier> <Return Type> <Method Name>(Parameter List)\n{\n   Method Body\n}\n```\n\n方法的各个元素：\n\n- **Access Specifier**：访问修饰符，这个决定了变量或方法对于另一个类的可见性。\n- **Return type**：返回类型，一个方法可以返回一个值。返回类型是方法返回的值的数据类型。如果方法不返回任何值，则返回类型为 **void**。\n- **Method name**：方法名称，是一个唯一的标识符，且是大小写敏感的。它不能与类中声明的其他标识符相同。\n- **Parameter list**：参数列表，使用圆括号括起来，该参数是用来传递和接收方法的数据。参数列表是指方法的参数类型、顺序和数量。参数是可选的，也就是说，一个方法可能不包含参数。\n- **Method body**：方法主体，包含了完成任务所需的指令集。\n\n 下面的类包含三个方法：\n\n```c#\nabstract class Motorcycle\n{\n    public void StartEngine() { }\n    protected void AddGas(int gallons) {  }\n    public virtual int Drive(int miles, int speed) {  return 1; }\n    public abstract double GetTopSpeed(); \n}\n```\n\n### 方法访问(调用)\n\n在对象上调用方法类似于访问字段。 在对象名称之后，依次添加句点、方法名称和括号。 参数在括号内列出，并用逗号隔开。 因此，可以按以下示例中的方式调用 Motorcycle  类的方法：\n\n```c#\nclass TestMotorcycle : Motorcycle\n{\n    public override double GetTopSpeed()\n    {\n        return 108.4;\n    }\n    static void Main()\n    {\n        TestMotorcycle moto = new TestMotorcycle();\n        moto.StartEngine();\n        moto.AddGas(15);\n        moto.Drive(5, 20);\n        double speed = moto.GetTopSpeed();\n        Console.WriteLine(\"My top speed is {0}\", speed);            \n    }\n}\n```\n\n### 参数传递\n\n当调用带有参数的方法时，您需要向方法传递参数。在 C# 中，有三种向方法传递参数的方式：\n\n| 方式     | 描述                                                         |\n| :------- | :----------------------------------------------------------- |\n| 值参数   | 这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。在这种情况下，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。 |\n| 引用参数 | 这种方式复制参数的内存位置的引用给形式参数。这意味着，当形参的值发生改变时，同时也改变实参的值。 |\n| 输出参数 | 这种方式可以返回多个值。                                     |\n\n### 返回值\n\n> 方法可以向调用方返回值。 如果返回类型（方法名称前列出的类型）不是 void，则方法可以使用 return 关键字来返回值。 如果语句中  return  关键字的后面是与返回类型匹配的值，则该语句将该值返回给方法调用方。 return 关键字还会停止方法的执行。 如果返回类型为 void，则可使用没有值的  return 语句来停止方法的执行。 如果没有 return  关键字，方法执行到代码块末尾时即会停止。 具有非 void 返回类型的方法才能使用  return 关键字返回值。 \n\n\n\n### 异步方法\n\n通过使用异步功能，你可以调用异步方法而无需使用显式回调，也不需要跨多个方法或 lambda 表达式来手动拆分代码。\n\n\n\n异步方法可以具有 [Task](https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task-1)、[Task](https://docs.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task)、 或 `void` 返回类型。 `void` 返回类型主要用于定义需要 `void` 返回类型的事件处理程序。 无法等待返回 `void` 的异步方法，并且返回 void 方法的调用方无法捕获该方法引发的异常。 从 C# 7.0 开始，异步方法可以有[任何类似任务的返回类型](https://docs.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-7#generalized-async-return-types)。\n\n在下面的示例中，`DelayAsync` 是一个异步方法，包含返回整数的 return 语句。 由于它是异步方法，其方法声明必须具有返回类型 `Task`。 因为返回类型是 `Task`，`await` 中 `DoSomethingAsync` 表达式的计算将如以下 `int result = await delayTask` 语句所示得出整数。\n\n\n\n```c#\nusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n    // This Click event is marked with the async modifier.\n    public static void Main()\n    {\n       DoSomethingAsync().Wait();\n    }\n    private static async Task DoSomethingAsync()\n    {\n        int result = await DelayAsync();\n        Console.WriteLine(\"Result: \" + result);\n    }\n    private static async Task<int> DelayAsync()\n    {\n        await Task.Delay(100);\n        return 5;\n    }\n    // Output:\n    //  Result: 5\n}\n// The example displays the following output:\n//        Result: 5\n```\n\n异步方法不能声明任何 [in](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/in-parameter-modifier)、[ref](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref) 或 [out](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/out-parameter-modifier) 参数，但是可以调用具有这类参数的方法。',0,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(155,'c# 类','','### c# 类\n\n> 当你定义一个类时，你定义了一个数据类型的蓝图。这实际上并没有定义任何的数据，但它定义了类的名称意味着什么，也就是说，类的对象由什么组成及在这个对象上可执行什么操作。对象是类的实例。构成类的方法和变量成为类的成员。\n\n### 声明类\n\n```c#\npublic class Customer\n{\n    \n}\n```\n\n------\n\n### 创建对象\n\n通过使用 **new** 关键字（后跟对象将基于的类的名称）可以创建对象。\n\n```c#\nCustomer object1 = new Customer();\n```\n\n### 类继承\n\n继承是通过使用“派生”来实现的，而派生意味着类是使用“基类”声明的，它的数据和行为从基类继承。  通过在派生的类名后面追加冒号和基类名称，可以指定基类\n\n```c#\npublic class Manager : Employee\n{\n   \n}\n```\n\n**注意** 当类声明基类时，它继承基类除构造函数以外的所有成员。\n\n\n\n### 构造函数\n\n类的 **构造函数** 是类的一个特殊的成员函数，当创建类的新对象时执行。\n\n构造函数的名称与类的名称完全相同，它没有任何返回类型。 \n\n```c#\npublic Line()\n   {\n     Console.WriteLine(\"对象已创建\");\n   }\n```\n\n**默认的构造函数**没有任何参数。但是如果你需要一个带有参数的构造函数可以有参数，这种构造函数叫做**参数化构造函数**。\n\n```c#\n public Line(double len) // 参数化构造函数*\n   {\n     Console.WriteLine(\"对象已创建，length = {0}\", len);\n     length = len;\n   }\n```\n\n### 析构函数\n\n类的 **析构函数** 是类的一个特殊的成员函数，当类的对象超出范围时执行。\n\n析构函数的名称是在类的名称前加上一个波浪形（~）作为前缀，它不返回值，也不带任何参数。\n\n析构函数用于在结束程序（比如关闭文件、释放内存等）之前释放资源。析构函数不能继承或重载。\n\n```c#\n public Line() // 构造函数*\n   {\n     Console.WriteLine(\"对象已创建\");\n   }\n   ~Line() *//析构函数*\n   {\n     Console.WriteLine(\"对象已删除\");\n   }\n```\n\n### 密封类\n\n通过在类定义前面放置关键字 sealed，可以将类声明为 [密封](ms-xhelp:///?method=page&id=8e4ed5d3-10be-47db-9488-0da2008e6f3f&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)类\n\n```c#\npublic sealed class D\n{\n    // Class members here.\n}\n```\n\n> 密封类不能用作基类。 因此，它也不能是抽象类。 密封类禁止派生。\n\n\n\n### 部分类\n\n- 处理大型项目时，使一个类分布于多个独立文件中可以让多位程序员同时对该类进行处理。\n- 若要拆分类定义，请使用 [partial](ms-xhelp:///?method=page&id=27320743-a22e-4c7b-b0b3-53afe3607334&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  关键字修饰符\n\n```c#\npublic partial class Employee\n{\n    public void DoWork()\n    {\n    }\n}\n\npublic partial class Employee\n{\n    public void GoToLunch()\n    {\n    }\n}\n```\n\n> 如果将任意部分声明为抽象的，则整个类型都被视为抽象的。如果将任意部分声明为密封的，则整个类型都被视为密封的。如果任意部分声明基类型，则整个类型都将继承该类。',5,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(156,'C# 结构体','','### C# 结构体\n\n> 在 C# 中，结构体是值类型数据结构。它使得一个单一变量可以存储各种数据类型的相关数据。**struct** 关键字用于创建结构体。\n\n\n\n### 定义结构体\n\n```c#\nstruct Books\n{\n   public string title;\n   public string author;\n   public string subject;\n   public int book_id;\n};  \n```\n\n### 结构的用法\n\n```c#\npublic class testStructure\n{\n   public static void Main(string[] args)\n   {\n\n      Books Book1;        /* 声明 Book1，类型为 Book */\n      Books Book2;        /* 声明 Book2，类型为 Book */\n\n      /* book 1 详述 */\n      Book1.title = \"C Programming\";\n      Book1.author = \"Nuha Ali\";\n      Book1.subject = \"C Programming Tutorial\";\n      Book1.book_id = 6495407;\n\n      /* book 2 详述 */\n      Book2.title = \"Telecom Billing\";\n      Book2.author = \"Zara Ali\";\n      Book2.subject =  \"Telecom Billing Tutorial\";\n      Book2.book_id = 6495700;\n\n      /* 打印 Book1 信息 */\n      Console.WriteLine( \"Book 1 title : {0}\", Book1.title);\n      Console.WriteLine(\"Book 1 author : {0}\", Book1.author);\n      Console.WriteLine(\"Book 1 subject : {0}\", Book1.subject);\n      Console.WriteLine(\"Book 1 book_id :{0}\", Book1.book_id);\n\n      /* 打印 Book2 信息 */\n      Console.WriteLine(\"Book 2 title : {0}\", Book2.title);\n      Console.WriteLine(\"Book 2 author : {0}\", Book2.author);\n      Console.WriteLine(\"Book 2 subject : {0}\", Book2.subject);\n      Console.WriteLine(\"Book 2 book_id : {0}\", Book2.book_id);      \n\n      Console.ReadKey();\n\n   }\n}\n```\n\n### 类 vs 结构\n\n类和结构有以下几个基本的不同点：\n\n- 类是引用类型，结构是值类型。\n- 结构不支持继承。\n- 结构不能声明默认的构造函数。\n\n### C# 结构的特点\n\n您已经用了一个简单的名为 Books 的结构。在 C# 中的结构与传统的 C 或 C++ 中的结构不同。C# 中的结构有以下特点：\n\n- 结构可带有方法、字段、索引、属性、运算符方法和事件。\n- 结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数(默认)是自动定义的，且不能被改变。\n- 与类不同，结构不能继承其他的结构或类。\n- 结构不能作为其他结构或类的基础结构。\n- 结构可实现一个或多个接口。\n- 结构成员不能指定为 abstract、virtual 或 protected。\n- 当您使用 **New** 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。\n- 如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。',0,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(157,'C# 继承','','## C# 继承\n\n> 继承（加上封装和多态性）是面向对象的编程的三个主要特性（也称为“支柱”）之一。 继承用于创建可重用、扩展和修改在其他类中定义的行为的新类。 其成员被继承的类称为“基类”，继承这些成员的类称为“派生类”。 派生类只能有一个直接基类。 但是，继承是可传递的。\n\n### 基类和派生类\n\n一个类可以派生自多个类或接口，这意味着它可以从多个基类或接口继承数据和函数。\n\nC# 中创建派生类的语法如下：\n\n```c#\n<访问修饰符符> class <基类>\n{\n ...\n}\nclass <派生类> : <基类>\n{\n ...\n}\n```\n\n假设，有一个基类(父类) Shape，它的派生类（子类）是 Rectangle：\n\n```c#\nusing System;\nnamespace InheritanceApplication\n{\n   class Shape\n   {\n      public void setWidth(int w)\n      {\n         width = w;\n      }\n      public void setHeight(int h)\n      {\n         height = h;\n      }\n      protected int width;\n      protected int height;\n   }\n\n   // 派生类\n   class Rectangle: Shape\n   {\n      public int getArea()\n      {\n         return (width * height);\n      }\n   }\n   \n   class RectangleTester\n   {\n      static void Main(string[] args)\n      {\n         Rectangle Rect = new Rectangle();\n\n         Rect.setWidth(5);\n         Rect.setHeight(7);\n\n         // 打印对象的面积\n         Console.WriteLine(\"总面积： {0}\",  Rect.getArea());\n         Console.ReadKey();\n      }\n   }\n}\n```\n\n### 基类（父类）的初始化\n\n派生类继承了基类的成员变量和成员方法。因此父类对象应在子类对象创建之前被创建。您可以在成员初始化列表中进行父类的初始化。\n\n```c#\nusing System;\nnamespace RectangleApplication\n{\n   class Rectangle\n   {\n      // 成员变量\n      protected double length;\n      protected double width;\n      public Rectangle(double l, double w)\n      {\n         length = l;\n         width = w;\n      }\n      public double GetArea()\n      {\n         return length * width;\n      }\n      public void Display()\n      {\n         Console.WriteLine(\"长度： {0}\", length);\n         Console.WriteLine(\"宽度： {0}\", width);\n         Console.WriteLine(\"面积： {0}\", GetArea());\n      }\n   }//end class Rectangle  \n   class Tabletop : Rectangle\n   {\n      private double cost;\n      public Tabletop(double l, double w) : base(l, w)\n      { }\n      public double GetCost()\n      {\n         double cost;\n         cost = GetArea() * 70;\n         return cost;\n      }\n      public void Display()\n      {\n         base.Display();\n         Console.WriteLine(\"成本： {0}\", GetCost());\n      }\n   }\n   class ExecuteRectangle\n   {\n      static void Main(string[] args)\n      {\n         Tabletop t = new Tabletop(4.5, 7.5);\n         t.Display();\n         Console.ReadLine();\n      }\n   }\n}\n```\n\n### C# 多重继承\n\n多重继承指的是一个类别可以同时从多于一个父类继承行为与特征的功能。与单一继承相对，单一继承指一个类别只可以继承自一个父类。\n\n**C# 不支持多重继承**。但是，您可以使用接口来实现多重继承。',0,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(158,'c# Path路径类','','\n\nPath类是static类型\n\n### 常用方法\n\n```c#\nPath.GetFullPath(file) 取全路径\nPath.GetFileName(file) 取文件名，包含扩展名\nPath.GetFileNameWithoutExtension(file) 取文件名，不包含扩展名\nPath.GetExtension(file) 取扩展名\nPath.GetDirectoryName(file) 取路径名\nPath.GetPathRoot(file)  取盘符\nPath.Combine(file1，file2) 合并2个路径\n```\n\n### 实现\n\n```c#\nstring str = @\"C:\\Users\\Administrator\\Desktop\\ceshi.txt\";\n            //获得文件名\n            Console.WriteLine(Path.GetFileName(str));\n            //获得不包含扩展名的文件名\n            Console.WriteLine(Path.GetFileNameWithoutExtension(str));\n            //获得文件所在文件夹的名称\n            Console.WriteLine(Path.GetDirectoryName(str));\n            //获得文件所在的全路径\n            Console.WriteLine(Path.GetFullPath(str));\n            //拼接路径字符串\n            Console.WriteLine(Path.Combine(@\"D:\\a\\b\\\",\"c.txt\"));\n            Console.ReadKey();\n```\n\n### 属性方法\n\n| 属性或方法                                            | 作用                                     |\n| ----------------------------------------------------- | ---------------------------------------- |\n| string ChangeExtension(string path, string extension) | 更改路径字符串的扩展名                   |\n| string Combine(params string[] paths)                 | 将字符串数组组合成一个路径               |\n| string Combine(string path1, string path2)            | 将两个字符串组合成一个路径               |\n| string GetDirectoryName(string path)                  | 返回指定路径字符串的目录信息             |\n| string GetExtension(string path)                      | 返回指定路径字符串的扩展名               |\n| string GetFileName(string path)                       | 返回指定路径字符串的文件名和扩展名       |\n| string GetFileNameWithoutExtension(string path)       | 返回不具有扩展名的指定路径字符串的文件名 |\n| string GetFullPath(string path)                       | 返回指定路径字符串的绝对路径             |\n| char[] GetInvalidFileNameChars()                      | 获取包含不允许在文件名中使用的字符的数组 |\n| char[] GetInvalidPathChars()                          | 获取包含不允许在路径名中使用的字符的数组 |\n| string GetPathRoot(string path)                       | 获取指定路径的根目录信息                 |\n| string GetRandomFileName()                            | 返回随机文件夹名或文件名                 |\n| string GetTempPath()                                  | 返回当前用户的临时文件夹的路径           |\n| bool HasExtension(string path)                        | 返回路径是否包含文件的扩展名             |\n| bool IsPathRooted(string path)                        | 返回路径字符串是否包含根                 |\n\n',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(159,'C# File文件类','','\n\n## C# File文件类\n\nC# 语言中 File 类同样可以完成与 FileInfo 类相似的功能，但 File 类中也提供了一些不同的方法。\n\nFile 类中获取或设置文件信息的常用方法如下表所示。\n\n| 属性或方法                                                   | 作用                                   |\n| ------------------------------------------------------------ | -------------------------------------- |\n| DateTime GetCreationTime(string path)                        | 返回指定文件或目录的创建日期和时间     |\n| DateTime GetLastAccessTime(string path)                      | 返回上次访问指定文件或目录的日期和时间 |\n| DateTime GetLastWriteTime(string path)                       | 返回上次写入指定文件或目录的日期和时间 |\n| void SetCreationTime(string path, DateTime creationTime)     | 设置创建该文件的日期和时间             |\n| void SetLastAccessTime(string path, DateTime lastAccessTime) | 设置上次访问指定文件的日期和时间       |\n| void SetLastWriteTime(string path, DateTime lastWriteTime)   | 设置上次写入指定文件的日期和时间       |\n\n### File类的方法\n\n创建文件：File.Create(@\"文件路径\");\n        删除文件（彻底删除）：File.Delete(@\"文件路径\");\n        复制文件内容：File.Copy(被复制文件路径,新文件路径);\n        剪切文件：File.Move(被剪切文件路径,新文件路径);\n\n以字节形式读取文件：返回字节数组（可以读取任何文件）\n\n\n\n```c#\nbyte[] buffer = File.ReadAllBytes(@\"文件路径\");  //返回值为字节数组\n//将字节解码，先确定编码方式，再解码字节数组\nstring s = Encoding.GetEncoding(\"编码方式\").GetString(buffer);\nConsole.WriteLine(s); \n```\n\n以字节形式写入文件：\n\n```c#\nstring s = \"今天生活美滋滋\";  //需要写入文件的字符串\n//把字符串用编码转成字节数组\nbyte[] buffer = Encoding.GetEncoding(\"编码方式\").GetByte(s);\nFile.WriteAllBytes(@\"文件路径\",buffer);\n```\n\n以行的形式读取文件内容：返回字符串数组（只能读文本文件，不能读取音乐文件或其他多媒体文件）\n\n```c#\nstring[] str = File.ReadAllLines(@\"文件路径\",Encoding.GetEncoding(\"编码方式\"));\nforeach(string s in str){\n	Console.WriteLine(s);  //一次输出一行\n}\n```\n\n以字符串形式读取文件内容：返回字符串（只能读文本文件，不能读取音乐文件或其他多媒体文件）\n\n```c#\nstring s = File.ReadAllText(@\"文件路径\",字符串,Encoding.GetEncoding(\"编码方式\"));\n```\n\n以行形式写入文件：\n\n```c#\nFile.WriteAllLines(@\"文件路径\",字符串数组,Encoding.GetEncoding(\"编码方式\"));\n```\n\n以字符串形式写入文件内容：\n\n```c#\nFile.WriteAllText(@\"文件路径\",Encoding.GetEncoding(\"编码方式\"));\n```\n\n',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(160,'C# FileStream类','','## C# FileStream类\n\n> 在 C# 语言中文件读写流使用 FileStream 类来表示，FileStream 类主要用于文件的读写，不仅能读写普通的文本文件，还可以读取图像文件、声音文件等不同格式的文件。区别于File类的是它对文件可进行分步读写，减小内存压力，缺点是我们需要手动的关闭和释放资源，\n\n## FileAccess \n\nFileAccess 枚举类型主要用于设置文件的访问方式，具体的枚举值如下。\n\n- Read：以只读方式打开文件。\n- Write：以写方式打开文件。\n- ReadWrite：以读写方式打开文件。\n\n## FileMode \n\nFileMode 枚举类型主要用于设置文件打开或创建的方式，具体的枚举值如下。\n\n- CreateNew：创建新文件，如果文件已经存在，则会抛出异常。\n- Create：创建文件，如果文件不存在，则删除原来的文件，重新创建文件。\n- Open：打开已经存在的文件，如果文件不存在，则会抛出异常。\n- OpenOrCreate：打开已经存在的文件，如果文件不存在，则创建文件。\n- Truncate：打开已经存在的文件，并清除文件中的内容，保留文件的创建日期。如果文件不存在，则会抛出异常。\n- Append：打开文件，用于向文件中追加内容，如果文件不存在，则创建一个新文件。\n\n## FileShare \n\nFileShare 枚举类型主要用于设置多个对象同时访问同一个文件时的访问控制，具体的枚举值如下。\n\n- None：谢绝共享当前的文件。\n- Read：允许随后打开文件读取信息。\n- ReadWrite：允许随后打开文件读写信息。\n- Write：允许随后打开文件写入信息。\n- Delete：允许随后删除文件。\n- Inheritable：使文件句柄可由子进程继承。\n\n## FileOptions \n\nFileOptions 枚举类型用于设置文件的高级选项，包括文件是否加密、访问后是否删除等，具体的枚举值如下。\n\n- WriteThrough：指示系统应通过任何中间缓存、直接写入磁盘。\n- None：指示在生成 System.IO.FileStream 对象时不应使用其他选项。\n- Encrypted：指示文件是加密的，只能通过用于加密的同一用户账户来解密。\n- DeleteOnClose：指示当不再使用某个文件时自动删除该文件。\n- SequentialScan：指示按从头到尾的顺序访问文件。\n- RandomAccess：指示随机访问文件。\n- Asynchronous：指示文件可用于异步读取和写入。\n\n\nFileStream 类的构造方法有很多，这里介绍一些常用的构造方法，如下表所示。\n\n| 构造方法                                                     | 说明                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| FileStream(string path, FileMode mode)                       | 使用指定路径的文件、文件模式创建 FileStream 类的实例         |\n| FileStream(string path, FileMode mode, FileAccess access)    | 使用指定路径的文件、文件打开模式、文件访问模式创建 FileStream 类的实例 |\n| FileStream(string path, FileMode mode, FileAccess access, FileShare share) | 使用指定的路径、创建模式、读写权限和共享权限创建 FileStream 类的一个新实例 |\n| FileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options) | 使用指定的路径、创建模式、读写权限和共享权限、其他 文件选项创建 FileStream 类的实例 |\n\n##  FileStream\n\n| 属性或方法                                      | 作用                                                         |\n| ----------------------------------------------- | ------------------------------------------------------------ |\n| bool CanRead                                    | 只读属性，获取一个值，该值指示当前流是否支持读取             |\n| bool CanSeek                                    | 只读属性，获取一个值，该值指示当前流是否支持查找             |\n| bool CanWrite                                   | 只读属性，获取一个值，该值指示当前流是否支持写入             |\n| bool IsAsync                                    | 只读属性，获取一个值，该值指示 FileStream 是异步还 是同步打开的 |\n| long Length                                     | 只读属性，获取用字节表示的流长度                             |\n| string Name                                     | 只读属性，获取传递给构造方法的 FileStream 的名称             |\n| long Position                                   | 属性，获取或设置此流的当前位置                               |\n| int Read(byte[] array, int offset, int count)   | 从流中读取字节块并将该数据写入给定缓冲区中                   |\n| int ReadByte()                                  | 从文件中读取一个字节，并将读取位置提升一个字节               |\n| long Seek(lorig offset, SeekOrigin origin)      | 将该流的当前位置设置为给定值                                 |\n| void Lock(long position, long length)           | 防止其他进程读取或写入 System.IO.FileStream                  |\n| void Unlock(long position, long length)         | 允许其他进程访问以前锁定的某个文件的全部或部分               |\n| void Write(byte[] array, int offset, int count) | 将字节块写入文件流                                           |\n| void WriteByte(byte value)                      | 将一个字节写入文件流中的当前位置                             |\n\n## File和FileStream的区别\n\nFile是一个静态类；FileStream是一个非静态类。\n\nFile：是一个**文件**的类，对文件进行操作。其内部封装了对文件的各种操作(MSDN:提供用于创建、复制、删除、移动和打开单一文件的静态方法，并协助创建FileStream对象)。\n\n　　FileStream:**文件流**的类。对txt，xml，avi等文件进行内容写入、读取、复制...时候需要使用的一个工具。\n\n## 创建实例\n\n```c#\nstring path = \"D:\\\\test.txt\";\n\nFileStream fileStream1 = **new** FileStream(path, FileMode.Open);\n\nFileStream fileStream2 = **new** FileStream(path, FileMode.Open, FileAccess.Read);\n\nFileStream fileStream3 = **new** FileStream(path, FileMode.Open, FileAccess.ReadWrite, FileShare.Read);\n\nFileStream fileStream4 = **new** FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read, 10, FileOptions.None);\n```\n\n```c#\n        //定义文件路径\n        string path = @\"D:\\\\code\\\\test.txt\";\n        //创建 FileStream 类的实例\n        FileStream fileStream = new FileStream(path, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);\n        //定义属性\n        string msg = \"11111\";\n        //将字符串转换为字节数组\n        byte[] bytes = Encoding.UTF8.GetBytes(msg);\n        //向文件中写入字节数组\n        fileStream.Write(bytes, 0, bytes.Length);\n        //刷新缓冲区\n        fileStream.Flush();\n        //关闭流\n        fileStream.Close();\n```\n\n\n\n```c#\nclass Program\n{\n    static void Main(string[] args)\n    {\n        //定义文件路径\n        string path = @\"D:\\\\code\\\\test.txt\";\n        //判断是否含有指定文件\n        if (File.Exists(path))\n        {\n            FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read);\n            //定义存放文件信息的字节数组\n            byte[] bytes = new byte[fileStream.Length];\n            //读取文件信息\n            fileStream.Read(bytes, 0, bytes.Length);\n            //将得到的字节型数组重写编码为字符型数组\n            char[] c = Encoding.UTF8.GetChars(bytes);\n            //输出\n            Console.WriteLine(c);\n            //关闭流\n            fileStream.Close();\n        }\n        else\n        {\n            Console.WriteLine(\"不存在！\");\n        }\n    }\n}\n```\n\n\n\n## 文件复制\n\n```c#\n public class FileSreamTest\n    {\n        \n\n        public static void CopyFile(string source,string target)\n        {\n            //读取文件流\n            using (FileStream fsRead = new FileStream(source,FileMode.Open,FileAccess.Read))\n            {\n                //写入流\n                using (FileStream fsWrite = new FileStream(target,FileMode.OpenOrCreate,FileAccess.Write))\n                {\n                     byte[] buffer = new byte[1024*1024*5];\n\n                     while (true)\n                     { \n                         //返回读取字节数\n                        int r= fsRead.Read(buffer,0,buffer.Length);\n                        if (r==0)\n                        {\n                            break;\n                        }\n                         //写入\n                         fsWrite.Write(buffer,0,r);\n                     }\n                    \n                }\n            }\n        }\n\n    }\n\n\n\n   static void Main(string[] args)\n        {\n          string source =@\"E:\\功能流程.7z\";\n          string target=@\"C:\\Users\\CH190006\\Desktop\\Test\\功能流程.7z\";\n          FileSreamTest.CopyFile(source,target);\n            Console.ReadKey();\n\n        }\n```\n\n',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(161,'C# 多态性','多态性常被视为自封装和继承之后，面向对象的编程的第三个支柱。 Polymorphism（多态性）是一个希腊词，指“多种形态”','## C# 多态性\n\n多态性常被视为自封装和继承之后，面向对象的编程的第三个支柱。 Polymorphism（多态性）是一个希腊词，指“多种形态”，\n\n**多态：**一个接口多个功能。\n\n**静态多态性：**编译时发生函数响应（调用）；\n\n**动态多态性：**运行时发生函数响应。\n\n**静态绑定（早期绑定）：**编译时函数和对象的连接机制。 两种技术实现静态多态性：函数重载/运算符重载。\n\n**函数重载：**在同一范围内对相同函数名有多个定义，可以是参数类型或参数个数的不同，但不许只有返回值类型不同。\n\n**运算符重载：**\n\n关键字 abstract 声明抽象类：用于接口部分类的实现（派生类继承抽象类时，实现完成）。抽象类包含抽象方法，抽象方法可被派生类实现。\n\n## 多态实现\n\n实现多态三种方式：\n\n## 抽象类\n\nC# 允许您使用关键字 **abstract** 创建抽象类，用于提供接口的部分类的实现。当一个派生类继承自该抽象类时，实现即完成。**抽象类**包含抽象方法，抽象方法可被派生类实现。派生类具有更专业的功能。\n\n请注意，下面是有关抽象类的一些规则：\n\n- 抽象类不能实例化。\n- 不能在一个抽象类外部声明一个抽象方法。\n- 通过在类定义前面放置关键字 **sealed**，可以将类声明为**密封类**。当一个类被声明为 **sealed** 时，它不能被继承。抽象类不能被声明为 sealed。\n\n```c#\npublic abstract class A\n{\n    public abstract void DoWork(int i);\n}\n\npublic class B : A\n{\n    public override void DoWork(int i)\n    {\n        // New implementation.\n    }\n}\n\n//main\nA a= new B();\na.Dowirk(1);\n\n```\n\n## 接口类\n\n使用接口可以在类中包括来自多个源的行为。 由于C#语言不支持多重继承，所以该功能很重要。  此外，如果要模拟结构的继承，也必须使用接口，因为它们无法实际从另一个结构或类继承。\n\n一个类能同时实现多个接口，还能在实现接口的同时再继承其他类，并且接口之间也可以继承。\n\n### 接口定义\n\n```c#\ninterface  接口名称\n{\n    接口成员；\n}\n\ninterface IEquatable<T>\n{\n    bool Equals(T obj);\n}\n\n```\n\n接口是一种规范。\n\n为了多态，接口不能被实例化。\n\n接口不能添加访问修饰符，默认公开（piblic）。\n\n接口只能有，方法，属性，索引器，事件，不能有字段和构造函数。\n\n接口与接口直接可以被继承，且可以多继承。\n\n接口不能继承类，类可以继承接口\n\n实现接口的子类必须实现该接口的全部成员\n\n一个类可以同时继承一个类并实现多个接口\n\n### 显示实现\n\n实现目的：解决方法重命名问题\n\n什么时候实现：当继承接口中的方法和参数一模一样时\n\n```c#\ninterface ILeft\n{\n    int P { get;}\n}\ninterface IRight\n{\n    int P();\n}\n```\n\n为了同时实现两个接口，类必须对属性 P 和/或方法 P 使用显式实现以避免编译器错误。\n\n```c#\nclass Middle : ILeft, IRight\n{\n    public int P() { return 0; }\n    int ILeft.P { get { return 0; } }\n}\n```\n\n## 虚方法\n\n类中定义的允许在派生类中重写的方法，使用virtual关键字定义\n\n```c#\n // Virtual method\n    public virtual void Draw()\n    {\n        Console.WriteLine(\"Performing base class drawing tasks\");\n    }\n\n\nclass Circle : Shape\n{\n    public override void Draw()\n    {\n        // Code to draw a circle...\n        Console.WriteLine(\"Drawing a circle\");\n        base.Draw();\n    }\n}\n\n\n```\n\n',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(162,'C#访问修饰符','','### C#访问修饰符\n\n在 C#语言中类定义后就要确定类中包含的内容，类中包含的内容被称为类中的成员。\n\n类中的成员包括字段、属性、方法。每个类成员在定义时需要指定访问修饰符、修饰符。\n\n可使用访问修饰符指定以下六个可访问性级别：\n\n- [`public`](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/public)：访问不受限制。\n- [`protected`](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected)：访问限于包含类或派生自包含类的类型。\n- [`internal`](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/internal)：访问限于当前程序集。\n- [`protected internal`](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/protected-internal)：访问限于当前程序集或派生自包含类的类型。\n- [`private`](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private)：访问限于包含类型。\n- [`private protected`](https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/private-protected)：访问限于包含类或派生自当前程序集中包含类的类型。',1,0,'blog/1.jpg',0,23,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(163,'netcore数据连接配置','','\n\n### 第一种\n\n### appsettings.json\n\n```json\n{\n\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=localhost;database=typecho;uid=root;pwd=woshishui;\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n\n```\n\n\n\n### ConfigureServices\n\n```c#\n￼ services.AddDbContext<typechoContext>(options=>options.UseMySql(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n\n```\n\n\n\n### 第二种\n\n### ConfigureServices\n\n```c#\n      // other service configurations go here\n            // replace \"YourDbContext\" with the class name of your DbContext\nservices.AddDbContextPool<typechoContext>(options => options\n            //     // replace with your connection string          .UseMySql(\"Server=localhost;Database=typecho;User=root;Password=woshishui;\", mySqlOptions => mySqlOptions\n            //         // replace with your Server Version and Type\n    .ServerVersion(new ServerVersion(new Version(8, 0, 19), ServerType.MySql))\n            //     ));\n```\n\n\n\n\n\n',9,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(164,'Web API 约定','','\n\n### 默认的约定\n\n集将应用于 ContactsConventionController 中的所有操作：\n\n```c#\n[ApiController]\n[ApiConventionType(typeof(DefaultApiConventions))]\n[Route(\"api/[controller]\")]\npublic class ContactsConventionController : ControllerBase\n{\n```\n\n默认的约定集将应用于程序集中的所有操作：\n\n```c#\n[assembly: ApiConventionType(typeof(DefaultApiConventions))]\nnamespace ApiConventions\n{\n    public class Startup\n    {\n```\n\n### 创建 Web API 约定\n\n如果默认 API 约定不能满足需要，请创建自己的约定。 约定是：\n\n- 带有方法的静态类型。\n- 能够对操作定义[响应类型](https://docs.microsoft.com/zh-cn/aspnet/core/web-api/advanced/conventions?view=aspnetcore-3.1#response-types)和[命名要求](https://docs.microsoft.com/zh-cn/aspnet/core/web-api/advanced/conventions?view=aspnetcore-3.1#naming-requirements)。\n\n### 响应类型\n\n这些方法使用 `[ProducesResponseType]` 或 `[ProducesDefaultResponseType]` 属性进行批注。 例如：\n\nC#复制\n\n```csharp\npublic static class MyAppConventions\n{\n    [ProducesResponseType(StatusCodes.Status200OK)]\n    [ProducesResponseType(StatusCodes.Status404NotFound)]\n    public static void Find(int id)\n    {\n    }\n}\n```\n\n如果没有更具体的元数据属性，则将此约定应用于程序集可强制实现以下内容：\n\n- 该约定方法应用于所有名为 `Find` 的操作。\n- `id` 操作上存在名为 `Find` 的参数。\n\n### 命名要求\n\n`[ApiConventionNameMatch]` 和 `[ApiConventionTypeMatch]` 属性可应用于约定方法，确定它们所要应用的操作。 例如：\n\nC#复制\n\n```csharp\n[ProducesResponseType(StatusCodes.Status200OK)]\n[ProducesResponseType(StatusCodes.Status404NotFound)]\n[ApiConventionNameMatch(ApiConventionNameMatchBehavior.Prefix)]\npublic static void Find(\n    [ApiConventionNameMatch(ApiConventionNameMatchBehavior.Suffix)]\n    int id)\n{ }\n```\n\n在上面的示例中：\n\n- 应用于该方法的 `Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior.Prefix` 选项表示该约定可匹配前缀是“Find”的任何操作。 匹配的操作可以是 `Find`、`FindPet` 和 `FindById`。\n- 应用于该参数的 `Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior.Suffix` 表示该约定可匹配带有唯一以标识符作为后缀结尾的参数的方法。 示例包括 `id` 或 `petId` 等参数。 与此类似，可将 `ApiConventionTypeMatch` 应用于类型，以约束参数类型。 `params[]` 参数指示无需显式匹配的剩余参数。',3,0,'blog/1.jpg',0,4,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(165,'EFCore数据操作','','## EFCore数据操作\n\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Typecho.Enties.Models;\nusing Typecho.IService;\nusing Typecho.Repository;\nusing Typecho.Service;\nusing TypechoCore1.Jwt;\nusing TypechoCore1.Jwt.Filter;\nusing static TypechoCore1.Jwt.ITokenHelper;\n\n//默认的约定集将应用于程序集中的所有操作：\n[assembly: ApiConventionType(typeof(DefaultApiConventions))]\nnamespace TypechoCore1.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class TestController : Controller\n    {\n          private readonly typechoContext _coreDbContext;\n          private readonly ITokenHelper tokenHelper = null;\n         // ITypechoTestService service = new TypechoService();\n          private readonly ITypechoTestService service; //IOC依赖注入\n      \n\n        public TestController(typechoContext coreDbContext,ITokenHelper _tokenHelper,ITypechoTestService service1)\n        {\n            _coreDbContext = coreDbContext;\n             tokenHelper = _tokenHelper;\n            service=service1;\n        }\n        /// <summary>\n        /// 验证Token\n        /// </summary>\n        /// <param name=\"tokenStr\">token</param>\n        /// <returns></returns>\n        [HttpGet(\"ValiToken\")]\n        public ReturnModel ValiToken(string tokenStr)\n        {\n            var ret = new ReturnModel\n            {\n                TnToken = new TnToken()\n            };\n            bool isvilidate = tokenHelper.ValiToken(tokenStr);\n            if(isvilidate)\n            {\n                ret.Code = 200;\n                ret.Msg = \"Token验证成功\";\n                ret.TnToken.TokenStr = tokenStr;\n            }\n            else\n            {\n                ret.Code = 500;\n                ret.Msg = \"Token验证失败\";\n                ret.TnToken.TokenStr = tokenStr;\n            }\n            return ret;\n        }\n        /// <summary>\n        /// 验证Token 带返回状态\n        /// </summary>\n        /// <param name=\"tokenStr\"></param>\n        /// <returns></returns>\n        [HttpGet(\"ValiTokenState\")]\n        public ReturnModel ValiTokenState(string tokenStr)\n        {\n            var ret = new ReturnModel\n            {\n                TnToken = new TnToken()\n            };\n            string loginID = \"\";\n            TokenType tokenType = tokenHelper.ValiTokenState(tokenStr, a => a[\"iss\"] == \"WYY\" && a[\"aud\"] == \"EveryTestOne\", action => { loginID = action[\"loginID\"]; });\n            if (tokenType == TokenType.Fail)\n            {\n                ret.Code = 202;\n                ret.Msg = \"token验证失败\";\n                return ret;\n            }\n            if (tokenType == TokenType.Expired)\n            {\n                ret.Code = 205;\n                ret.Msg = \"token已经过期\";\n                return ret;\n            }\n\n            //..............其他逻辑\n            var data = new List<Dictionary<string, string>>();\n            var bb = new Dictionary<string, string>\n            {\n                { \"Wyy\", \"123456\" }\n            };\n            data.Add(bb);\n            ret.Code = 200;\n            ret.Msg = \"访问成功!\";\n            ret.Data =data ;\n            return ret;\n        }\n\n        /// <summary>\n        /// 登录测试\n        /// </summary>\n        /// <param name=\"user\"></param>\n        /// <returns></returns>\n         [HttpPost(\"Login\")]\n        public IActionResult Login([FromBody]LoginInput user)\n        {\n            var ret = new ReturnModel();\n            try\n            {\n                if (string.IsNullOrWhiteSpace(user.Username) || string.IsNullOrWhiteSpace(user.Password))\n                {\n                    ret.Code = 201;\n                    ret.Msg = \"用户名密码不能为空\";\n                    return NotFound();\n                }\n                //登录操作 我就没写了 || 假设登录成功\n                if (1 == 1)\n                {\n                    Dictionary<string, string> keyValuePairs = new Dictionary<string, string>\n                    {\n                        { \"loginID\", user.Username }\n                    };\n                    ret.Code = 200;\n                    ret.Msg = \"登录成功\";\n                    ret.TnToken= tokenHelper.CreateToken(keyValuePairs);\n                }\n            }\n            catch(Exception ex)\n            {\n                ret.Code = 500;\n                ret.Msg = \"登录失败:\"+ex.Message;\n            }\n            return Ok(ret);\n        }\n\n        /// <summary>\n        /// 异步查询\n        /// [ApiExplorerSettings(IgnoreApi = true)] 隐藏接口\n        /// </summary>\n        /// <returns></returns>\n        [ServiceFilter(typeof(TokenFilter))]\n        [HttpGet(\"AsyGetTest\")]\n        public async Task<IActionResult> AsyGetTest(string token)\n        {\n          var courses = _coreDbContext.typecho_test;\n          return Ok(await courses.ToListAsync());\n        }\n\n         /// <summary>\n        /// 同步查询\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet(\"GetTest\")]\n        public IActionResult GetTest()\n        {\n          return Ok(service.GetTest());\n         }\n\n        /// <summary>\n        /// 条件查询\n        /// </summary>\n        /// <param name = \"typecho_test\">model</param>\n        /// <returns></returns>\n        [HttpGet(\"AsyGetTestName\")]\n        public async Task<ActionResult<typecho_test>> AsyGetTestName(int id,string name )\n        {\n            ActionResult<typecho_test> courses;\n            try\n            {\n\n            \n            if (id != 0)\n            {\n             courses = await Task.Run(()=>_coreDbContext.typecho_test.Single(i=>i.id == id));\n             \n            }\n            else\n            {\n             courses = await Task.Run(()=>_coreDbContext.typecho_test.Single(i=>i.name == name));\n            \n            }\n            return Ok(courses);\n\n                }\n            catch (Exception ex)\n            {\n                return Ok(ex.Message);\n            }\n        }\n\n         /// <summary>\n        /// 过滤查询\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet(\"AsyGetTestG\")]\n        public async Task<IActionResult> AsyGetTestG(string name )\n        {\n              var courses = _coreDbContext.typecho_test\n                  .Where(w => w.name.Contains(name));\n            return Ok( await courses.FirstAsync());\n        }\n\n        /// <summary>\n        /// 模糊查询\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet(\"AsyGetTestLink\")]\n        public async Task<IActionResult> AsyGetTestLink(string name )\n        {\n              var courses = _coreDbContext.typecho_test\n                  .Where(w=>EF.Functions.Like(w.name,\"%\"));\n            return Ok( await courses.ToListAsync());\n        }\n\n\n        /// <summary>\n        /// 异步删除数据\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        [HttpDelete(\"AsyDetTestId\")]\n        public async Task<IActionResult> AsyDetTestId(int id)\n        {\n            var todoItem = await _coreDbContext.typecho_test.FindAsync(id);\n            if (todoItem == null)\n            {\n                return NotFound();\n            }\n            _coreDbContext.typecho_test.Remove(todoItem);\n            await _coreDbContext.SaveChangesAsync();\n            return NoContent();\n        }\n\n\n        /// <summary>\n        /// 同步删除数据\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        [HttpDelete(\"DetTestId\")]\n        public  IActionResult DetTestId(int id)\n        {\n            var todoItem = _coreDbContext.typecho_test.Find(id);\n            if (todoItem == null)\n            {\n                return NotFound();\n            }\n            _coreDbContext.typecho_test.Remove(todoItem);\n            _coreDbContext.SaveChanges();\n            return NoContent();\n        }\n\n        \n        /// <summary>\n        /// 异步添加数据\n        /// </summary>\n        /// <returns></returns>\n        [HttpPost(\"AsyIntTest\")]\n        public async Task<ActionResult<typecho_test>> AsyIntTest(typecho_test test)\n        {\n            _coreDbContext.typecho_test.Add(test);\n            return Ok(await _coreDbContext.SaveChangesAsync());\n        }\n          \n        /// <summary>\n        /// 同步添加数据\n        /// </summary>\n        /// <returns></returns>\n        [HttpPost(\"IntTest\")]\n        public  ActionResult<typecho_test> IntTest(typecho_test test)\n        {\n            _coreDbContext.typecho_test.Add(test);\n            return Ok(_coreDbContext.SaveChanges());\n        }\n\n        /// <summary>\n        /// 异步更新数据\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"test\"></param>\n        /// <returns></returns>\n        [HttpPut(\"AysUpTest\")]\n        public async Task<IActionResult> AysUpTest(int id, typecho_test test)\n        {\n            if (id != test.id)\n            {\n                return BadRequest();\n            }\n            _coreDbContext.Entry(test).State = EntityState.Modified;\n            await _coreDbContext.SaveChangesAsync();\n            return NoContent();\n        }\n\n        /// <summary>\n        /// 同步更新数据\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"test\"></param>\n        /// <returns></returns>\n        [HttpPut(\"UpTest\")]\n        public  IActionResult UpTest(int id, typecho_test test)\n        {\n            if (id != test.id)\n            {\n                return BadRequest();\n            }\n            _coreDbContext.Entry(test).State = EntityState.Modified;\n            _coreDbContext.SaveChanges();\n            return NoContent();\n        }\n    }\n}\n```\n\n',4,0,'blog/1.jpg',0,21,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(166,'netCore HTTP 响应状态码','','##  HTTP 响应状态码\n\n| HTTP 状态码 | 涵义                  | 解释说明                                                     |\n| :---------- | :-------------------- | :----------------------------------------------------------- |\n| 200         | OK                    | 用于一般性的成功返回，不可用于请求错误返回                   |\n| 201         | Created               | 资源被创建                                                   |\n| 202         | Accepted              | 用于资源异步处理的返回，仅表示请求已经收到。对于耗时比较久的处理，一般用异步处理来完成 |\n| 204         | No Content            | 此状态可能会出现在 PUT、POST、DELETE 的请求中，一般表示资源存在，但消息体中不会返回任何资源相关的状态或信息 |\n| 400         | Bad Request           | 用于客户端一般性错误信息返回, 在其它 4xx 错误以外的错误，也可以使用，错误信息一般置于 body 中 |\n| 401         | Unauthorized          | 接口需要授权访问，为通过授权验证                             |\n| 403         | Forbidden             | 当前的资源被禁止访问                                         |\n| 404         | Not Found             | 找不到对应的信息                                             |\n| 500         | Internal Server Error | 服务器内部错误                                               |\n\n## HTTP 共有四个谓词方法\n\n| HTTP 谓词方法 | 解释说明           |\n| :------------ | :----------------- |\n| GET           | 获取资源信息       |\n| POST          | 提交新的资源信息   |\n| PUT           | 更新已有的资源信息 |\n| DELETE        | 删除资源           |',4,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(167,' NetCore3.1webApi + EFCore + DI 框架封装','','\n\n\n\n## 框架结构\n\n### 实体层：\n\n **Typecho.Enties** \n\n### 仓储层：\n\n#### **Typecho.IRepository** \n\n>   IconcardContext.cs\n>\n>   IRepositoryFactory.cs\n>\n>   IRepositorys.cs\n\n#### **Typecho.Repository** \n\n>  RepositoryFactory.cs\n>\n>  Repositorys.cs\n>\n>  typechoContext.cs\n\n### 业务层：\n\n#### **Typecho.IService**\n\n> IBaseService.cs\n>\n> ITypechoTestService.cs\n\n\n\n#### **Typecho.Service**\n\n> BaseService.cs\n>\n> TypechoService.cs\n\n### UI层（api）：\n\n#### **TypechoCore1**\n\n> TestController.cs\n\n##  一： EF从数据库生成实体类到Enties\n\n\n\n### 1.执行以下语句安装依赖包\n\n```c#\nInstall-Package MySql.Data.EntityFrameworkCore -Pre\nInstall-Package Pomelo.EntityFrameworkCore.MySql\nInstall-Package Microsoft.EntityFrameworkCore.Tools\nInstall-Package Microsoft.VisualStudio.Web.CodeGeneration.Design\n```\n\n\n\n### 2.在程序包包管理器控制台\n\n```c#\nScaffold-DbContext \"server=localhost;userid=root;pwd=1;port=3306;database=syerp;sslmode=none;\" Pomelo.EntityFrameworkCore.MySql -OutputDir Models -Force\n```\n\n> 自动生成所有类模型文件，typechoContext.cs数据库上下文自动创建好了\n\n```\n-OutputDir  实体文件所存放的文件目录\n-ContextDir   DbContext文件存放的目录\n-Context         DbContext文件名\n-Schemas       需要生成实体数据的数据表所在的模式\n-Tables            需要生成实体数据的数据表的集合\n-DataAnnotations\n-UseDatabaseNames   直接使用数据库中的表名和列名（某些版本不支持）\n-Force              强制执行，重写已经存在的实体文件\n```\n\n> 链接： [asp.net core3.1 实战开发（EF+Mysql 从数据库生成实体类到项目）](https://www.cnblogs.com/jiamiemie/p/12683369.html)\n\n\n\n##  二：封装数据访问层\n\n\n\n> 封装仓储Repositorys模式，把typechoContext.cs这个类复制到Typecho.Repository程序集中\n\n\n\n### typechoContext类：\n\n\n\n```c#\nusing Microsoft.EntityFrameworkCore;\nusing Typecho.Enties.Models;\nusing Typecho.IRepository;\n\nnamespace Typecho.Repository\n{\n    public partial class typechoContext : DbContext , IconcardContext\n    {\n      \n\n        public typechoContext(DbContextOptions<typechoContext> options)\n            : base(options)\n        {\n        }\n\n        public virtual DbSet<typecho_comments> typecho_comments { get; set; }\n        public virtual DbSet<typecho_contents> typecho_contents { get; set; }\n        public virtual DbSet<typecho_fields> typecho_fields { get; set; }\n        public virtual DbSet<typecho_links> typecho_links { get; set; }\n        public virtual DbSet<typecho_metas> typecho_metas { get; set; }\n        public virtual DbSet<typecho_options> typecho_options { get; set; }\n        public virtual DbSet<typecho_relationships> typecho_relationships { get; set; }\n        public virtual DbSet<typecho_users> typecho_users { get; set; }\n\n          public virtual DbSet<typecho_test> typecho_test { get; set; }\n\n//        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n//        {\n//            if (!optionsBuilder.IsConfigured)\n//            {\n//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.\n//                optionsBuilder.UseMySql(\"server=localhost;userid=root;pwd=woshishui;port=3306;database=typecho;sslmode=none\", x => x.ServerVersion(\"8.0.16-mysql\"));\n//            }\n//        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<typecho_comments>(entity =>\n            {\n                entity.HasKey(e => e.coid)\n                    .HasName(\"PRIMARY\");\n\n                entity.HasIndex(e => e.cid)\n                    .HasName(\"cid\");\n\n                entity.HasIndex(e => e.created)\n                    .HasName(\"created\");\n\n                entity.Property(e => e.coid).HasColumnType(\"int(10) unsigned\");\n\n                entity.Property(e => e.agent)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.author)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.authorId)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.cid)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.created)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.ip)\n                    .HasColumnType(\"varchar(64)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.mail)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.ownerId)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.parent)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.stars)\n                    .HasColumnType(\"int(10)\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.status)\n                    .HasColumnType(\"varchar(16)\")\n                    .HasDefaultValueSql(\"''approved''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.text)\n                    .HasColumnType(\"text\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.type)\n                    .HasColumnType(\"varchar(16)\")\n                    .HasDefaultValueSql(\"''comment''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.url)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n            });\n\n            modelBuilder.Entity<typecho_contents>(entity =>\n            {\n                entity.HasKey(e => e.cid)\n                    .HasName(\"PRIMARY\");\n\n                entity.HasIndex(e => e.created)\n                    .HasName(\"created\");\n\n                entity.HasIndex(e => e.slug)\n                    .HasName(\"slug\")\n                    .IsUnique();\n\n                entity.Property(e => e.cid).HasColumnType(\"int(10) unsigned\");\n\n                entity.Property(e => e.allowComment)\n                    .HasColumnType(\"char(1)\")\n                    .HasDefaultValueSql(\"''0''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.allowFeed)\n                    .HasColumnType(\"char(1)\")\n                    .HasDefaultValueSql(\"''0''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.allowPing)\n                    .HasColumnType(\"char(1)\")\n                    .HasDefaultValueSql(\"''0''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.authorId)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.commentsNum)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.created)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.modified)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.order)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.parent)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.password)\n                    .HasColumnType(\"varchar(32)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.slug)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.status)\n                    .HasColumnType(\"varchar(16)\")\n                    .HasDefaultValueSql(\"''publish''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.template)\n                    .HasColumnType(\"varchar(32)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.text)\n                    .HasColumnType(\"longtext\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.title)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.type)\n                    .HasColumnType(\"varchar(16)\")\n                    .HasDefaultValueSql(\"''post''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.views)\n                    .HasColumnType(\"int(10)\")\n                    .HasDefaultValueSql(\"''0''\");\n            });\n\n            modelBuilder.Entity<typecho_fields>(entity =>\n            {\n                entity.HasKey(e => new { e.cid, e.name })\n                    .HasName(\"PRIMARY\");\n\n                entity.HasIndex(e => e.float_value)\n                    .HasName(\"float_value\");\n\n                entity.HasIndex(e => e.int_value)\n                    .HasName(\"int_value\");\n\n                entity.Property(e => e.cid).HasColumnType(\"int(10) unsigned\");\n\n                entity.Property(e => e.name)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.float_value).HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.int_value)\n                    .HasColumnType(\"int(10)\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.str_value)\n                    .HasColumnType(\"text\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.type)\n                    .HasColumnType(\"varchar(8)\")\n                    .HasDefaultValueSql(\"''str''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n            });\n\n            modelBuilder.Entity<typecho_links>(entity =>\n            {\n                entity.HasKey(e => e.lid)\n                    .HasName(\"PRIMARY\");\n\n                entity.Property(e => e.lid)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasComment(\"links表主键\");\n\n                entity.Property(e => e.description)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasComment(\"links描述\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.image)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasComment(\"links图片\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.name)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasComment(\"links名称\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.order)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\")\n                    .HasComment(\"links排序\");\n\n                entity.Property(e => e.sort)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasComment(\"links分类\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.url)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasComment(\"links网址\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.user)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasComment(\"自定义\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n            });\n\n            modelBuilder.Entity<typecho_metas>(entity =>\n            {\n                entity.HasKey(e => e.mid)\n                    .HasName(\"PRIMARY\");\n\n                entity.HasIndex(e => e.slug)\n                    .HasName(\"slug\");\n\n                entity.Property(e => e.mid).HasColumnType(\"int(10) unsigned\");\n\n                entity.Property(e => e.count)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.description)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.name)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.order)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.parent)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.slug)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.type)\n                    .IsRequired()\n                    .HasColumnType(\"varchar(32)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n            });\n\n            modelBuilder.Entity<typecho_options>(entity =>\n            {\n                entity.HasKey(e => new { e.name, e.user })\n                    .HasName(\"PRIMARY\");\n\n                entity.Property(e => e.name)\n                    .HasColumnType(\"varchar(32)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.user).HasColumnType(\"int(10) unsigned\");\n\n                entity.Property(e => e.value)\n                    .HasColumnType(\"text\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n            });\n\n            modelBuilder.Entity<typecho_relationships>(entity =>\n            {\n                entity.HasKey(e => new { e.cid, e.mid })\n                    .HasName(\"PRIMARY\");\n\n                entity.Property(e => e.cid).HasColumnType(\"int(10) unsigned\");\n\n                entity.Property(e => e.mid).HasColumnType(\"int(10) unsigned\");\n            });\n\n            modelBuilder.Entity<typecho_users>(entity =>\n            {\n                entity.HasKey(e => e.uid)\n                    .HasName(\"PRIMARY\");\n\n                entity.HasIndex(e => e.mail)\n                    .HasName(\"mail\")\n                    .IsUnique();\n\n                entity.HasIndex(e => e.name)\n                    .HasName(\"name\")\n                    .IsUnique();\n\n                entity.Property(e => e.uid).HasColumnType(\"int(10) unsigned\");\n\n                entity.Property(e => e.activated)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.authCode)\n                    .HasColumnType(\"varchar(64)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.created)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.group)\n                    .HasColumnType(\"varchar(16)\")\n                    .HasDefaultValueSql(\"''visitor''\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.logged)\n                    .HasColumnType(\"int(10) unsigned\")\n                    .HasDefaultValueSql(\"''0''\");\n\n                entity.Property(e => e.mail)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.name)\n                    .HasColumnType(\"varchar(32)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.password)\n                    .HasColumnType(\"varchar(64)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.screenName)\n                    .HasColumnType(\"varchar(32)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n\n                entity.Property(e => e.url)\n                    .HasColumnType(\"varchar(200)\")\n                    .HasCharSet(\"utf8\")\n                    .HasCollation(\"utf8_general_ci\");\n            });\n\n            OnModelCreatingPartial(modelBuilder);\n        }\n\n        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n    }\n}\n\n```\n\n###  IRepositorys接口：\n\n```c#\n public interface IRepositorys<T> : IDisposable where T : class\n    {\n        /// <summary>\n        /// 显式开启数据上下文事务\n        /// </summary>\n        /// <param name=\"isolationLevel\">指定连接的事务锁定行为</param>\n        void BeginTransaction(IsolationLevel isolationLevel = IsolationLevel.Unspecified);\n\n        /// <summary>\n        /// 提交事务的更改\n        /// </summary>\n        void Commit();\n\n        /// <summary>\n        /// 显式回滚事务，仅在显式开启事务后有用\n        /// </summary>\n        void Rollback();\n\n        /// <summary>\n        /// 提交当前单元操作的更改\n        /// </summary>\n        int SaveChanges();\n         Task<int> SaveChangesAsync();\n\n        /// <summary>\n        /// 获取 当前实体类型的查询数据集，数据将使用不跟踪变化的方式来查询，当数据用于展现时，推荐使用此数据集，如果用于新增，更新，删除时，请使用<see cref=\"TrackEntities\"/>数据集\n        /// </summary>\n        IQueryable<T> Entities { get; }\n\n        /// <summary>\n        /// 获取 当前实体类型的查询数据集，当数据用于新增，更新，删除时，使用此数据集，如果数据用于展现，推荐使用<see cref=\"Entities\"/>数据集\n        /// </summary>\n        IQueryable<T> TrackEntities { get; }\n\n        /// <summary>\n        /// 插入 - 通过实体对象添加\n        /// </summary>\n        /// <param name=\"entity\">实体对象</param>\n        /// <param name=\"isSave\">是否执行</param>\n        /// /// <returns></returns>\n        T Add(T entity, bool isSave = true);\n         Task<T> AysAdd(T entity, bool isSave = true);\n        /// <summary>\n        /// 批量插入 - 通过实体对象集合添加\n        /// </summary>\n        /// <param name=\"entitys\">实体对象集合</param>\n        /// <param name=\"isSave\">是否执行</param>\n        void AddRange(IEnumerable<T> entitys, bool isSave = true);\n\n        /// <summary>\n        /// 删除 - 通过实体对象删除\n        /// </summary>\n        /// <param name=\"entity\">实体对象</param>\n        /// <param name=\"isSave\">是否执行</param>\n        void Delete(T entity, bool isSave = true);\n\n        /// <summary>\n        /// 批量删除 - 通过实体对象集合删除\n        /// </summary>\n        /// <param name=\"entitys\">实体对象集合</param>\n        /// <param name=\"isSave\">是否执行</param>\n        void Delete(bool isSave = false, params T[] entitys);\n\n        /// <summary>\n        /// 删除 - 通过主键ID删除\n        /// </summary>\n        /// <param name=\"id\">主键ID</param>\n        Task<int> AsyDelete(object id);\n        int Delete(object id);\n        /// <summary>\n        /// 批量删除 - 通过条件删除\n        /// </summary>\n        /// <param name=\"where\">过滤条件</param>\n        /// <param name=\"isSave\">是否执行</param>\n        void Delete(Expression<Func<T, bool>> @where, bool isSave = true);\n\n        /// <summary>\n        /// 修改 - 通过实体对象修改\n        /// </summary>\n        /// <param name=\"entity\">实体对象</param>\n        Task<int> AysUpdate(T entity);\n\n        int  Update(T entity);\n        /// <summary>\n        /// 批量修改 - 通过实体对象集合修改\n        /// </summary>\n        /// <param name=\"entitys\">实体对象集合</param>\n        void Update( params T[] entitys);\n\n        /// <summary>\n        /// 是否满足条件\n        /// </summary>\n        /// <param name=\"where\">过滤条件</param>\n        /// <returns></returns>\n        bool Any(Expression<Func<T, bool>> @where);\n\n        /// <summary>\n        /// 返回总条数\n        /// </summary>\n        /// <returns></returns>\n        int Count();\n\n        /// <summary>\n        /// 返回总条数 - 通过条件过滤\n        /// </summary>\n        /// <param name=\"where\">过滤条件</param>\n        /// <returns></returns>\n        int Count(Expression<Func<T, bool>> @where);\n\n        /// <summary>\n        /// 返回第一条记录\n        /// </summary>\n        /// <param name=\"where\">过滤条件</param>\n        /// <returns></returns>\n        T FirstOrDefault(Expression<Func<T, bool>> @where);\n\n        /// <summary>\n        /// 返回第一条记录 - 通过条件过滤\n        /// </summary>\n        /// <typeparam name=\"TOrder\">排序约束</typeparam>\n        /// <param name=\"where\">过滤条件</param>\n        /// <param name=\"order\">排序条件</param>\n        /// <param name=\"isDesc\">排序方式</param>\n        /// <returns></returns>\n        T FirstOrDefault<TOrder>(Expression<Func<T, bool>> @where, Expression<Func<T, TOrder>> order, bool isDesc = false);\n\n        /// <summary>\n        /// 去重查询\n        /// </summary>\n        /// <param name=\"where\">过滤条件</param>\n        /// <returns></returns>\n        IQueryable<T> Distinct(Expression<Func<T, bool>> @where);\n\n        /// <summary>\n        /// 条件查询\n        /// </summary>\n        /// <param name=\"where\">过滤条件</param>\n        /// <returns></returns>\n        IQueryable<T> Where(Expression<Func<T, bool>> @where);\n\n        /// <summary>\n        /// 条件查询 - 支持排序\n        /// </summary>\n        /// <typeparam name=\"TOrder\">排序约束</typeparam>\n        /// <param name=\"where\">过滤条件</param>\n        /// <param name=\"order\">排序条件</param>\n        /// <param name=\"isDesc\">排序方式</param>\n        /// <returns></returns>\n        IQueryable<T> Where<TOrder>(Expression<Func<T, bool>> @where, Expression<Func<T, TOrder>> order, bool isDesc = false);\n\n        /// <summary>\n        /// 条件分页查询 - 支持排序\n        /// </summary>\n        /// <typeparam name=\"TOrder\">排序约束</typeparam>\n        /// <param name=\"where\">过滤条件</param>\n        /// <param name=\"order\">排序条件</param>\n        /// <param name=\"pageIndex\">当前页码</param>\n        /// <param name=\"pageSize\">每页记录条数</param>\n        /// <param name=\"count\">返回总条数</param>\n        /// <param name=\"isDesc\">是否倒序</param>\n        /// <returns></returns>\n        IEnumerable<T> Where<TOrder>(Func<T, bool> @where, Func<T, TOrder> order, int pageIndex, int pageSize, out int count, bool isDesc = false);\n\n        /// <summary>\n        /// 条件分页查询 - 支持排序 - 支持Select导航属性查询\n        /// </summary>\n        /// <typeparam name=\"TOrder\">排序约束</typeparam>\n        /// <param name=\"where\">过滤条件</param>\n        /// <param name=\"order\">排序条件</param>\n        /// <param name=\"pageIndex\">当前页码</param>\n        /// <param name=\"pageSize\">每页记录条数</param>\n        /// <param name=\"count\">返回总条数</param>\n        /// <param name=\"isDesc\">是否倒序</param>\n        /// <returns></returns>\n        IQueryable<T> Where<TOrder>(Expression<Func<T, bool>> @where, Expression<Func<T, TOrder>> order, int pageIndex, int pageSize, out int count, bool isDesc = false);\n\n        /// <summary>\n        /// 获取所有数据\n        /// </summary>\n        /// <returns></returns>\n        IQueryable<T> GetAll();\n\n        /// <summary>\n        /// 获取所有数据 - 支持排序\n        /// </summary>\n        /// <typeparam name=\"TOrder\">排序约束</typeparam>\n        /// <param name=\"order\">排序条件</param>\n        /// <param name=\"isDesc\">排序方式</param>\n        /// <returns></returns>\n        IQueryable<T> GetAll<TOrder>(Expression<Func<T, TOrder>> order, bool isDesc = false);\n\n        /// <summary>\n        /// 根据ID查询\n        /// </summary>\n        /// <typeparam name=\"TType\">字段类型</typeparam>\n        /// <param name=\"id\">主键ID</param>\n        /// <returns></returns>\n        T GetById<TType>(TType id);\n\n        /// <summary>\n        /// 获取最大值\n        /// </summary>\n        /// <typeparam name=\"TType\">字段类型</typeparam>\n        /// <param name=\"column\">字段条件</param>\n        /// <returns></returns>\n        TType Max<TType>(Expression<Func<T, TType>> column);\n\n        /// <summary>\n        /// 获取最大值\n        /// </summary>\n        /// <typeparam name=\"TType\">字段类型</typeparam>\n        /// <param name=\"column\">字段条件</param>\n        /// <param name=\"where\">过滤条件</param>\n        /// <returns></returns>\n        TType Max<TType>(Expression<Func<T, TType>> column, Expression<Func<T, bool>> @where);\n\n        /// <summary>\n        /// 获取最小值\n        /// </summary>\n        /// <typeparam name=\"TType\">字段类型</typeparam>\n        /// <param name=\"column\">字段条件</param>\n        /// <returns></returns>\n        TType Min<TType>(Expression<Func<T, TType>> column);\n\n        /// <summary>\n        /// 获取最小值\n        /// </summary>\n        /// <typeparam name=\"TType\">字段类型</typeparam>\n        /// <param name=\"column\">字段条件</param>\n        /// <param name=\"where\">过滤条件</param>\n        /// <returns></returns>\n        TType Min<TType>(Expression<Func<T, TType>> column, Expression<Func<T, bool>> @where);\n\n        /// <summary>\n        /// 获取总数\n        /// </summary>\n        /// <typeparam name=\"TType\">字段类型</typeparam>\n        /// <param name=\"selector\">字段条件</param>\n        /// <param name=\"where\">过滤条件</param>\n        /// <returns></returns>\n        TType Sum<TType>(Expression<Func<T, TType>> selector, Expression<Func<T, bool>> @where) where TType : new();\n    }\n```\n\n### Repositorys类，CRUD功能的封装\n\n```c#\n  public class Repositorys<T> : IRepositorys<T> where T : class\n    {\n        private typechoContext _dbContext;\n        private readonly DbSet<T> _dbSet;\n        private readonly string _connStr;\n\n        public Repositorys(IconcardContext mydbcontext)\n        {\n            _dbContext = mydbcontext as typechoContext;\n            if (_dbContext == null)\n            {\n                return;\n            }\n\n            _dbSet = _dbContext.Set<T>();\n            _connStr = _dbContext.Database.GetDbConnection().ConnectionString;\n        }\n\n        public void BeginTransaction(IsolationLevel isolationLevel = IsolationLevel.Unspecified)\n        {\n            if (_dbContext.Database.CurrentTransaction == null)\n            {\n                _dbContext.Database.BeginTransaction(isolationLevel);\n            }\n        }\n\n        public void Commit()\n        {\n            var transaction = this._dbContext.Database.CurrentTransaction;\n            if (transaction != null)\n            {\n                try\n                {\n                    transaction.Commit();\n                }\n                catch (Exception)\n                {\n                    transaction.Rollback();\n                    throw;\n                }\n            }\n        }\n\n        public void Rollback()\n        {\n            if (_dbContext.Database.CurrentTransaction != null)\n            {\n                _dbContext.Database.CurrentTransaction.Rollback();\n            }\n        }\n\n        public int SaveChanges()\n        {\n            return _dbContext.SaveChanges();\n        }\n          public async Task<int> SaveChangesAsync()\n        {\n            return await _dbContext.SaveChangesAsync();\n        }\n\n\n        public IQueryable<T> Entities\n        {\n            get { return _dbSet.AsNoTracking(); }\n        }\n\n        public IQueryable<T> TrackEntities\n        {\n            get { return _dbSet; }\n        }\n\n        public T Add(T entity, bool isSave = true)\n        {\n\n            _dbSet.Add(entity);\n            if (isSave)\n            {\n                SaveChanges();\n            }\n            return entity;\n        }\n\n         public async Task<T> AysAdd(T entity, bool isSave = true)\n        {\n           await _dbSet.AddAsync(entity);\n            if (isSave)\n            {\n               await  SaveChangesAsync();\n            }\n            return entity;\n        }\n\n        public void AddRange(IEnumerable<T> entitys, bool isSave = true)\n        {\n            _dbSet.AddRange(entitys);\n            if (isSave)\n            {\n                SaveChanges();\n            }\n        }\n\n        public void Delete(T entity, bool isSave = true)\n        {\n            this._dbSet.Remove(entity);\n            if (isSave)\n            {\n                this.SaveChanges();\n            }\n        }\n\n        public void Delete(bool isSave = true, params T[] entitys)\n        {\n            this._dbSet.RemoveRange(entitys);\n            if (isSave)\n            {\n                this.SaveChanges();\n            }\n        }\n\n        public async Task<int> AsyDelete(object id)\n        {\n             int de = 0;\n             //执行查询\n             var todoItem = await _dbSet.FindAsync(id);\n            if (todoItem == null)\n            {\n                //return NotFound();\n                de = 0;\n            }\n            else\n            {\n              _dbSet.Remove(todoItem);\n             de = SaveChanges();\n            }\n            return de;\n        }\n\n           public int Delete(object id)\n        {\n             int de = 0;\n             //执行查询\n             var todoItem =_dbSet.Find(id);\n            if (todoItem == null)\n            {\n                //return NotFound();\n                de = 0;\n            }\n            else\n            {\n              _dbSet.Remove(todoItem);\n             de = SaveChanges();\n            }\n            return de;\n        }\n\n        public void Delete(Expression<Func<T, bool>> @where, bool isSave = true)\n        {\n            T[] entitys = this._dbSet.Where(@where).ToArray();\n            if (entitys.Length > 0)\n            {\n                this._dbSet.RemoveRange(entitys);\n            }\n            if (isSave)\n            {\n                this.SaveChanges();\n            }\n        }\n\n        public async Task<int> AysUpdate(T entity)\n        {\n            \n            var entry = this._dbContext.Entry(entity);\n            if (entry.State == EntityState.Detached)\n            {\n                entry.State = EntityState.Modified;\n            }\n            var da = await Task.Run(SaveChangesAsync);\n            return da;\n        }\n\n        public int Update(T entity)\n        {\n            \n            var entry = this._dbContext.Entry(entity);\n            if (entry.State == EntityState.Detached)\n            {\n                entry.State = EntityState.Modified;\n            }\n            var da = SaveChanges();\n            return da;\n        }\n        public void Update( params T[] entitys)\n        {\n            var entry = this._dbContext.Entry(entitys);\n            if (entry.State == EntityState.Detached)\n            {\n                entry.State = EntityState.Modified;\n            }\n            SaveChanges();\n        }\n\n        public bool Any(Expression<Func<T, bool>> @where)\n        {\n            return this._dbSet.AsNoTracking().Any(@where);\n        }\n\n        public int Count()\n        {\n            return this._dbSet.AsNoTracking().Count();\n        }\n\n        public int Count(Expression<Func<T, bool>> @where)\n        {\n            return this._dbSet.AsNoTracking().Count(@where);\n        }\n\n        public T FirstOrDefault(Expression<Func<T, bool>> @where)\n        {\n            return this._dbSet.AsNoTracking().FirstOrDefault(@where);\n        }\n\n        public T FirstOrDefault<TOrder>(Expression<Func<T, bool>> @where, Expression<Func<T, TOrder>> order, bool isDesc = false)\n        {\n            if (isDesc)\n            {\n                return this._dbSet.AsNoTracking().OrderByDescending(order).FirstOrDefault(@where);\n            }\n            else\n            {\n                return this._dbSet.AsNoTracking().OrderBy(order).FirstOrDefault(@where);\n            }\n        }\n\n        public IQueryable<T> Distinct(Expression<Func<T, bool>> @where)\n        {\n            return this._dbSet.AsNoTracking().Where(@where).Distinct();\n        }\n\n        public IQueryable<T> Where(Expression<Func<T, bool>> @where)\n        {\n            return this._dbSet.Where(@where);\n        }\n\n        public IQueryable<T> Where<TOrder>(Expression<Func<T, bool>> @where, Expression<Func<T, TOrder>> order, bool isDesc = false)\n        {\n            if (isDesc)\n            {\n                return this._dbSet.Where(@where).OrderByDescending(order);\n            }\n            else\n            {\n                return this._dbSet.Where(@where).OrderBy(order);\n            }\n        }\n\n        public IEnumerable<T> Where<TOrder>(Func<T, bool> @where, Func<T, TOrder> order, int pageIndex, int pageSize, out int count, bool isDesc = false)\n        {\n            count = Count();\n            if (isDesc)\n            {\n                return this._dbSet.Where(@where).OrderByDescending(order).Skip((pageIndex - 1) * pageSize).Take(pageSize);\n            }\n            else\n            {\n                return this._dbSet.Where(@where).OrderBy(order).Skip((pageIndex - 1) * pageSize).Take(pageSize);\n            }\n        }\n\n        public IQueryable<T> Where<TOrder>(Expression<Func<T, bool>> @where, Expression<Func<T, TOrder>> order, int pageIndex, int pageSize, out int count, bool isDesc = false)\n        {\n            count = Count();\n            if (isDesc)\n            {\n                return this._dbSet.Where(@where).OrderByDescending(order).Skip((pageIndex - 1) * pageSize).Take(pageSize);\n            }\n            else\n            {\n                return this._dbSet.Where(@where).OrderBy(order).Skip((pageIndex - 1) * pageSize).Take(pageSize);\n            }\n        }\n\n        public IQueryable<T> GetAll()\n        {\n            return this._dbSet.AsNoTracking();\n        }\n\n        public IQueryable<T> GetAll<TOrder>(Expression<Func<T, TOrder>> order, bool isDesc = false)\n        {\n            if (isDesc)\n            {\n                return this._dbSet.AsNoTracking().OrderByDescending(order);\n            }\n            else\n            {\n                return this._dbSet.AsNoTracking().OrderBy(order);\n            }\n        }\n\n        public T GetById<TType>(TType id)\n        {\n            return this._dbSet.Find(id);\n        }\n\n        public TType Max<TType>(Expression<Func<T, TType>> column)\n        {\n            if (this._dbSet.AsNoTracking().Any())\n            {\n                return this._dbSet.AsNoTracking().Max(column);\n            }\n            return default(TType);\n        }\n\n        public TType Max<TType>(Expression<Func<T, TType>> column, Expression<Func<T, bool>> @where)\n        {\n            if (this._dbSet.AsNoTracking().Any(@where))\n            {\n                return this._dbSet.AsNoTracking().Where(@where).Max(column);\n            }\n            return default(TType);\n        }\n\n        public TType Min<TType>(Expression<Func<T, TType>> column)\n        {\n            if (this._dbSet.AsNoTracking().Any())\n            {\n                return this._dbSet.AsNoTracking().Min(column);\n            }\n            return default(TType);\n        }\n\n        public TType Min<TType>(Expression<Func<T, TType>> column, Expression<Func<T, bool>> @where)\n        {\n            if (this._dbSet.AsNoTracking().Any(@where))\n            {\n                return this._dbSet.AsNoTracking().Where(@where).Min(column);\n            }\n            return default(TType);\n        }\n\n        public TType Sum<TType>(Expression<Func<T, TType>> selector, Expression<Func<T, bool>> @where) where TType : new()\n        {\n            object result = 0;\n\n            if (new TType().GetType() == typeof(decimal))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, decimal>>);\n            }\n            if (new TType().GetType() == typeof(decimal?))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, decimal?>>);\n            }\n            if (new TType().GetType() == typeof(double))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, double>>);\n            }\n            if (new TType().GetType() == typeof(double?))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, double?>>);\n            }\n            if (new TType().GetType() == typeof(float))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, float>>);\n            }\n            if (new TType().GetType() == typeof(float?))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, float?>>);\n            }\n            if (new TType().GetType() == typeof(int))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, int>>);\n            }\n            if (new TType().GetType() == typeof(int?))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, int?>>);\n            }\n            if (new TType().GetType() == typeof(long))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, long>>);\n            }\n            if (new TType().GetType() == typeof(long?))\n            {\n                result = this._dbSet.AsNoTracking().Where(where).Sum(selector as Expression<Func<T, long?>>);\n            }\n            return (TType)result;\n        }\n\n        public void Dispose()\n        {\n            this._dbContext.Dispose();\n        }\n    }\n```\n\n\n\n## 三： 通过DI创建实例\n\n> 添加RepositoryFactory类和IRepositoryFactory接口\n\n\n\n### IRepositoryFactory接口：\n\n```c#\n   public interface IRepositoryFactory\n    {\n        IRepositorys<T> CreateRepository<T>(IconcardContext mydbcontext) where T : class;\n    }\n```\n\n\n\n### RepositoryFactory类：\n\n```c#\n   public class RepositoryFactory : IRepositoryFactory\n    {\n        public IRepositorys<T> CreateRepository<T>(IconcardContext mydbcontext) where T : class\n        {\n            return new Repositorys<T>(mydbcontext);\n        }\n    }\n```\n\n\n\n## 四：Service层\n\n> 添加BaseService类和IBaseService接口\n\n\n\n### IBaseService接口：\n\n```c#\n public interface IBaseService\n    {\n        IRepositorys<T> CreateService<T>() where T : class, new();\n    }\n```\n\n\n\n### BaseService类：\n\n```c#\n public class BaseService : IBaseService\n    {\n        private IRepositoryFactory _repositoryFactory;\n        private IconcardContext _mydbcontext;\n        public BaseService(IRepositoryFactory repositoryFactory, IconcardContext mydbcontext)\n        {\n            this._repositoryFactory = repositoryFactory;\n            this._mydbcontext = mydbcontext;\n        }\n\n        public IRepositorys<T> CreateService<T>() where T : class, new()\n        {\n            return _repositoryFactory.CreateRepository<T>(_mydbcontext);\n        }\n    }\n```\n\n> 添加Service模块xxxService类和IxxxService接口，xxxService类继承父类BaseService，生成构造函数。\n\n```c#\n//构造函数 自动生成\npublic TypechoService(IRepositoryFactory repositoryFactory, IconcardContext mydbcontext) : base(repositoryFactory, mydbcontext)\n        {\n        }\n```\n\n\n\n## 五：DI依赖注入配置\n\n\n\n### 注册DbContext\n\n```c#\n         services.AddDbContext<typechoContext>(options=>options.UseMySql(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n\n\\\\appsettings.json\n     \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=localhost;database=typecho;uid=root;pwd=woshishui;\"\n  }\n```\n\n```c#\nservices.AddScoped<IconcardContext, typechoContext>();//dbc\n            services.AddScoped<IRepositoryFactory, RepositoryFactory>();//泛型工厂\n            services.AddScoped<ITypechoTestService, TypechoService>();//ioc\n```\n\n\n\n## 六：UI层调用service接口\n\n> TestController ：实现调用仓储封装增删改查\n\n```c#\n [Route(\"api/[controller]\")]\n    [ApiController]\n    public class TestController : Controller\n    {\n          private readonly typechoContext _coreDbContext;\n          private readonly ITokenHelper _tokenHelper = null;\n         // ITypechoTestService service = new TypechoService();\n          private readonly ITypechoTestService _service; //IOC依赖注入\n      \n\n        public TestController(typechoContext coreDbContext,ITokenHelper tokenHelper,ITypechoTestService service)\n        {\n            _coreDbContext = coreDbContext;\n            _tokenHelper = tokenHelper;\n            _service=service;\n        }\n        /// <summary>\n        /// 验证Token\n        /// </summary>\n        /// <param name=\"tokenStr\">token</param>\n        /// <returns></returns>\n        [HttpGet(\"ValiToken\")]\n        public ReturnModel ValiToken(string tokenStr)\n        {\n            var ret = new ReturnModel\n            {\n                TnToken = new TnToken()\n            };\n            bool isvilidate = _tokenHelper.ValiToken(tokenStr);\n            if(isvilidate)\n            {\n                ret.Code = 200;\n                ret.Msg = \"Token验证成功\";\n                ret.TnToken.TokenStr = tokenStr;\n            }\n            else\n            {\n                ret.Code = 500;\n                ret.Msg = \"Token验证失败\";\n                ret.TnToken.TokenStr = tokenStr;\n            }\n            return ret;\n        }\n        /// <summary>\n        /// 验证Token 带返回状态\n        /// </summary>\n        /// <param name=\"tokenStr\"></param>\n        /// <returns></returns>\n        [HttpGet(\"ValiTokenState\")]\n        public ReturnModel ValiTokenState(string tokenStr)\n        {\n            var ret = new ReturnModel\n            {\n                TnToken = new TnToken()\n            };\n            string loginID = \"\";\n            TokenType tokenType = _tokenHelper.ValiTokenState(tokenStr, a => a[\"iss\"] == \"WYY\" && a[\"aud\"] == \"EveryTestOne\", action => { loginID = action[\"loginID\"]; });\n            if (tokenType == TokenType.Fail)\n            {\n                ret.Code = 202;\n                ret.Msg = \"token验证失败\";\n                return ret;\n            }\n            if (tokenType == TokenType.Expired)\n            {\n                ret.Code = 205;\n                ret.Msg = \"token已经过期\";\n                return ret;\n            }\n\n            //..............其他逻辑\n            var data = new List<Dictionary<string, string>>();\n            var bb = new Dictionary<string, string>\n            {\n                { \"Wyy\", \"123456\" }\n            };\n            data.Add(bb);\n            ret.Code = 200;\n            ret.Msg = \"访问成功!\";\n            ret.Data =data ;\n            return ret;\n        }\n\n        /// <summary>\n        /// 登录测试\n        /// </summary>\n        /// <param name=\"user\"></param>\n        /// <returns></returns>\n         [HttpPost(\"Login\")]\n        public IActionResult Login([FromBody]LoginInput user)\n        {\n            var ret = new ReturnModel();\n            try\n            {\n                if (string.IsNullOrWhiteSpace(user.Username) || string.IsNullOrWhiteSpace(user.Password))\n                {\n                    ret.Code = 201;\n                    ret.Msg = \"用户名密码不能为空\";\n                    return NotFound();\n                }\n                //登录操作 我就没写了 || 假设登录成功\n                if (true)\n                {\n                    Dictionary<string, string> keyValuePairs = new Dictionary<string, string>\n                    {\n                        { \"loginID\", user.Username }\n                    };\n                    ret.Code = 200;\n                    ret.Msg = \"登录成功\";\n                    ret.TnToken= _tokenHelper.CreateToken(keyValuePairs);\n                }\n            }\n            catch(Exception ex)\n            {\n                ret.Code = 500;\n                ret.Msg = \"登录失败:\"+ex.Message;\n            }\n            return Ok(ret);\n        }\n\n        /// <summary>\n        /// 异步查询\n        /// [ApiExplorerSettings(IgnoreApi = true)] 隐藏接口\n        /// </summary>\n        /// <returns></returns>\n        [ServiceFilter(typeof(TokenFilter))]\n        [HttpGet(\"AsyGetTest\")]\n        public async Task<IActionResult> AsyGetTest(string token)\n        {\n          return Ok(await _service.AsyGetTest());\n        }\n\n         /// <summary>\n        /// 同步查询\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet(\"GetTest\")]\n        public IActionResult GetTest()\n        {\n          return Ok(_service.GetTest());\n         }\n\n         /// <summary>\n         /// 条件查询\n         /// </summary>\n         /// <returns></returns>\n         [HttpGet(\"AsyGetTestName\")]\n        public async Task<IActionResult> AsyGetTestName(int id)\n        {\n            return Ok(await _service.AsyGetTestName(id));\n        }\n\n         /// <summary>\n        /// 过滤查询\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet(\"AsyGetTestG\")]\n        public async Task<IActionResult> AsyGetTestG(string name )\n        {\n              var courses = _coreDbContext.typecho_test\n                  .Where(w => w.name.Contains(name));\n            return Ok( await courses.FirstAsync());\n        }\n\n        /// <summary>\n        /// 模糊查询\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet(\"AsyGetTestLink\")]\n        public async Task<IActionResult> AsyGetTestLink(string name )\n        {\n              var courses = _coreDbContext.typecho_test\n                  .Where(w=>EF.Functions.Like(w.name,\"%\"));\n            return Ok( await courses.ToListAsync());\n        }\n\n\n        /// <summary>\n        /// 异步删除数据\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        [HttpDelete(\"AsyDetTestId\")]\n        public async Task<IActionResult> AsyDetTestId(int id)\n        {\n          return Ok(await _service.AsyDetTestId(id));\n        }\n\n        /// <summary>\n        /// 同步删除数据\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <returns></returns>\n        [HttpDelete(\"DetTestId\")]\n        public  IActionResult DetTestId(int id)\n        {\n          return Ok( _service.DetTestId(id));\n        }\n        \n        /// <summary>\n        /// 异步添加数据\n        /// </summary>\n        /// <returns></returns>\n        [HttpPost(\"AsyIntTest\")]\n        public async Task<ActionResult<typecho_test>> AsyIntTest(typecho_test test)\n        {\n            return Ok(await _service.AsyIntTest(test));\n        }\n          \n        /// <summary>\n        /// 同步添加数据\n        /// </summary>\n        /// <returns></returns>\n        [HttpPost(\"IntTest\")]\n        public  ActionResult<typecho_test> IntTest(typecho_test test)\n        {\n            return Ok(_service.IntTest(test));\n        }\n\n        /// <summary>\n        /// 异步更新数据\n        /// </summary>\n        /// <param name=\"test\"></param>\n        /// <returns></returns>\n        [HttpPut(\"AysUpTest\")]\n        public async Task<IActionResult> AysUpTest(typecho_test test)\n        {\n           var data=await Task.Run(()=> _service.AysUpTest(test));\n           return Ok(data);\n        }\n\n        /// <summary>\n        /// 同步更新数据\n        /// </summary>\n        /// <param name=\"id\"></param>\n        /// <param name=\"test\"></param>\n        /// <returns></returns>\n        [HttpPut(\"UpTest\")]\n        public  IActionResult UpTest(int id, typecho_test test)\n        { \n            var data= _service.UpTest(test);\n           return Ok(data);\n        }\n    }\n```\n\n## 参考：[.Net Core2.2 + EF Core + DI，三层框架项目搭建教程](https://www.cnblogs.com/han1982/p/11058788.html)',6,0,'blog/1.jpg',0,4,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(168,'netcore3.1 设置可跨域（转）','','### 1、Startup类里先定义一个全局变量：\n\n```c#\n  readonly string MyAllowSpecificOrigins = \"_myAllowSpecificOrigins\";//名字随便起\n```\n\n### 2、ConfigureServices方法里写如下代码：\n\n\n\n\n```c#\n         services.AddCors(options =>\n            {\n               options.AddPolicy(MyAllowSpecificOrigins,\n                    \n       builder => builder.AllowAnyOrigin()\n                \n                .WithMethods(\"GET\", \"POST\", \"HEAD\", \"PUT\", \"DELETE\", \"OPTIONS\")\n \n                );\n \n        });\n```\n\n### 3、Configure方法里添加中间件：\n\n \n\n```c#\n app.UseCors(MyAllowSpecificOrigins);\n```\n\n\nCORS 中间件必须配置为在对 UseRouting 和 UseEndpoints的调用之间执行。 配置不正确将导致中间件停止正常运行。\n\n\n\n原文链接：https://blog.csdn.net/puzi0315/article/details/104326328/\n\n',13,0,'blog/1.jpg',0,18,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(169,'Blazor 生命周期','组件初始化方法 同步操作  protected override void OnInitialized() {     ... } 异步操作  protected override async Task OnInitializedAsync() {     await ... } 设置参数之前 SetParametersAsync 在呈现树中设置','\n\n### 组件初始化方法\n\n**同步操作**\n\n```c#\nprotected override void OnInitialized()\n{\n    ...\n}\n```\n\n**异步操作**\n\n```c#\nprotected override async Task OnInitializedAsync()\n{\n    await ...\n}\n```\n\n### 设置参数之前\n\nSetParametersAsync 在呈现树中设置组件的父组件提供的参数：\n\n```c#\npublic override async Task SetParametersAsync(ParameterView parameters)\n{\n    await ...\n    await base.SetParametersAsync(parameters);\n}\n```\n\n### 设置参数之后\n\nOnParametersSetAsync 和 OnParametersSet 在以下情况下调用：\n当组件被初始化并从其父组件收到其第一组参数时。\n当父组件重新呈现并提供以下内容时：\n至少一个参数已更改的唯一已知基元不可变类型。\n任何复杂类型的参数。 框架无法知道复杂类型参数的值是否在内部发生了改变，因此，它将参数集视为已更改。\n\n```c#\nprotected override async Task OnParametersSetAsync()\n{\n    await ...\n}\n```\n\n **备注**\n\n> 应用参数和属性值时，异步操作必须在 `OnParametersSetAsync` 生命周期事件期间发生。\n\n```c#\nprotected override void OnParametersSet()\n{\n    ...\n}\n```\n\n### 组件呈现之后\nOnAfterRenderAsync 和 OnAfterRender 在组件完成呈现后调用。 此时会填充元素和组件引用。 在此阶段中，可使用呈现的内容执行其他初始化步骤，例如激活对呈现的 DOM 元素进行操作的第三方 JavaScript 库。\n\nOnAfterRenderAsync 和 OnAfterRender 的 firstRender 参数：\n\n在第一次呈现组件实例时设置为 true。\n可用于确保初始化操作仅执行一次。\n\n```c#\nprotected override async Task OnAfterRenderAsync(bool firstRender)\n{\n    if (firstRender)\n    {\n        await ...\n    }\n}\n```\n\n **备注**\n\n呈现后立即进行的异步操作必须在 OnAfterRenderAsync 生命周期事件期间发生。\n\n即使从 OnAfterRenderAsync 返回 Task，框架也不会在任务完成后为组件再安排一个呈现循环。 这是为了避免无限呈现循环。 它与其他生命周期方法不同，后者在返回的任务完成后会再安排呈现循环。\n\n```c#\nprotected override void OnAfterRender(bool firstRender)\n{\n    if (firstRender)\n    {\n        ...\n    }\n}\n```\n\n### 禁止 UI 刷新\n\n替代 ShouldRender 以禁止 UI 刷新。 如果实现返回 true，则刷新 UI：\n\n```c#\nprotected override bool ShouldRender()\n{\n    var renderUI = true;\n\n    return renderUI;\n}\n```\n\n',40,0,'blog/1.jpg',0,1,3,4,'2020-09-04 00:00:00','2021-08-02 00:00:00'),
(179,' vue-aplayeryer',' vue-aplayeryer安装使用','### 安装\n\n```\nyarn add @moefe/vue-aplayer\n```\n\n### 使用\n\n```vue\n     <aplayer :audio=\"audio\" :lrcType=\"3\" fixed />\n        \n```\n\n### main\n\n```js\nimport APlayer from ''@moefe/vue-aplayer'';\nVue.use(APlayer, {\n  defaultCover: ''https://github.com/u3u.png'',\n  productionTip: true,\n});\n```\n\n### js\n\n```js\n  export default {\n        name: \"Vueaplayer\",\n        components: {\n\n        },\n        data() {\n            return {\n                audio: [{\n                    name: ''东西（Cover：林俊呈）'',\n                    artist: ''纳豆'',\n                    url: ''http://localhost:8081/mp3/0003.mp3'',\n                    cover: ''https://p1.music.126.net/5zs7IvmLv7KahY3BFzUmrg==/109951163635241613.jpg?param=300y300'', // prettier-ignore\n                    lrc: ''https://cdn.moefe.org/music/lrc/thing.lrc'',\n                },\n                    {\n                        name: \"0001\",\n                        artist: \"0001\",\n                        url: ''http://localhost:8081/mp3/0001.mp3'',\n                        cover: \"\",\n                        lrc: \"[00:00.00]lrc here\\n[00:01.00]aplayer\"\n                    }\n                ]\n            }\n        },       \n    }\n```\n',13,3,'blog/1.jpg',0,16,3,4,'2020-10-14 00:00:00','2021-08-02 00:00:00'),
(181,' vue-cli 4修改端口','','### 文件路径\n\n在node_modules>@vue>cli-service>optons.js\n\n### 打开文件\n\n```js\n devServer: {\n\n    open: process.platform === ''darwin'',\n    host: ''0.0.0.0'',\n    port: 80,\n    https: false,\n    hotOnly: false,\n    proxy: null, // string | Object\n    before: app => {}\n\n  }\n```\n\n',13,0,'blog/1.jpg',0,16,3,4,'2020-10-15 00:00:00','2021-08-02 00:00:00'),
(182,'重复点击vue路由报错','在引入vue-router的js文件里加上如下代码：  //push const VueRouterPush = VueRouter.prototype.push; VueRouter.prototype.push = function push(to) {   return VueRouterPush.call(this, to).catch(err => err); };','在引入vue-router的js文件里加上如下代码：\n\n```js\n//push\nconst VueRouterPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function push(to) {\n  return VueRouterPush.call(this, to).catch(err => err);\n};\n\n//replace\nconst VueRouterReplace = VueRouter.prototype.replace;\nVueRouter.prototype.replace = function replace(to) {\n  return VueRouterReplace.call(this, to).catch(err => err);\n};\n\n```\n\n\n\n',16,0,'blog/1.jpg',0,16,3,4,'2020-10-16 00:00:00','2021-08-02 00:00:00'),
(183,' vue实现分页功能','1.数据展示 <template>     <div class=\"sn-text \">         <div class=\"sn-text1\" v-for=\"(info, index) in dataShow\"              :class=\"{ ''alt'': index%2==1 }\" :key=\"info.articleId\">             <img src=\"../../assets/img/003.jpg\" align=\"right\"/>             <h5 v-on:click=\"AsyGetTestID(info.articleId)\">                 {{ info.title }}             </h5>             <p class=\"p-1\">                 {{ info.titleText }}             </p>','\n\n## 1.数据展示\n\n```vue\n<template>\n    <div class=\"sn-text \">\n        <div class=\"sn-text1\" v-for=\"(info, index) in dataShow\"\n             :class=\"{ ''alt'': index%2==1 }\" :key=\"info.articleId\">\n            <img src=\"../../assets/img/003.jpg\" align=\"right\"/>\n            <h5 v-on:click=\"AsyGetTestID(info.articleId)\">\n                {{ info.title }}\n            </h5>\n            <p class=\"p-1\">\n                {{ info.titleText }}\n            </p>\n\n<!--        v-for=\"info in newinfo\" :key=\"info.articleId\"-->\n            <div class=\"sn-text2\">\n                <p>{{ info.time }}</p>\n                <p>\n                    {{info.comment}}\n                </p>\n                <p>\n                    {{info.read}}\n                </p>\n                <p>\n                    {{info.give}}\n                </p>\n                <p>\n                    Junior\n                </p>\n                <p class=\"t-1\" @click=\"AsyGetTestID(info.articleId)\">全文阅读</p>\n            </div>\n        </div>\n\n        <div class=\"page\">\n            <ul>\n                <li class=\"inline-block text-gray-700 text-center bg-gray-400 px-4 py-2 m-2\">\n                    <a href=\"#\"  v-on:click=\"prePage\"> &lt; </a>\n\n                </li>\n\n                <li class=\"inline-block text-gray-700 text-center bg-gray-400 px-4 py-2 m-2\" v-for=\"(item, index) in totalPage\" :key=\"item.articleId\">\n                    <a href=\"#\" v-on:click=\"toPage(index)\" :class=\"{active: currentPage==index}\">{{ index+1 }}</a>\n                </li>\n                <li class=\"inline-block text-gray-700 text-center bg-gray-400 px-4 py-2 m-2\">\n                    <a href=\"#\" v-on:click=\"nextPage\">&gt;</a>\n                </li>\n            </ul>\n        </div>\n\n    </div>\n</template>\n```\n\n## 2.data\n\n```js\n data() {\n            return {\n                newinfo: [],\n                Labels: [],\n\n                //每页展示多少内容\n                perPage: 10000,\n                // 总页数\n                pageNum:1,\n                // 每页显示的个数\n                pageSize:4,\n                // 当前页\n                currentPage:0,\n                // 总数据\n                totalPage:[],\n                // 当前显示的数据\n                dataShow:[]\n\n            }\n        },\n            \n            created() {\n            this.AsyGetTest()\n        },\n           methods: {\n            nextPage: function(){\n                var vm = this;\n                if (vm.currentPage == vm.pageNum - 1) return;\n\n                vm.dataShow = vm.totalPage[++vm.currentPage]\n            },\n            prePage: function(){\n                var vm = this;\n                if (vm.currentPage == 0) return;\n                vm.dataShow = vm.totalPage[--vm.currentPage]\n            },\n            toPage: function(page){\n                var vm = this;\n                vm.currentPage = page\n                vm.dataShow = vm.totalPage[vm.currentPage];\n            },\n            //加载文章\n            AsyGetTest() {\n                request({\n                    url: ''/api/SnArticle/GetTest''\n                }).then(res => {\n                    // 只获取0到4之间的数据\n                    this.newinfo = res.data.slice(0, this.perPage);\n\n                    var vm = this;\n                    // 总页数\n                    vm.pageNum = Math.ceil(vm.newinfo.length / vm.pageSize) || 1 ;\n                    // 分组\n                    for (var i = 0; i<vm.pageNum; i++) {\n                        vm.totalPage[i] = vm.newinfo.slice(vm.pageSize * i, vm.pageSize * (i + 1))\n                    }\n                    // 取值\n                    vm.dataShow =  this.newinfo[vm.currentPage];\n                    // vm.nextPage();\n\n                }).catch((e) => {\n                    console.log(e + ''获取数据失败'');\n                });\n\n                //首次加载\n                request({\n                    url: ''/api/SnArticle/GetTest''\n                }).then(res => {\n                    // 只获取0到4之间的数据\n                    this.dataShow = res.data.slice(0, 4);\n\n                }).catch((e) => {\n                    console.log(e + ''获取数据失败'');\n                });\n            },\n           \n        }\n```\n',38,0,'blog/1.jpg',0,16,3,4,'2020-10-16 00:00:00','2021-08-02 00:00:00'),
(185,' axios 封装','1.新建api文件夹 api/index.js  import axios from ''axios''; // import qs from ''qs''  axios.defaults.baseURL = ''http://'', axios.defaults.timeout = 5000; axios.interceptors.request.use(function (config) {      // alert(\"加载中\");     // if (config.methods.toLowerCase() == \"post\") {     //     config.data = qs.string(config.data)     // }     return config; }, function (error) {     return Promise.reject(error); })  axios.interceptors.response.use(function (config) {      return config; }, function (error) {     return Promise.reject(error) })  export default axios','> 中文文档\n\n[Axios中文文档](https://www.kancloud.cn/yunye/axios/234845)\n\n\n\n### **1.新建api文件夹**\n\n> api/index.js\n\n```js\nimport axios from ''axios'';\n// import qs from ''qs''\n\naxios.defaults.baseURL = ''http://'',\naxios.defaults.timeout = 5000;\naxios.interceptors.request.use(function (config) {\n\n    // alert(\"加载中\");\n    // if (config.methods.toLowerCase() == \"post\") {\n    //     config.data = qs.string(config.data)\n    // }\n    return config;\n}, function (error) {\n    return Promise.reject(error);\n})\n\naxios.interceptors.response.use(function (config) {\n\n    return config;\n}, function (error) {\n    return Promise.reject(error)\n})\n\nexport default axios\n```\n\n\n\n### **2.api挂载到vue原型上**\n\n> main.js\n\n```js\nimport ajax from ''./api/index''\nVue.prototype.$api = ajax; // 将api挂载到vue的原型上\n```\n\n\n\n### **3.vue页面调用**\n\n> xxx.vue\n\n```js\n//查询文章总数\n                this.$api({\n                    url: ''/api/SnArticle/GetArticleCount''\n                }).then(res => {\n                    this.ArticleCount = res.data;\n\n                }).catch((e) => {\n                    console.log(e + ''获取数据失败'');\n                });\n```\n\n### **4.并发使用**\n\n> all\n\n#### 第一种方式\n\n```js\nthis.$api.all([\n    this.$api.get(''/api/SnLabels/GetLabels''),\n    this.$api.get(''/api/SnSort/GetSort''),\n    this.$api.get(''/api/SnArticle/GetfyTest?label=00&pageIndex=1&pageSize=10&isDesc=true''),\n]).then(res =>\n   {\n        this.Labels=res[0].data;\n        this.Sort = res[1].data;\n       this.article = res[2].data;\n        // console.log(res[1].data[0].userBrief)\n    }\n).catch(err=>{\n    console.log(err)\n});\n```\n\n#### 第二种方式\n\n```js\n this.$api.all([\n                    //查询标签\n                    this.$api.get(''/api/SnLabels/GetLabels''),\n                    //查询分类\n                    this.$api.get(''/api/SnSort/GetSort''),\n                    //查询最新发布前十文章\n                    this.$api.get(''/api/SnArticle/GetfyTest?label=00&pageIndex=1&pageSize=10&isDesc=true''),\n                    // 查询当前用户的说说\n                    this.$api.get(''/api/SnUserTalk/GetUserTalkFirst?UserId=4&isdesc=true''),\n\n                ]).then(this.$api.spread((res1,res2,res3,res4)=>\n                    {\n                        this.Labels=res1.data;\n                        this.Sort = res2.data;\n                        this.article = res3.data;\n                        this.UserTalk =res4.data\n\n                    })\n                ).catch(err=>{\n                    console.log(err)\n                });\n```\n\n',21,6,'blog/1.jpg',0,24,3,4,'2020-10-22 00:00:00','2021-08-02 00:00:00'),
(186,'lambda表达式',' lambda运算符：所有的lambda表达式都是用新的lambda运算符 \" `=>` \",可以叫他，“`转到`”或者 “`成为`”。运算符将表达式分为两部分，左边指定输入参数，右边是lambda的','# lambda表达式\n\n### 参考\n\n[[C# lambda表达式（简单易懂）](https://www.cnblogs.com/VikingsTHT/p/5072185.html)]:\n\n[[C# Lambda表达式学习笔记](https://www.cnblogs.com/atomy/p/12080368.html)]\n\n\n\n\n\n### lambda简介\n\n   lambda运算符：所有的lambda表达式都是用新的lambda运算符 \" `=>` \",可以叫他，“`转到`”或者 “`成为`”。运算符将表达式分为两部分，左边指定输入参数，右边是lambda的主体。lambda 表达式是一个可用于创建委托或表达式树类型的匿名函数\n\n​    lambda表达式：\n\n​        1.一个参数：`param=>expr`\n\n​        2.多个参数：`(x, y) => x == y`\n\n​        3.显式指定类型：`(int x, string s) => s.Length > x`\n\n​        4.使用空括号指定零个输入参数：`() => SomeMethod()`\n\n**示例1**\n\n> 例如，lambda 表达式 x => x * x 指定名为  x 的参数并返回 x 的值计算的。 如下面的示例所示，可以将此表达式传递给委托类型：\n\n```c#\ndelegate int del(int i);\nstatic void Main(string[] args)\n{\n    del myDelegate = x => x * x;\n    int j = myDelegate(5); //j = 25\n}      \n```\n\n**示例2 多参数**\n\n```c#\n //委托  逛超市\n        delegate int GuangChaoshi(int a,int b);\n        static void Main(string[] args)\n        {            \n            GuangChaoshi gwl = (p,z) => z-(p + 10);\n            Console.WriteLine(gwl(10,100) + \"\");   //打印80，z对应参数b，p对应参数a\n            Console.ReadKey();\n        }\n```\n\n**示例2.1 lambda主体运算复杂**\n\n```c#\n/// <summary>\n        /// 委托  逛超市\n        /// </summary>\n        /// <param name=\"a\">花费</param>\n        /// <param name=\"b\">付钱</param>\n        /// <returns>找零</returns>\n        delegate int GuangChaoshi(int a,int b);\n        static void Main(string[] args)\n        {\n            GuangChaoshi gwl = (p, z) =>\n            {\n                int zuidixiaofei = 10;\n                if (p < zuidixiaofei)\n                {\n                    return 100;\n                }\n                else\n                {\n                    return z - p - 10;\n                }\n           \n            };\n            Console.WriteLine(gwl(10,100) + \"\");   //打印80，z对应参数b，p对应参数a\n            Console.ReadKey();\n        }\n```\n\n### Func<T>委托 使用表达式\n\n\n\n**示例1**\n\n```c#\n Func<int, string> gwl = p => p + 10 + \"--返回类型为string\";            \n            Console.WriteLine(gwl(10) + \"\");   //打印‘20--返回类型为string’，z对应参数b，p对应参数a\n            Console.ReadKey();\n```\n\n\n\n**示例2**\n\n```c#\n static void Main(string[] args)\n        {\n            Func<int, int, bool> gwl = (p, j) =>\n                {\n                    if (p + j == 10)\n                    {\n                        return true;\n                    }\n                    return false;\n                };\n            Console.WriteLine(gwl(5,5) + \"\");   //打印‘True’，z对应参数b，p对应参数a\n            Console.ReadKey();\n        }\n```\n\n> 说明：从这个例子，我们能看到，p为int类型，j为int类型，返回值为bool类型。\n\n\n\n**示例3**\n\n> 将委托实例化为 Func<int,bool> myFunc，其中 int 是输入参数，bool  是返回值。 始终在最后一个类型参数中指定返回值。 **Func<int, string,  bool>** 定义包含两个输入参数（int 和  string）且返回类型为 bool 的委托。 在调用下面的 **Func** 委托时，该委托将返回 true 或 false 以指示输入参数是否等于  5：\n\n```\nFunc<int, bool> myFunc = x => x == 5;\nbool result = myFunc(4); // returns false of course\n```\n\n示例4\n\n> 当参数类型为 **Expression<Func>** 时，您也可以提供 Lambda 表达式，例如在  System.Linq.Queryable 内定义的标准查询运算符中。 如果指定 **Expression<Func>** 参数，Lambda  将编译为表达式树。\n>\n> 此处显示了一个标准查询运算符， [Count](ms-xhelp:///?method=page&id=overload%3asystem.linq.enumerable.count&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)  方法：\n\n```c#\nint[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };\nint oddNumbers = numbers.Count(n => n % 2 == 1);\n```\n\n\n\n### lambda表达式树\n\n\n\n**示例1**\n\n```c#\n /// <summary>\n        /// 表达树\n        /// </summary>\n        public void ExpressioTest()\n        {  \n            //创建一个表达式树中的参数，作为一个节点\n            Expression f = Expression.Constant(2);\n            Expression s = Expression.Constant(3);\n            Expression test = Expression.Add(f, s);\n            Console.WriteLine(test);\n        }\n\n```\n\n**示例2**\n\n> 演示如何让 Visual C#  编译器创建一个表示  lambda 表达式 num => num < 5 (C#) 或 Function(num) num < 5 (Visual Basic) 的表达式树。\n\n```c#\nExpression<Func<int, bool>> lambda = num => num < 5;\n```\n\n\n\n**示例3** 编译表达式\n\n> [Expression<  TDelegate>  ](ms-xhelp:///?method=page&id=t%3asystem.linq.expressions.expression`1&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN) 类型提供 [Compile](ms-xhelp:///?method=page&id=overload%3asystem.linq.expressions.expression`1.compile&vendor=Microsoft&topicVersion=110&topicLocale=ZH-CN)  方法，该方法将表达式树表示的代码编译成一个可执行委托。\n\n```c#\n            // 创建表达式树\n            Expression<Func<int, bool>> expr = num => num < 5;\n            // 将表达式树编译为委托。\n            Func<int, bool> result = expr.Compile();\n            // 调用委托并将结果写入控制台。\n            Console.WriteLine(result(4));\n            // Prints True.\n\n            //还可以使用简化的语法\n            //编译并运行表达式树。.\n            //下面的行可以替换前面的两个语句。\n            Console.WriteLine(expr.Compile()(4));\n            Console.ReadKey();\n            // Also prints True.\n```\n\n',20,1,'blog/1.jpg',0,27,3,4,'2020-10-27 00:00:00','2021-08-02 00:00:00'),
(187,'c#扩展方法','并不是任何方法都能作为扩展方法使用——它必须具有以下特征： 它必须在一个非嵌套的、非泛型的静态类中（所以必须是一个静态方法）； 它至少要有一个参数； 第一个参数必须附加this关键字作为前缀； 第一个参数不能有其他任何修饰符（比如out或ref）； 第一个参数的类型不能是指针类型。','# c#扩展方法\n\n\n\n### 教程参考\n\n[[C#扩展方法知多少](https://www.cnblogs.com/landeanfen/p/4632467.html)]\n\n### 声明扩展方法\n\n> 并不是任何方法都能作为扩展方法使用——它必须具有以下特征：\n> 它必须在一个非嵌套的、非泛型的静态类中（所以必须是一个静态方法）；\n>  它至少要有一个参数；\n>  第一个参数必须附加this关键字作为前缀；\n>  第一个参数不能有其他任何修饰符（比如out或ref）；\n>  第一个参数的类型不能是指针类型。  \n\n**使用扩展方法有几个值得注意的地方：**\n\n（1）扩展方法不能和调用的方法放到同一个类中\n\n（2）第一个参数必须要，并且必须是this，这是扩展方法的标识。如果方法里面还要传入其他参数，可以在后面追加参数\n\n（3）最好保证扩展方法和调用方法在同一个命名空间下\n\n\n\n#### 示例1\n\n```c#\n //必须是静态类才可以添加扩展方法\nstatic class Tests\n    {\n          public static string Test(this string test ,string name)\n        {\n            return name;\n        }\n    }\n    class Program\n    {\n\n        static void Main(string[] args)\n        {\n           string name = null;\n           var test = name.Test(\"name\");\n            Console.WriteLine(test);\n            Console.ReadKey();\n\n        }\n      }\n```\n\n### **一般对象的扩展方法**\n\n\n\n```c#\n public class Person\n    {\n        public string Name { set; get; }\n        public int Age { set; get; }\n    }\n```\n\n```c#\n//必须是静态类才可以添加扩展方法\n//Person的扩展方法，根据年龄判断是否是成年人\n        public static bool GetBIsChild(this Person oPerson)\n        {\n            if (oPerson.Age >= 18)\n                return false;\n            else\n                return true;\n        }\n```\n\nMain方法里面调用：\n\n```c#\nvar oPerson1 = new Person();\noPerson1.Age = 20;\nvar bIsChild = oPerson1.GetBIsChild();        \n```\n\n###  泛型对象的扩展方法\n\n```c#\npublic static class DataContractExtensions\n{\n  //必须是静态类才可以添加扩展方法\n  //测试方法\n  public static T Test<T>(this T instance) where T : Test2\n  {\n       T Res = default(T);\n       try\n       {\n           Res.AttrTest = instance.AttrTest.Substring(0,2);\n           //其他复杂逻辑...\n      }\n      catch\n      { }\n      return Res;\n  }\n\n}\n\npublic class Test2\n{\n　　public string AttrTest { set; get; }\n}\n```\n\n### 在空引用上调用方法\n\n```c#\n//必须是静态类才可以添加扩展方法\nstatic class Tests\n    {\n       public static bool IsNull(this object x)\n        {\n            return x == null;\n        }\n\n\n    }\n    class Program\n    {\n\n        static void Main(string[] args)\n        {\n           object y =null;\n            Console.WriteLine(y.IsNull());\n            y= new object();\n            Console.WriteLine(y.IsNull());\n            Console.ReadKey();\n\n        }\n    }    \n```\n\n> 的输出先是True，然后是False。如果IsNull是一个普通的实例方法， Main\n> 的第2行就会抛出一个异常。但是，这里的null是IsNull的实参。在扩展方法问世前， y.Isnull()\n> 这样的写法虽然可读性更好，却不合法，只能采用NullUtil.IsNull(y)这样的写法  \n\n### 集合做扩展方法\n\n```c#\n public static void ShowItems<T>(this IEnumerable<T> _al)\n        {\n            foreach (var item in _al)\n            {\n                Console.WriteLine(item);\n            }\n        }\n```\n\n```c#\n static void Main(string[] args)\n        {\n            //调用集合的扩展方法\n            str.ShowItems<char>();\n        }\n```\n\n',13,0,'blog/1.jpg',0,23,3,4,'2020-10-27 00:00:00','2021-08-02 00:00:00'),
(188,'LINQ查询表达式','“查询表达式”是用查询语法表示的查询， 是一流的语言构造。 它就像任何其他表达式一样，并且可以用在 C# 表达式有效的任何上下文中。 查询表达式由一组用类似于 SQL 或 XQuery 的声明性语法编写的子句组成。 每个子句又包含一个或多个 C# 表达式，而这些表达式本身又可能是查询表达式或包含查询表达式。','# LINQ查询表达式\n\n### 什么是查询表达式\n\n> “查询表达式”是用查询语法表示的查询， 是一流的语言构造。 它就像任何其他表达式一样，并且可以用在  C# 表达式有效的任何上下文中。 查询表达式由一组用类似于 SQL 或 XQuery  的声明性语法编写的子句组成。 每个子句又包含一个或多个 C#  表达式，而这些表达式本身又可能是查询表达式或包含查询表达式。\n>\n> 查询表达式必须以 [from](ms-xhelp:///?method=page&id=1aefd18c-1314-47f8-99ec-9bcefb09e699&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  子句开头，并且必须以 [select](ms-xhelp:///?method=page&id=df01e266-5781-4aaa-80c4-67cf28ea093f&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  或 [group](ms-xhelp:///?method=page&id=c817242e-b12c-4baa-a57e-73ee138f34d1&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  子句结尾。 在第一个 from 子句和最后一个 select 或 group  子句之间，查询表达式可以包含一个或多个下列可选子句： [where](ms-xhelp:///?method=page&id=7f9bf952-7744-4f91-b676-cddb55d107c3&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)、  [orderby](ms-xhelp:///?method=page&id=21f87f48-d69d-4e95-9a52-6fec47b37e1f&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)、  [join](ms-xhelp:///?method=page&id=76e9df84-092c-41a6-9537-c3f1cbd7f0fb&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)、  [let](ms-xhelp:///?method=page&id=13c9c1a4-ce57-48ef-8e1b-4c2a59b99fb4&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  甚至附加的 [from](ms-xhelp:///?method=page&id=1aefd18c-1314-47f8-99ec-9bcefb09e699&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  子句。 还可以使用 [into](ms-xhelp:///?method=page&id=81ec62c1-f0b1-4755-8a31-959876e77f65&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  关键字使 join 或 group 子句的结果能够充当同一查询表达式中附加查询子句的源。\n\n\n\n### 简单的查询表达式\n\n> 它含有一个数据源、一个筛选子句和一个排序子句，但不对源元素进行转换。  select  子句结束了该查询。\n\n```c#\nstatic void Main()\n{\n    // Data source.\n    int[] scores = { 90, 71, 82, 93, 75, 82 };\n\n    // Query Expression.\n    IEnumerable<int> scoreQuery = //query variable\n        from score in scores //required\n        where score > 80 // optional\n        orderby score descending // optional\n        select score; //must end with select or group\n\n    // Execute the query to produce the results\n    foreach (int testScore in scoreQuery)\n    {\n        Console.WriteLine(testScore);\n    }                  \n}\n// Outputs: 93 90 82 82\n```\n\n> 在下面的示例中，queryMajorCities 和 queryMajorCities2 都是查询变量：\n\n```c#\n//Query syntax\nIEnumerable<City> queryMajorCities =\n    from city in cities\n    where city.Population > 100000\n    select city;\n\n// Method-based syntax\nIEnumerable<City> queryMajorCities2 = cities.Where(c => c.Population > 100000);\n```\n\n\n\n> 下面的两个示例演示了不是查询变量的变量，即使每个变量都用查询进行了初始化。 它们不是查询变量的原因是它们存储了结果：\n\n```c#\nint highestScore =\n    (from score in scores\n     select score)\n    .Max();\n\n// or split the expression\nIEnumerable<int> scoreQuery =\n    from score in scores\n    select score;\n\nint highScore = scoreQuery.Max();\n\nList<City> largeCitiesList =\n    (from country in countries\n     from city in country.Cities\n     where city.Population > 10000\n     select city)\n       .ToList();\n\n// or split the expression\nIEnumerable<City> largeCitiesQuery =\n    from country in countries\n    from city in country.Cities\n    where city.Population > 10000\n    select city;\n\nList<City> largeCitiesList2 = largeCitiesQuery.ToList();\n```\n\n### 查询变量的显式类型化和隐式类型化\n\n\n\n> 使用 [var](ms-xhelp:///?method=page&id=0777850a-2691-4e3e-927f-0c850f5efe15&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  关键字指示编译器在编译时推断查询变量（或任何其他本地变量）的类型。 例如，还可以使用隐式类型化表示本主题前面部分中演示的查询示例：\n\n```c#\n// var的使用在这里和所有查询中都是可选的。\n// queryCities是一个IEnumerable<City>\nvar queryCities =\n    from city in cities\n    where city.Population > 100000\n    select city;\n```\n\n### 开始查询表达式\n\n\n\n> 表达式必须以 from  子句开头。 同时指定了数据源和范围变量。 在对源序列进行遍历的过程中，范围变量表示源序列中的每个后续元素。 将根据数据源中元素的类型对范围变量进行强类型化。 下面示例中，因为 countries 是 Country 对象数组，所以范围变量也被类型化为 Country， 这样就可以使用点运算符来访问该类型的任何可用成员。\n\n```c#\nIEnumerable<Country> countryAreaQuery =\n    from country in countries\n    where country.Area > 500000 //sq km\n    select country;\n```\n\n\n\n> 查询表达式可以包含多个 from 子句。 当源序列中的每个元素本身就是集合或包含集合时，可使用附加的 from 子句。 例如，假定您具有一个  Country 对象集合，而其中每个对象都包含一个名为 Cities 的 City 对象集合。 若要查询每个 Country 中的 City 对象，请使用两个from  子句，如下所示：\n\n```c#\nIEnumerable<City> cityQuery =\n    from country in countries\n    from city in country.Cities\n    where city.Population > 10000\n    select city;\n```\n\n###  结束查询表达式\n\n查询表达式必须以 select  子句或 group 子句结尾。\n\n#### group 子句\n\n> 使用 group  子句可产生按照指定的键组织的组序列。 键可以采用任何数据类型。 例如，下面的查询创建一个组序列，该序列包含一个或多个 Country  对象，并且它的键是 char 值。\n\n```c#\nvar queryCountryGroups =\n    from country in countries\n    group country by country.Name[0];\n```\n\n#### select 子句\n\n> 使用 select  子句可产生所有其他类型的序列。 简单的 select 子句只是产生与数据源中包含的对象具有相同类型的对象的序列。 在此示例中，数据源包含 Country 对象。 orderby 子句只是将元素重新排序，而  select 子句则产生重新排序的 Country 对象的序列。\n\n```c#\nIEnumerable<Country> sortedQuery =\n    from country in countries\n    orderby country.Area\n    select country;\n```\n\n\n\n>  在下面的示例中，select  子句对一个匿名类型序列进行投影，该序列仅包含原始元素中各字段的子集。\n\n```c#\n// 在这里，var是必需的，因为查询\n// 生成一个匿名类型\nvar queryNameAndPop =\n    from country in countries\n    select new { Name = country.Name, Pop = country.Population };\n```\n\n\n\n#### 使用“into”进行延续\n\n> 可以在 select 或  group 子句中使用 into 关键字来创建用于存储查询的临时标识符。 当您必须在分组或选择操作之后对查询执行附加查询操作时，需要这样做。\n\n```c#\n// percentileQuery is an IEnumerable<IGrouping<int, Country>>\nvar percentileQuery =\n    from country in countries\n    let percentile = (int) country.Population / 10000000\n    group country by percentile into countryGroup\n    where countryGroup.Key >= 20\n    orderby countryGroup.Key\n    select countryGroup;\n\n// grouping is an IGrouping<int, Country>\nforeach (var grouping in percentileQuery)\n{\n    Console.WriteLine(grouping.Key);\n    foreach (var country in grouping)\n        Console.WriteLine(country.Name + \":\" + country.Population);\n}\n```\n\n\n\n### 筛选、排序和联接\n\n> 在 from 开始子句以及  select 或 group 结束子句之间，所有其他子句（where、join、orderby、from、let）都是可选的。 任何可选子句都可以在查询正文中使用零次或多次。\n\n#### where 子句\n\n> 使用 where  子句可以根据一个或多个谓词表达式筛选掉源数据中的某些元素。 以下示例中的 where 子句含有两个谓词。\n\n```c#\nIEnumerable<City> queryCityPop =\n    from city in cities\n    where city.Population < 200000 && city.Population > 100000\n    select city;\n```\n\n\n\n> where 子句使用一个方法来确定范围变量的当前值是偶数还是奇数。\n\n```c#\nclass WhereSample3\n{       \n    static void Main()\n    {\n        // Data source\n        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };\n\n        // Create the query with a method call in the where clause.\n        // Note: This won''t work in LINQ to SQL unless you have a\n        // stored procedure that is mapped to a method by this name.\n        var queryEvenNums =\n            from num in numbers\n            where IsEven(num)\n            select num;\n         // Execute the query.\n        foreach (var s in queryEvenNums)\n        {\n            Console.Write(s.ToString() + \" \");\n        }\n    }\n\n    // Method may be instance method or static method.\n    static bool IsEven(int i)\n    {\n        return i % 2 == 0;\n    }    \n}\n//Output: 4 8 6 2 0\n```\n\n\n\n> where  子句是一种筛选机制。 除了不能是第一个或最后一个子句外，它几乎可以放在查询表达式中的任何位置。 where 子句可以出现在 [group](ms-xhelp:///?method=page&id=c817242e-b12c-4baa-a57e-73ee138f34d1&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  子句的前面或后面，具体情况取决于是必须在对源元素进行分组之前还是之后来筛选源元素。\n>\n> 如果指定的谓词对于数据源中的元素无效，则会发生编译时错误。 这是 LINQ 提供的强类型检查的一个优点。\n>\n> 编译时，where  关键字会被转换为对 [Where](ms-xhelp:///?method=page&id=overload%3asystem.linq.enumerable.where&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)  标准查询运算符方法的调用。\n\n\n\n#### orderby 子句\n\n> 使用 orderby  子句可以按升序或降序对结果进行排序。 您还可以指定次要排序顺序。 下面的示例使用 Area 属性对 country 对象执行主要排序， 然后使用 Population 属性执行次要排序。\n\n```c#\nIEnumerable<Country> querySortedCountries =\n    from country in countries\n    orderby country.Area, country.Population descending\n    select country;\n```\n\n> ascending  关键字是可选的；如果未指定顺序，则它是默认排序顺序。 有关更多信息，请参见 [orderby  子句（C# 参考）](ms-xhelp:///?method=page&id=21f87f48-d69d-4e95-9a52-6fec47b37e1f&vendor=Microsoft&topicVersion=140&topicLocale=ZH-CN)。\n\n\n\n#### join 子句\n\n> 使用 join  子句可以根据每个元素中指定键之间的相等比较，对一个数据源中的元素与另外一个数据源中的元素进行关联和/或组合。 在 LINQ 中，联接操作是针对其元素具有不同类型的对象序列执行的。 在联接两个序列之后，必须使用 select 或  group 语句指定要存储到输出序列中的元素。 还可以使用匿名类型将每组关联元素中的属性组合为输出序列的新类型。 \n\n\n\njoin后面跟所要连接的集合，on后面跟的是连接条件。\n\n```c#\nvar categoryQuery =\n    from cat in categories\n    join prod in products on cat equals prod.Category\n    select new { Category = cat, Name = prod.Name };\n```\n\n\n\n> join 子句使用特殊的  equals 关键字比较指定的键是否相等。 join  子句执行的所有联接都是同等联接。 join 子句的输出形式取决于所执行的联接的具体类型。 以下是三种最常见的联接类型：\n>\n> - 内部联接\n> - 分组联接\n> - 左外部联接\n\n##### 内部联接\n\n> 下面的示例演示一个简单的内部同等联接。 此查询产生一个“产品名称/类别”对平面序列。 同一类别字符串将出现在多个元素中。 如果 categories 中的某个元素不具有匹配的 products，则该类别不会出现在结果中。\n\n```c#\nvar innerJoinQuery =\n    from category in categories\n    join prod in products on category.ID equals prod.CategoryID\n    select new { ProductName = prod.Name, Category = category.Name }; //produces flat sequence\n```\n\n\n\n##### [Group Join](#)\n\n> 含有 into 表达式的  join 子句称为分组联接。\n\n```c#\nvar innerGroupJoinQuery =\n    from category in categories\n    join prod in products on category.ID equals prod.CategoryID into prodGroup\n    select new { CategoryName = category.Name, Products = prodGroup };\n```\n\n\n\n\n\n##### 左外部联接\n\n> 在左外部联接中，将返回左侧源序列中的所有元素，即使它们在右侧序列中没有匹配的元素也是如此。  若要在 LINQ 中执行左外部联接，请将 **DefaultIfEmpty**  方法与分组联接结合起来，以指定要在某个左侧元素不具有匹配元素时产生的默认右侧元素。 可以使用  null 作为任何引用类型的默认值，也可以指定用户定义的默认类型。  下面的示例演示了用户定义的默认类型：\n\n```c#\nvar leftOuterJoinQuery =\n    from category in categories\n    join prod in products on category.ID equals prod.CategoryID into prodGroup\n    from item in prodGroup.DefaultIfEmpty(new Product { Name = String.Empty, CategoryID = 0 })\n    select new { CatName = category.Name, ProdName = item.Name };\n```\n\n##### [关联多个条件的写法](https://www.cnblogs.com/willingtolove/p/11872645.html)\n\n\n\n###### 1、sql语句：\n\n```sql\nselect * from Users u join Teachers t \non u.UserID==t.TeacherID and u.Name=t.Name\n```\n\n###### 2、linq写法：\n\n**1）、方法一：**\n将多个字段的比较，new 一个对象进行比较；\n注意：对象的属性名要保持一致；\n\n```csharp\nvar userInfos = from u in db.Users join t in db.Teachers \n				on new { u.UserID , u.Name } equals new {  UserID = t.TeacherID,t.Name }\n				select new { ID=u.UserID, t.Name };\n```\n\n**2）、方法二：**\n\n```csharp\nvar userInfos = from u in db.Users\n                from t in db.Teachers\n                where u.UserID == t.TeacherID && u.Name == t.Name\n                select new { ID=u.UserID, t.Name };\n```\n\n\n\n#### let 子句\n\n> 使用 let  子句可以将表达式（如方法调用）的结果存储到新的范围变量中。 在下面的示例中，范围变量 firstName 存储了 Split  返回的字符串数组的第一个元素。\n\n\n\n```c#\nstring[] names = { \"Svetlana Omelchenko\", \"Claire O''Donnell\", \"Sven Mortensen\", \"Cesar Garcia\" };\nIEnumerable<string> queryFirstNames =\n    from name in names\n    let firstName = name.Split(new char[] { '' '' })[0]\n    select firstName;\n\nforeach (string s in queryFirstNames)\n    Console.Write(s + \" \");\n//Output: Svetlana Claire Sven Cesar\n```\n\n#### 查询表达式中的子查询\n\n> 查询子句本身可能包含一个查询表达式，该查询表达式有时称为“子查询”。 每个子查询都以它自己的 from  子句开头，该子句不一定指向第一个 from 子句中的同一数据源。  例如，下面的查询演示了一个在 select  语句中使用的查询表达式，用来检索分组操作的结果。\n\n```c#\nvar queryGroupMax =\n    from student in students\n    group student by student.GradeLevel into studentGroup\n    select new\n    {\n        Level = studentGroup.Key,\n        HighestScore =\n            (from student2 in studentGroup\n             select student2.Scores.Average())\n             .Max()\n    };\n```\n\n\n\n### 在查询表达式中处理 Null 值\n\n> 采用防御方式进行编码以避免 null 引用异常，如下面的示例中所示：\n\n```c#\nvar query1 =\n    from c in categories\n    where c != null\n    join p in products on c.ID equals\n        (p == null ? null : p.CategoryID)\n    select new { Category = c.Name, Name = p.Name };\n```\n\n\n\n> 在 join 子句中，只要其中一个比较键是可以为 null  的类型，您就可以在查询表达式中将另一个比较键强制转换成可以为 null 的类型。 在下面的示例中，假定 EmployeeID 是一个列，其中包含类型为  int? 的值：\n\n```c#\nvoid TestMethod(Northwind db)\n{\n    var query =\n        from o in db.Orders\n        join e in db.Employees\n            on o.EmployeeID equals (int?)e.EmployeeID\n        select new { o.OrderID, e.FirstName };\n}\n```\n\n\n\n### 在查询表达式中处理异常\n\n> 下面的示例演示如何将异常处理代码移至查询表达式外部。 仅当该方法不依赖于查询的任何本地变量时，才能这样做。\n\n```c#\nclass ExceptionsOutsideQuery\n{\n    static void Main()\n    {\n        // DO THIS with a datasource that might\n        // throw an exception. It is easier to deal with\n        // outside of the query expression.\n        IEnumerable<int> dataSource;\n        try\n        {\n            dataSource = GetData();\n        }\n        catch (InvalidOperationException)\n        {\n            // Handle (or don''t handle) the exception \n            // in the way that is appropriate for your application.\n            Console.WriteLine(\"Invalid operation\");\n            goto Exit;\n        }\n\n        // If we get here, it is safe to proceed.\n        var query = from i in dataSource\n                    select i * i;\n\n        foreach (var i in query)\n            Console.WriteLine(i.ToString());\n\n        //Keep the console window open in debug mode\n        Exit:\n        Console.WriteLine(\"Press any key to exit\");\n        Console.ReadKey();\n    }\n\n    // A data source that is very likely to throw an exception!\n    static IEnumerable<int> GetData()\n    {\n        throw new InvalidOperationException();\n    }\n}\n```\n\n\n\n### **简单的linq语法**\n\n转自:[[C# LINQ语法详解](https://www.cnblogs.com/zhaoshujie/p/10434657.html)]\n\n#### **1.简单的linq语法**\n\n\n\n```c#\n//1\nvar ss = from r in db.Am_recProScheme\n         select r;\n//2\nvar ss1 = db.Am_recProScheme;\n//3\nstring sssql = \"select * from Am_recProScheme\";\n```\n\n\n\n#### 2.带where的查询\n\n\n\n```c#\n//1\nvar ss = from r in db.Am_recProScheme\n         where r.rpId > 10\n         select r;\n//2\nvar ss1 = db.Am_recProScheme.Where(p => p.rpId > 10);\n//3\nstring sssql = \"select * from Am_recProScheme where rpid>10\";\n```\n\n\n\n#### 3.简单的函数计算（count，min，max，sum）\n\n\n\n```c#\n//1\n////获取最大的rpId\n//var ss = (from r in db.Am_recProScheme\n//          select r).Max(p => p.rpId);\n////获取最小的rpId\n//var ss = (from r in db.Am_recProScheme\n//          select r).Min(p => p.rpId);\n//获取结果集的总数\n//var ss = (from r in db.Am_recProScheme                  \n//         select r).Count();\n//获取rpId的和\nvar ss = (from r in db.Am_recProScheme\n          select r).Sum(p => p.rpId);\n\n\n//2\n//var ss1 = db.Am_recProScheme.Max(p=>p.rpId);\n//var ss1 = db.Am_recProScheme.Min(p => p.rpId);\n//var ss1 = db.Am_recProScheme.Count() ;\nvar ss1 = db.Am_recProScheme.Sum(p => p.rpId);\nResponse.Write(ss);\n\n//3\nstring sssql = \"select max(rpId) from Am_recProScheme\";\n       sssql = \"select min(rpId) from Am_recProScheme\";\n       sssql = \"select count(1) from Am_recProScheme\";\n       sssql = \"select sum(rpId) from Am_recProScheme\";\n```\n\n\n\n#### 4.排序order by desc/asc\n\n\n\n```c#\nvar ss = from r in db.Am_recProScheme\n         where r.rpId > 10\n         orderby r.rpId descending  //倒序\n         //  orderby r.rpId ascending   //正序\n         select r;\n//正序\nvar ss1 = db.Am_recProScheme.OrderBy(p => p.rpId).Where(p => p.rpId > 10).ToList();\n//倒序\nvar ss2 = db.Am_recProScheme.OrderByDescending(p => p.rpId).Where(p => p.rpId > 10).ToList();\nstring sssql = \"select * from Am_recProScheme where rpid>10 order by rpId [desc|asc]\";\n```\n\n\n\n#### 5.top(1)\n\n\n\n```c#\n//如果取最后一个可以按倒叙排列再取值\nvar ss = (from r in db.Am_recProScheme\n          select r).FirstOrDefault();\n//（）linq to ef 好像不支持 Last() \nvar ss1 = db.Am_recProScheme.FirstOrDefault();\n//var ss1 = db.Am_recProScheme.First();          \nstring sssql = \"select top(1) * from Am_recProScheme\";\n```\n\n\n\n#### 6.跳过前面多少条数据取余下的数据\n\n\n\n```c#\n//1\nvar ss = (from r in db.Am_recProScheme\n          orderby r.rpId descending\n          select r).Skip(10); //跳过前10条数据，取10条之后的所有数据   \n//2  \nvar ss1 = db.Am_recProScheme.OrderByDescending(p => p.rpId).Skip(10).ToList();\n//3\nstring sssql = \"select * from  (select ROW_NUMBER()over(order by rpId desc) as rowNum, * from [Am_recProScheme]) as t where rowNum>10\";\n```\n\n\n\n#### 7.分页数据查询\n\n\n\n```c#\n//1\nvar ss = (from r in db.Am_recProScheme\n          where r.rpId > 10\n          orderby r.rpId descending\n          select r).Skip(10).Take(10); //取第11条到第20条数据\n//2 Take(10): 数据从开始获取，获取指定数量（10）的连续数据\nvar ss1 = db.Am_recProScheme.OrderByDescending(p => p.rpId).Where(p => p.rpId > 10).Skip(10).Take(10).ToList();\n//3\nstring sssql = \"select * from  (select ROW_NUMBER()over(order by rpId desc) as rowNum, * from [Am_recProScheme]) as t where rowNum>10 and rowNum<=20\";\n```\n\n\n\n#### 8.包含，类似like ''%%''\n\n\n\n```c#\n//1\nvar ss = from r in db.Am_recProScheme\n         where r.SortsText.Contains(\"张\")\n         select r;\n//2\nvar ss1 = db.Am_recProScheme.Where(p => p.SortsText.Contains(\"张\")).ToList();\n//3\nstring sssql = \"select * from Am_recProScheme where SortsText like ''%张%''\";\n```\n\n\n\n#### 9.分组group by\n\n\n\n```c#\n//1\nvar ss = from r in db.Am_recProScheme\n         orderby r.rpId descending\n         group r by r.recType into n\n         select new\n         {\n             n.Key,  //这个Key是recType\n             rpId = n.Sum(r => r.rpId), //组内rpId之和\n             MaxRpId = n.Max(r => r.rpId),//组内最大rpId\n             MinRpId = n.Min(r => r.rpId), //组内最小rpId\n         };\nforeach (var t in ss)\n{\n    Response.Write(t.Key + \"--\" + t.rpId + \"--\" + t.MaxRpId + \"--\" + t.MinRpId);\n}\n//2\nvar ss1 = from r in db.Am_recProScheme\n         orderby r.rpId descending\n         group r by r.recType into n\n         select n;\nforeach (var t in ss1)\n{\n    Response.Write(t.Key + \"--\" + t.Min(p => p.rpId));\n}\n//3\nvar ss2 = db.Am_recProScheme.GroupBy(p => p.recType);\nforeach (var t in ss2)\n{\n    Response.Write(t.Key + \"--\" + t.Min(p => p.rpId));\n}\n//4\nstring sssql = \"select recType,min(rpId),max(rpId),sum(rpId) from Am_recProScheme group by recType\";\n```\n\n\n\n#### 10.sql中的In\n\n\n\n```c#\n//Linq\nvar ss = from p in db.Am_recProScheme\n                  where (new int?[] { 24, 25,26 }).Contains(p.rpId)\n                  select p;\nforeach (var p in ss)\n{\n    Response.Write(p.Sorts);\n}\n//SQL\nstring st = \"select * from Am_recProScheme where rpId in(24,25,26)\";\n```\n\n\n\n#### 11.内连接 INNER JOIN\n\n\n\n```c#\n//Linq\nvar ss = from r in db.Am_recProScheme\n         join w in db.Am_Test_Result on r.rpId equals w.rsId\n         orderby r.rpId descending\n         select r;\n//Lambda\nvar ss1 = db.Am_recProScheme.Join(db.Am_Test_Result, p => p.rpId, r => r.rsId, (p, r) => p).OrderByDescending(p => p.rpId).ToList();\n//SQL\nstring sssql = \"select r.* from  [Am_recProScheme] as r inner join [dbo].[Am_Test_Result] as t on r.[rpId] = t.[rsId] order by r.[rpId] desc\";\n```\n\n\n\n#### 12.左连接 LEFT JOIN\n\n\n\n```c#\n//两个DataTable关联，查找只在第一个表中的数据\nstatic void Main(string[] args)\n{\n    DataTable dt1 = new DataTable(\"Ta\");\n    DataTable dt2 = new DataTable(\"Tb\");\n    dt1.Columns.Add(\"ID\", typeof(int));\n    dt1.Columns.Add(\"Name\", typeof(string));\n    dt1.Rows.Add(1, \"小明\");\n    dt1.Rows.Add(2, \"小红\");\n    dt1.Rows.Add(3, \"小黑\");\n    dt2.Columns.Add(\"ID\", typeof(int));\n    dt2.Columns.Add(\"Name\", typeof(string));\n    dt2.Rows.Add(1, \"小黄\");\n    dt2.Rows.Add(2, \"小红\");\n    dt2.Rows.Add(3, \"小强\");\n    //方法一：Linq\n    //var query = from q1 in dt1.AsEnumerable()\n    //            join q2 in dt2.AsEnumerable()\n    //            on q1.Field<string>(\"Name\") equals q2.Field<string>(\"Name\") into tmp\n    //            from q3 in tmp.DefaultIfEmpty()\n    //            where q3 == null\n    //            select new\n    //            {\n    //                ID = q1.Field<int>(\"ID\"),\n    //                Name = q1.Field<string>(\"Name\")\n    //            };\n    //方法二：Lambda\n    var query = dt1.AsEnumerable().GroupJoin(\n        dt2.AsEnumerable(),\n        x => x.Field<string>(\"Name\"),\n        y => y.Field<string>(\"Name\"),\n        (x, y) => y.DefaultIfEmpty(). Where(w => w == null).\n        Select(z => new { ID = x.Field<int>(\"ID\"), Name = x.Field<string>(\"Name\") })\n        ).SelectMany(x => x);\n    foreach (var item in query)\n    {\n        Console.WriteLine($\"ID={item.ID}    Name={item.Name}\");\n    }    Console.Read();\n}\n```\n\n\n\n![img](https://img2018.cnblogs.com/blog/814410/201903/814410-20190327163706993-1949550596.png)\n\n 三表连接\n\n```c#\nSELECT id, name, jname, cname   \n        FROM userinfo u   \n        LEFT JOIN job j on u.job = j.jid   \n        LEFT JOIN city c on u.city = c.cid  \n```\n\n\n\n```c#\nvar list = (  \n    from u in dc.userinfos  \n        join j in dc.jobs on u.job equals j.jid into j_join  \n    from x in j_join.DefaultIfEmpty()  \n        join c in dc.cities on u.city equals c.cid into c_join  \n    from v in c_join.DefaultIfEmpty()  \n    select new  \n    {  \n        id = u.id,  \n        name = u.name,  \n        jname = x.jname,  \n        cname = v.cname,  \n        /*u1=u,x1=x,v1=v*/  \n        //不要用对象的方式 因为对象可能为null那么对象.属性就会抛异常  \n    }  \n    ).ToList();  \n      \n    for (var i = 0; i < list.Count(); i++)  \n    {  \n        Console.WriteLine(list[i].name + ''\\t'' + list[i].jname + ''\\t'' + list[i].cname); //字段为null不报异常  \n        //Console.WriteLine(list[i].u1.name+''\\t''+list[i].x1.jname+''\\t''+list[i].v1.cname+\"\\r\\n\"); //对象x1 v1 有可能为null 抛异常  \n    }  \n    Console.ReadLine();\n```\n\n\n\n \n\n#### 实例用法：\n\n\n\n```c#\n//数据库 + 自定义名称 =new 数据库\nmydbDataContext con = new mydbDataContext();\n//模糊查询表达式中用.Contains\ncon.car.Where(r=>r.name.Contains(TextBox1.Text.Trim())).ToList(）;\n//开头查用.StartWith\ncon.car.Where(r => r.name.StartsWith(TextBox1.Text)).ToList();\n//结尾查用.EndWith\ncon.car.Where(r => r.name.EndsWith(TextBox1.Text)).ToList();\n//最大值\ncon.car.Max(r => r.price * r.oil).ToString();\n//最小值\ncon.car.Min(r => r.price).ToString();\n//求和\ncon.car.Sum(r => r.price).ToString();\n//平均值\ncon.car.Average(r => r.price).ToString();\n//升序：\ncon.car.OrderBy(r => r.price).ToList();\n//降序：\ncon.car.OrderByDescending(r => r.price).ToList();\n\n//上一页，下一页，组合查询：\nint PageCount = 5;//每页显示条数\n//上一页，PageCount_Label.Text为当前页码\nint pageNum = Convert.ToInt32(PageCount_Label.Text) - 1;\nRepeater1.DataSource = con.car.Skip((pageNum - 1) * PageCount).Take(PageCount);\nRepeater1.DataBind(); \nPageCount_Label.Text = pageNum.ToString();\n//下一页\nint pageNum = Convert.ToInt32(PageCount_Label.Text) + 1;\nRepeater1.DataSource = con.car.Skip((pageNum - 1) * PageCount).Take(PageCount);\nRepeater1.DataBind();\nPageCount_Label.Text = pageNum.ToString();\n//组合查询的点击事件\nList<car> list = con.car.ToList();\nif (TextBox2.Text != \"\")\n{\n    List<car> list1 = con.car.Where(r => r.name.Contains(TextBox2.Text)).ToList();\n    list = list.Intersect(list1).ToList();\n}\nif (TextBox3.Text != \"\")\n{\n    List<car> list1 = con.car.Where(r => r.oil == Convert.ToDecimal(TextBox3.Text)).ToList();\n    list = list.Intersect(list1).ToList();\n}\nif (TextBox4.Text != \"\")\n{\n    List<car> list1 = con.car.Where(r => r.powers == Convert.ToInt32(TextBox4.Text)).ToList();\n    list = list.Intersect(list1).ToList();\n}\nRepeater1.DataSource = list;\nRepeater1.DataBind();\n```\n\n',56,0,'blog/1.jpg',0,27,3,4,'2020-10-29 00:00:00','2021-08-02 00:00:00'),
(189,'EF的四种增删改查方式(转载)','增删改查方式','[增删改查方式](https://blog.csdn.net/AKahong/article/details/106826409?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param)',55,6,'blog/5.jpg',0,2,7,4,'2020-11-09 00:00:00','2021-08-02 00:00:00'),
(190,'C# 9 新特性的实际运用(转载)','第一出：record 类型 转自:博客园 record ，我还是用原词吧，我知道有翻译为“记录类型”的说法。只是，只是，老周老觉得这不太好听，可是老周也找不出更好的词语，还是用回 record吧。  record 是引用类型，跟 class 很像（确实差不多）。那么，用人民群众都熟悉的 class 不香吗，为何要新增个 record 呢？答：为了数据比较的便捷。','## 第一出：record 类型\n\n转自:[博客园](https://www.cnblogs.com/tcjiaan/p/13947928.html)\nrecord ，我还是用原词吧，我知道有翻译为“记录类型”的说法。只是，只是，老周老觉得这不太好听，可是老周也找不出更好的词语，还是用回 record吧。\n\nrecord 是**引用类型**，跟 class 很像（确实差不多）。那么，用人民群众都熟悉的 class 不香吗，为何要新增个 record 呢？答：为了数据比较的便捷。\n\n不明白？没事，往下看。最近有一位热心邻居送了老周一只宠物：\n\n```c#\n    public class Cat\n    {\n        public string Nick { get; set; }\n        public string Name { get; set; }\n        public int Age { get; set; }\n    }\n```\n\n这只新宠物可不简单，一顶一的高级吃货。鱼肉、猪肉、鸡腿、饼干、豆腐、面包、水果、面条、小麦、飞蛾……反正，只要它能塞进嘴里的，它都吃。\n\n接下来，我们 new 两个宠物实例。\n\n```c#\n            // 两个实例描述的是同一只猫\n            Cat pet1 = new Cat\n            {\n                Nick = \"松子\",\n                Name = \"Jack\",\n                Age = 1\n            };\n            Cat pet2 = new Cat\n            {\n                Nick = \"松子\",\n                Name = \"Jack\",\n                Age = 1\n            };\n\n            // 居然不是同一只猫\n            Console.WriteLine(\"同一只？{0}\", pet1 == pet2);\n```\n\n\n\n其实，两个实例描述的都是我家的乖乖。可是，输出的是：\n\n```c#\n同一只？False\n```\n\n这是因为，在相等比较时，人家关心的类型引用——引用的是否为同一个实例。但是，在数据处理方案中，我们更关注对象中的字段/属性是否相等，即内容比较。\n\n现在，把 Cat 的声明改为 record 类型。\n\n```c#\n    public record Cat\n    {\n        public string Nick { get; set; }\n        public string Name { get; set; }\n        public int Age { get; set; }\n    }\n```\n\n然后同样用上面的 pet1 和 pet2 实例进行相等比较，得到预期的结果：\n\n```c#\n同一只？True\n```\n\n \n\nrecord 类型让你省去了重写相等比较（重写 Equals、GetHashCode 等方法或重载运算符）的逻辑。\n\n实际上，代码在编译后 record 类型也是一个类，但自动实现了成员相等比较的逻辑。以前你要手动去折腾的事现在全交给编译器去干。\n\n假如，有一个 User 类型，用于表示用户信息（包括用户名、密码），然后这个 User 类型在数据处理方案中可能会产生N多个实例。例如你根据条件从EF模型中筛选出一个 User 实例 A，根据用户输入的登录名和密码产生了 User 实例 B。为了验证用户输入的登录信息是否正确，如果 User 是 class，你可能要这样判断：\n\n```c#\nif(A.UserName == B.UserName && A.Password == B.Password)\n{\n    ..................\n}\n```\n\n但要是你把 User 定义为 record 类型，那么，一句话的工夫：\n\n```c#\nA == B\n```\n\n \n\n## 第二出：模式匹配（Pattern Matching）\n\n\"模式匹配\"这个翻译感觉怪怪滴，老周还没想出什么更好的词语。模式匹配并不是什么神奇的东西，它只是在对变量值进行检测时的扩展行为。以前，老感觉C++/C# 的 switch 语句不够强大，因为传统的用法里面，每个 case 子句只能比较单个常量值。比如\n\n\n\n```c#\n            int 考试成绩 = 85;\n\n            switch (考试成绩)\n            {\n                case 10:\n                    Console.WriteLine(\"才考这么点破分啊\");\n                    break;\n                case 50:\n                    Console.WriteLine(\"还差一点，就合格了\");\n                    break;\n                case 85:\n                    Console.WriteLine(\"真是秀\");\n                    break;\n                case 90:\n                    Console.WriteLine(\"奇迹发生\");\n                    break;\n            }\n```\n\n\n\n我幻想着，要是能像下面这样写就好了：\n\n\n\n```c#\n            switch (考试成绩)\n            {\n                case 0:\n                    Console.WriteLine(\"缺考？\");\n                    break;\n                case > 0 && <= 30:\n                    Console.WriteLine(\"太烂了\");\n                    break;\n                case > 30 && < 60:\n                    Console.WriteLine(\"还是不行\");\n                    break;\n                case >= 60 && < 80:\n                    Console.WriteLine(\"还得努力\");\n                    break;\n                case >= 80 && < 90:\n                    Console.WriteLine(\"秀儿，真优秀\");\n                    break;\n                case >= 90 && <= 100:\n                    Console.WriteLine(\"不错，奇迹\");\n                    break;\n            }\n```\n\n\n\n \n\n等了很多年很多年（“千年等一回，等……”）以后，终于可以实现了。\n\n\n\n```c#\n            switch (考试成绩)\n            {\n                case 0:\n                    Console.WriteLine(\"缺考？\");\n                    break;\n                case > 0 and <= 30:\n                    Console.WriteLine(\"太烂了\");\n                    break;\n                case > 30 and < 60:\n                    Console.WriteLine(\"还是不行\");\n                    break;\n                case >= 60 and < 80:\n                    Console.WriteLine(\"还得努力\");\n                    break;\n                case >= 80 and < 90:\n                    Console.WriteLine(\"秀儿，真优秀\");\n                    break;\n                case >= 90 and <= 100:\n                    Console.WriteLine(\"不错，奇迹\");\n                    break;\n            }\n```\n\n\n\n哟西，真香。\n\n有时候，不仅要检测对象的值，还得深入到其成员。比如下面这个例子，Order类表示一条订单信息。\n\n\n\n```c#\n    public class Order\n    {\n        public int ID { get; set; }\n        public string Company { get; set; }\n        public string ContactName { get; set; }\n        public float Qty { get; set; }\n        public decimal UP { get; set; }\n        public DateTime Date { get; set; }\n    }\n```\n\n\n\n前不久，公司接到一笔Order，做成了收益应该不错。\n\n\n\n```c#\n            Order od = new Order\n            {\n                ID = 11,\n                Company = \"大嘴狗贸易有限公司\",\n                ContactName = \"陈大爷\",\n                Qty = 425.12f,\n                UP = 1000.55M,\n                Date = new(2020, 10, 27)\n            };\n```\n\n\n\n假如我要在变量 od 上做 switch，看看，就这样：\n\n\n\n```c#\n            switch (od)\n            {\n                case { Qty: > 1000f }:\n                    Console.WriteLine(\"发财了，发财了\");\n                    break;\n                case { Qty: > 500f }:\n                    Console.WriteLine(\"好家伙，年度大订单\");\n                    break;\n                case { Qty: > 100f }:\n                    Console.WriteLine(\"订单量不错\");\n                    break;\n            }\n```\n\n\n\n咦？这，这是什么鬼？莫惊莫惊，这不是鬼。它的意思是判断 Qty 属性的值，如果订单货量大于 100 就输出“订单量不错”；要是订单货量大于 1000，那就输出“发财了，发财了”。\n\n但你会说，这对大括号怎么来的呢？还记得这种 LINQ 的写法吗？\n\n\n\n```c#\n    from x in ...\n        where x.A ...\n        select new {\n            Prop1 = ...,\n            Prop2 = ...,\n            ................\n        }            \n```\n\n\n\nnew { ... } 是匿名类型实例，那如果是非匿名类型呢，看看前面的 Cat 实例初始化。\n\n```c#\n     Cat {\n         ..........\n     }\n```\n\n这就对了，这对大括号就是构造某实例的成员值用的，所以，上面的 switch 语句其实是这样写的：\n\n\n\n```c#\n            switch (od)\n            {\n                case Order{ Qty: > 1000f }:\n                    Console.WriteLine(\"发财了，发财了\");\n                    break;\n                case Order{ Qty: > 500f }:\n                    Console.WriteLine(\"好家伙，年度大订单\");\n                    break;\n                case Order{ Qty: > 100f }:\n                    Console.WriteLine(\"订单量不错\");\n                    break;\n            }\n```\n\n\n\nOrder{ ... } 就是匹配一个 Order 对象实例，并且它的 Qty 属性要符合 ... 条件。由于变量 od 始终就是 Order 类型，所以，case 子句中的 Order 就省略了，变成\n\n```c#\n                case { Qty: > 1000f }:\n                    Console.WriteLine(\"发财了，发财了\");\n                    break;\n```\n\n如果出现多个属性，则表示为多个属性设定匹配条件，它们之间是“且”的关系。比如\n\n```c#\n                case { Qty: > 100f, Company: not null }:\n                    Console.WriteLine(\"订单量不错\");\n                    break;\n```\n\n猜猜啥意思？这个是可以“望文生 yi”的，Qty 属性的值要大于 100，并且 Company 属性的值不能为 null。不为 null 的写法是 not null，不要写成 !null，因为这样太难看了。\n\n \n\n如果你的代码分支较少，你可以用 if 语句的，只是得配合 is 运算符。\n\n```c#\n            if (od is { UP: < 3000M })\n            {\n                Console.WriteLine(\"报价不理想\");\n            }\n```\n\n但是，这个写法目前有局限性，它只能用常量值来做判断，你要是这样写就会报错。\n\n```c#\n            if (od is { Date: < DateTime.Now })\n            {\n                ................\n            }\n```\n\nDateTime.Now 不是常量值，上面代码无法通过编译。\n\n \n\nis 运算符以前是用来匹配类型的，上述的用法是它的语法扩展。\n\n```c#\n            object n = 5000000L;\n            if(n is long)\n            {\n                Console.WriteLine(\"它是个长整型\");\n            }\n```\n\n进化之后的 is 运算符也可以这样用：\n\n```c#\n            object n = 5000000L;\n            if(n is long x)\n            {\n                Console.WriteLine(\"它是个长整型，存放的值是：{0}\", x);\n            }\n```\n\n如果你在 if 语句内要使用 n 的值，就可以顺便转为 long 类型并赋值给变量 x，这样就一步到位，不必再去写一句 long x = (long)n 。\n\n \n\n如果 switch... 语句在判断之后需要返回一个值，还可以把它变成表达式来用。咱们把前面的 Order 例子改一下。\n\n\n\n```c#\n            string message = od switch\n            {\n                { Qty: > 1000f }    => \"发财了\",\n                { Qty: > 500f }     => \"年度大订单\",\n                { Qty: > 100f }     => \"订单量不错\",\n                _                   => \"未知\"\n            };\n\n            Console.WriteLine(message);\n```\n\n\n\n这时候你得注意：\n\n1）switch 现在是表达式，不是语句块，所以最后大括号右边的分号不能少；\n\n2）因为 switch 成了表达式，就不能用 case 子句了，所以直接用具体的内容来匹配；\n\n3）最后返回“未知”的那个下划线（_），也就是所谓的“弃婴”，哦不，是“弃元”，就是虽然赋了值但不需要使用的变量，可以直接丢掉。这里就相当于 switch 语句块中的 default 子句，当前面所有条件都不能匹配时，就返回“未知”。\n\n \n\n## 第三出：属性的 init 访问器\n\n要首先得知道，这个 init 只用于只读属性的初始化阶段，对于可读可写的属性，和以前一样，直接 get; set; 即可。\n\n有人说这个 int 不知干啥用，那好，咱们先不说它，先来看看 C# 前些版本中新增的属性初始化语句。\n\n```c#\n    public class Dog\n    {\n        public int No { get; } = 0;\n        public string Name { get; } = \"no name\";\n        public int Age { get; } = 1;\n    }\n```\n\n你看，这样就可以给属性分配初始值了，那还要 init 干吗呢？\n\n好，我给你制造一个问题——我要是这样初始化 Dog 类的属性，你试试看。\n\n```c#\n            Dog x = new Dog\n            {\n                No = 100,\n                Name = \"吉吉\",\n                Age = 4\n            };\n```\n\n试一下，编译会出错吧。\n\n![img](https://img2020.cnblogs.com/blog/367389/202011/367389-20201109180014044-706088802.png)\n\n \n\n \n\n有些情况，你可以在属性定义阶段分配初始值，但有些时候，你必须要在代码中初始化。在过去，我们会通过定义带参数的构造函数来解决。\n\n\n\n```c#\n    public class Dog\n    {\n        public int No { get; } = 0;\n        public string Name { get; } = \"no name\";\n        public int Age { get; } = 1;\n\n        public Dog(int no, string name, int age)\n        {\n            No = no;\n            Name = name;\n            Age = age;\n        }\n    }\n```\n\n\n\n然后，这样初始化。\n\n```c#\n   Dog x = new(1001, \"吉吉\", 4);\n```\n\n \n\n可是，这样做的装逼指数依然不够高，你总不能每个类都来这一招吧，虽然不怎么辛苦，但每个类都得去写一个构造函数，不利落。\n\n于是，init 访问器用得上了，咱们把 Dog 类改改。\n\n```c#\n    public class Dog\n    {\n        public int No { get; init; }\n        public string Name { get; init; }\n        public int Age { get; init; }\n    }\n```\n\n你不用再去写带参数的构造函数了，实例时直接为属性赋值。\n\n```c#\n            Dog x = new Dog\n            {\n                No = 100,\n                Name = \"吉吉\",\n                Age = 4\n            };\n```\n\n这样一来，这些只读属性都有默认的初始值了。\n\n当然，这个赋值只在初始化过程中有效，初始化之后你再想改属性的值，没门！\n\n```c#\n            x.Name = \"冬冬\";  //错误\n            x.Age = 10;       //错误\n```',45,3,'blog/1.jpg',0,23,7,4,'2020-11-10 00:00:00','2021-08-02 00:00:00'),
(191,'获取当前系统时间','public class LibWrapDateTime 		{ 			[DllImportAttribute( \"Kernel32.dll\" )] 			public static extern void GetLocalTime(SystemTime st ); 			[DllImportAttribute( \"Kernel32.dll\" )] 			public static extern void SetLocalTime(SystemTime st ); 		}','```c#\npublic class LibWrapDateTime\n		{\n			[DllImportAttribute( \"Kernel32.dll\" )]\n			public static extern void GetLocalTime(SystemTime st );\n			[DllImportAttribute( \"Kernel32.dll\" )]\n			public static extern void SetLocalTime(SystemTime st );\n		}\n		[StructLayoutAttribute( LayoutKind.Sequential)]\n\npublic class SystemTime \n		{\n			public ushort wYear; \n			public ushort wMonth; \n			public ushort wDayOfWeek; \n			public ushort wDay; \n			public ushort wHour; \n			public ushort wMinute; \n			public ushort wSecond; \n			public ushort wMilliseconds; \n		}\n		private void button1_Click(object sender, System.EventArgs e)\n		{//获取当前系统日期时间			\n		  DateTimePicker OlddateTimePicker = new DateTimePicker();		  \n		  this.textBox1.Text=OlddateTimePicker.Value.ToLongDateString().ToString();\n          this.textBox1.Text+=OlddateTimePicker.Value.ToLongTimeString().ToString();		\n		 }\n\n		private void button2_Click(object sender, System.EventArgs e)\n		{//设置系统当前日期时间\n			if(MessageBox.Show(\"您真的确定更改系统当前日期时间吗？\",\"信息提示\",MessageBoxButtons.OK)==DialogResult.OK)\n			{\n				DateTime Year=this.dateTimePicker1.Value;\n				SystemTime MySystemTime = new SystemTime();\n				LibWrapDateTime.GetLocalTime(MySystemTime);\n				MySystemTime.wYear=(ushort)this.dateTimePicker1.Value.Year;\n				MySystemTime.wMonth=(ushort)this.dateTimePicker1.Value.Month;\n				MySystemTime.wDay=(ushort)this.dateTimePicker1.Value.Day;\n				MySystemTime.wHour=(ushort)this.dateTimePicker2.Value.Hour;\n				MySystemTime.wMinute=(ushort)this.dateTimePicker2.Value.Minute;\n				MySystemTime.wSecond=(ushort)this.dateTimePicker2.Value.Second;\n				LibWrapDateTime.SetLocalTime(MySystemTime);\n				button1_Click(null,null);\n			}\n		}\n```\n\n',13,2,'blog/1.jpg',0,14,3,4,'2020-11-25 00:00:00','2021-08-02 00:00:00'),
(192,'连接Mysql数据库','','\n### 使用\n```c#\n  string constr = \"database=test;Password=ouyang;User ID=root;server=localhost\";//数据库连接语句\n\nMySqlConnection mysqlcon = new MySqlConnection(constr);//建立新的数据库连接\n\n            MySqlConnection conn = new MySqlConnection(constr);//连接数据库 \n\n            conn.Open();//打开数据库\n\n            MySqlDataAdapter sda = new MySqlDataAdapter(\"select * from post\", conn);//\n            DataTable table = new DataTable();\n\n            sda.Fill(table);//填充数据库\n\n            this.dataGridView1.AutoGenerateColumns = true;\n            this.dataGridView1.DataSource = table;\n            this.dataGridView1.EditMode = DataGridViewEditMode.EditOnEnter;\n\n            conn.Close();//关闭数据库\n```\n\n',12,0,'blog/1.jpg',0,7,3,4,'2020-11-25 00:00:00','2021-08-02 00:00:00'),
(193,'dataGridView读写入文本','','```c#\n   constant con = new constant();\n        private void loadlistbox2()\n        {\n            dataGridView1.ColumnCount = 1;\n            string z;\n            if (File.Exists(\".//allitems.txt\"))\n            {\n                FileStream fs = new FileStream(\".//allitems.txt\", System.IO.FileMode.Open, System.IO.FileAccess.Read);\n                StreamReader sr = new StreamReader(fs, System.Text.Encoding.GetEncoding(\"utf-8\"));\n                try\n                {\n                    while (true)\n                    {\n                        z = sr.ReadLine();\n                        if (z == null) break;\n                        dataGridView1.Rows.Add(z);\n                    }\n                }\n                finally\n                {\n                    sr.Close();\n                    fs.Dispose();\n                    fs.Close();\n                }\n            }\n        }\n        string st = \"\";\n```\n\n```\nprivate void savetestitem()\n        {\n           // dataGridView1.ColumnCount = 1;\n            if (File.Exists(\".//allitems.txt\"))\n            {\n                FileStream fs = new FileStream(\".//allitems.txt\", System.IO.FileMode.Open, System.IO.FileAccess.Write);\n                StreamWriter sr = new StreamWriter(fs, System.Text.Encoding.GetEncoding(\"utf-8\"));\n                try\n                {\n                    for (int i = 0; i < 22; i++)\n                    {\n                        for (int j = 0; j < 1; j++)\n                        {\n                            st = st + dataGridView1.Rows[i].Cells[j].Value;\n                        }\n                        sr.WriteLine(st);\n                        st = \"\";\n\n                        //for (int i = 0; i < dataGridView1.Rows.Count; i++)\n                        //{\n                        //        sr.WriteLine(dataGridView1.Rows[i].Cells);\n                        //    }\n                       }\n                    }              \n                finally\n                {\n                    sr.Close();\n                    fs.Dispose();\n                    fs.Close();\n                }\n            }\n        }\n```\n\n',16,0,'blog/1.jpg',0,14,3,4,'2020-11-25 00:00:00','2021-08-02 00:00:00'),
(194,'C# winform 启动外部程序','','```c#\n//class里面放入这段代码\n[DllImport(\"shell32.dll\")]\npublic static extern int ShellExecute(IntPtr hwnd, StringBuilder lpszOp, StringBuilder lpszFile, StringBuilder lpszParams, StringBuilder lpszDir, int FsShowCmd);\n\n\n//需要打开的地方插入此段代码\n  ShellExecute(IntPtr.Zero, new StringBuilder(\"Open\"), new StringBuilder(\"test.exe\"), new StringBuilder(\"\"), new StringBuilder(@\"C:\\文件夹名\"), 1);\n```\n\n',11,1,'blog/1.jpg',0,14,3,4,'2020-11-25 00:00:00','2021-08-02 00:00:00'),
(195,' CSkin','使用教程： 1.工具箱右键-新建项-命名CSkin。  2.将CSkin.dll拖到新建的工具箱栏里。  3.控件添加完毕，控件拖拽到界面即可使用和引用。  4.窗体美化需要继承CCSkinMain。','\n下载地址:[CSkin](http://www.cskin.net/)\n\n### 使用教程：\n\n1.工具箱右键-新建项-命名CSkin。\n\n2.将CSkin.dll拖到新建的工具箱栏里。\n\n3.控件添加完毕，控件拖拽到界面即可使用和引用。\n\n4.窗体美化需要继承CCSkinMain。\n **如：**\n\n``` js\n public partial class FrmMain : Form\n```\n\n **改成：**\n\n```js\n public partial class FrmMain : CCSkinMain\n```\n\n**窗体还可以继承以下等多种主题：**\n\n``` \nSkin_Color，Skin_DevExpress，Skin_Mac，Skin_Metro，Skin_VS\n```\n\n\n\n\n\n',16,1,'blog/5.jpg',0,14,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(196,'HTML 链接','HTML 使用超级链接与网络上的另一个文档相连。几乎可以在所有的网页中找到链接。点击链接可以从一张页面跳转到另一张页面。','# HTML 链接\n\nHTML 使用超级链接与网络上的另一个文档相连。几乎可以在所有的网页中找到链接。点击链接可以从一张页面跳转到另一张页面。\n\n## HTML 超链接（链接）\n\nHTML使用标签 <a>来设置超文本链接。\n\n超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，您可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。\n\n当您把鼠标指针移动到网页中的某个链接上时，箭头会变为一只小手。\n\n在标签<a> 中使用了href属性来描述链接的地址。\n\n默认情况下，链接将以以下形式出现在浏览器中：\n\n- 一个未访问过的链接显示为蓝色字体并带有下划线。\n- 访问过的链接显示为紫色并带有下划线。\n- 点击链接时，链接显示为红色并带有下划线。\n\n> 注意：如果为这些超链接设置了 CSS 样式，展示样式会根据 CSS 的设定而显示。\n\n## HTML 链接语法\n\n`<a href=\"url\">链接文本</a>`\n\n## 实例\n\n`<a href=\"https://www.runoob.com/\">访问菜鸟教程</a>`\n\n**提示:** *\"链接文本\"* 不必一定是文本。图片或其他 HTML 元素都可以成为链接。\n\n## HTML 链接 - target 属性\n\n使用 target 属性，你可以定义被链接的文档在何处显示。\n\n下面的这行会在新窗口打开文档：\n\n## 实例\n\n`<a href=\"https://www.runoob.com/\" target=\"_blank\" rel=\"noopener noreferrer\">访问菜鸟教程!</a>`\n\n## HTML 链接- id 属性\n\nid属性可用于创建在一个HTML文档书签标记。\n\n**提示:** 书签是不以任何特殊的方式显示，在HTML文档中是不显示的，所以对于读者来说是隐藏的。\n\n## 实例\n\n在HTML文档中插入ID:\n\n`<a id=\"tips\">有用的提示部分</a>`\n\n在HTML文档中创建一个链接到\"有用的提示部分(id=\"tips\"）\"：\n\n`<a href=\"#tips\">访问有用的提示部分</a>`\n\n或者，从另一个页面创建一个链接到\"有用的提示部分(id=\"tips\"）\"：\n\n`<a href=\"https://www.runoob.com/html/html-links.html#tips\">访问有用的提示部分</a>`\n\n## HTML 链接标签\n\n| 标签 | **描述**         |\n| ---- | ---------------- |\n| <a>  | 定义一个超级链接 |\n\n## 图片链接\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<p>创建图片链接:\n<a href=\"//www.runoob.com/html/html-tutorial.html\">\n<img  border=\"10\" src=\"smiley.gif\" alt=\"HTML 教程\" width=\"32\" height=\"32\"></a></p>\n\n<p>无边框的图片链接:\n<a href=\"//www.runoob.com/html/html-tutorial.html\">\n<img border=\"0\" src=\"smiley.gif\" alt=\"HTML 教程\" width=\"32\" height=\"32\"></a></p>\n\n</body>\n</html>\n```\n\n## 在当前页面链接到指定位置\n\n \n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>菜鸟教程(runoob.com)</title>\n</head>\n<body>\n\n<p>\n<a href=\"#C4\">查看章节 4</a>\n</p>\n\n<h2>章节 1</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 2</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 3</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2><a id=\"C4\">章节 4</a></h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 5</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 6</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 7</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 8</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 9</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 10</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 11</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 12</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 13</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 14</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 15</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 16</h2>\n<p>这边显示该章节的内容……</p>\n\n<h2>章节 17</h2>\n<p>这边显示该章节的内容……</p>\n\n</body>\n</html>\n\n```\n\n## 跳出框架\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<p>跳出框架?</p> \n<a href=\"//www.runoob.com/\" target=\"_top\">点击这里!</a> \n\n</body>\n</html>\n```\n\n##  创建电子邮件链接\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<p>\n这是一个电子邮件链接：\n<a href=\"mailto:someone@example.com?Subject=Hello%20again\" target=\"_top\">\n发送邮件</a>\n</p>\n\n<p>\n<b>注意:</b> 单词之间空格使用 %20 代替，以确保浏览器可以正常显示文本。\n</p>\n\n</body>\n</html>\n```\n\n## 创建电子邮件链接2\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<p>\n这是另一个电子邮件链接：\n<a href=\"mailto:someone@example.com?cc=someoneelse@example.com&bcc=andsomeoneelse@example.com&subject=Summer%20Party&body=You%20are%20invited%20to%20a%20big%20summer%20party!\" target=\"_top\">发送邮件!</a>\n</p>\n\n<p>\n<b>注意:</b> 单词之间的空格使用 %20 代替，以确保浏览器可以正常显示文本。\n</p>\n\n</body>\n</html>\n```\n\n',13,1,'blog/1.jpg',0,13,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(197,'HTML 图像','<!DOCTYPE html> <html> <head>  <meta charset=\"utf-8\">  <title>菜鸟教程(runoob.com)</title>  </head> <body><p> 一个图像: <img src=\"smiley.gif\" alt=\"Smiley face\" width=\"32\" height=\"32\"></p>  <p> 一个动图: <img src=\"hackanm.gif\" alt=\"Computer man\" width=\"48\" height=\"48\"></p>','# HTML 图像\n\n\n\n## 插入图像\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<p>\n一个图像:\n<img src=\"smiley.gif\" alt=\"Smiley face\" width=\"32\" height=\"32\"></p>\n\n<p>\n一个动图:\n<img src=\"hackanm.gif\" alt=\"Computer man\" width=\"48\" height=\"48\"></p>\n\n<p>\n注意插入动图的语法和静态图的语法是一样的。\n</p>\n\n</body>\n</html>\n```\n\n## 从不同的位置插入图像\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<p>一个来自文件夹中的图像:</p>\n<img src=\"/images/chrome.gif\" alt=\"Google Chrome\" width=\"33\" height=\"32\"><p>一个来自菜鸟教程的图像:</p>\n<img src=\"//www.runoob.com/images/logo.png\" alt=\"runoob.com\" width=\"336\" height=\"69\">\n\n</body>\n</html>\n```\n\n## HTML 图像- 图像标签（ img）和源属性（Src）\n\n**定义图像的语法是：**\n\n`<img src=\"url\" alt=\"some_text\">`\n\n## HTML 图像- Alt属性\n\nalt 属性用来为图像定义一串预备的可替换的文本。\n\n替换文本属性的值是用户定义的。\n\n`<img src=\"boat.gif\" alt=\"Big Boat\">`\n\n在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。为页面上的图像都加上替换文本属性是个好习惯，这样有助于更好的显示信息，并且对于那些使用纯文本浏览器的人来说是非常有用的。\n\n## HTML 图像- 设置图像的高度与宽度\n\nheight（高度） 与 width（宽度）属性用于设置图像的高度与宽度。\n\n属性值默认单位为像素:\n\n`<img src=\"pulpit.jpg\" alt=\"Pulpit rock\" width=\"304\" height=\"228\">`\n\n**提示:** 指定图像的高度和宽度是一个很好的习惯。如果图像指定了高度宽度，页面加载时就会保留指定的尺寸。如果没有指定图片的大小，加载页面时有可能会破坏HTML页面的整体布局。\n\n\n\n## 排列图片\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<h4>默认对齐的图像 (align=\"bottom\"):</h4>\n<p>这是一些文本。 <img src=\"smiley.gif\" alt=\"Smiley face\" width=\"32\" height=\"32\"> 这是一些文本。</p>\n\n<h4>图片使用 align=\"middle\":</h4>\n<p>这是一些文本。 <img src=\"smiley.gif\" alt=\"Smiley face\" align=\"middle\" width=\"32\" height=\"32\">这是一些文本。</p>\n\n<h4>图片使用 align=\"top\":</h4>\n<p>这是一些文本。 <img src=\"smiley.gif\" alt=\"Smiley face\" align=\"top\" width=\"32\" height=\"32\">这是一些文本。</p>\n\n<p><b>注意:</b>在HTML 4中 align 属性已废弃，HTML5 已不支持该属性，可以使用 CSS 代替。</p>\n\n</body>\n</html>\n```\n\n## 浮动图片\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<p>\n<img src=\"smiley.gif\" alt=\"Smiley face\" style=\"float:left\" width=\"32\" height=\"32\"> 一个带图片的段落，图片浮动在这个文本的左边。\n</p>\n\n<p>\n<img src=\"smiley.gif\" alt=\"Smiley face\" style=\"float:right\" width=\"32\" height=\"32\"> 一个带图片的段落，图片浮动在这个文本的右边。\n</p>\n\n<p><b>注意:</b> 在这里我们使用了 CSS \"float\" 属性，在HTML 4中 align 属性已废弃，HTML5 已不支持该属性，可以使用 CSS 代替。</p>\n\n</body>\n</html>\n```\n\n## 设置图像链接\n\n```html\n<!DOCTYPE html>\n<html>\n<head> \n<meta charset=\"utf-8\"> \n<title>菜鸟教程(runoob.com)</title> \n</head>\n<body>\n\n<p>创建图片链接:\n<a href=\"//www.runoob.com/html/html-tutorial.html\">\n<img  border=\"10\" src=\"smiley.gif\" alt=\"HTML 教程\" width=\"32\" height=\"32\"></a></p>\n\n<p>无边框的图片链接:\n<a href=\"//www.runoob.com/html/html-tutorial.html\">\n<img border=\"0\" src=\"smiley.gif\" alt=\"HTML 教程\" width=\"32\" height=\"32\"></a></p>\n\n</body>\n</html>\n```\n\n## 设置图像映射\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>菜鸟教程(runoob.com)</title>\n</head>\n<body>\n\n<p>点击太阳或其他行星，注意变化：</p>\n\n<img src=\"planets.gif\" width=\"145\" height=\"126\" alt=\"Planets\" usemap=\"#planetmap\">\n\n<map name=\"planetmap\">\n  <area shape=\"rect\" coords=\"0,0,82,126\" alt=\"Sun\" href=\"sun.htm\">\n  <area shape=\"circle\" coords=\"90,58,3\" alt=\"Mercury\" href=\"mercur.htm\">\n  <area shape=\"circle\" coords=\"124,58,8\" alt=\"Venus\" href=\"venus.htm\">\n</map>\n\n</body>\n</html>\n\n```\n\n## HTML 图像标签\n\n|      |                            |\n| ---- | -------------------------- |\n| img  | 定义图像                   |\n| map  | 定义图像地图               |\n| area | 定义图像地图中的可点击区域 |\n\n',18,0,'blog/1.jpg',0,13,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(198,'HTML 元素','HTML 文档由 HTML 元素定义。  <p></p>  开始标签常被称为起始标签（opening tag），结束标签常称 为闭合标签（closing tag）*。','# HTML 元素\n\nHTML 文档由 HTML 元素定义。\n\n`<p></p>`\n\n*****开始标签常被称为**起始标签（opening tag）**，结束标签常称   为**闭合标签（closing tag）**。\n\n## HTML 元素语法\n\n- HTML 元素以**开始标签**起始\n- HTML 元素以**结束标签**终止\n- **元素的内容**是开始标签与结束标签之间的内容\n- 某些 HTML 元素具有**空内容（empty content）**\n- 空元素**在开始标签中进行关闭**（以开始标签的结束而结束）\n- 大多数 HTML 元素可拥有**属性**\n\n**注释:** 您将在本教程的下一章中学习更多有关属性的内容。\n\n\n\n## 嵌套的 HTML 元素\n\nHTML 文档由嵌套的 HTML 元素构成。\n\n\n\n## 实例\n\n```html\n<!DOCTYPE html>\n<html>\n<body>\n<p>这是第一个段落。</p>\n</body>\n</html>\n```\n\n以上实例包含了三个 HTML 元素。\n\n## HTML 实例解析\n\n` <p> `元素定义了 HTML 文档中的一个段落。\n\n`<body>` 元素定义了 HTML 文档的主体。\n\n`<html>` 元素定义了整个 HTML 文档。\n\n## HTML 提示：使用小写标签\n\nHTML 标签对大小写不敏感：<P> 等同于 <p>。许多网站都使用大写的 HTML 标签。\n\n菜鸟教程使用的是小写标签，因为万维网联盟（W3C）在 HTML 4 中**推荐**使用小写，而在未来 (X)HTML 版本中**强制**使用小写。',36,1,'blog/1.jpg',0,13,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(199,'HTML  head','HTML base 元素 <base>标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接:  <head>','# HTML  head\n\n## HTML base 元素\n\n`<base>`标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接:\n\n```html\n<head>\n<base href=\"http://www.runoob.com/images/\" target=\"_blank\">\n</head>\n```\n\n## HTML  link 元素\n\n标签定义了文档与外部资源之间的关系。\n\n标签通常用于链接到样式表:\n\n```html\n<head>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">\n</head>\n```\n\n## HTML style 元素\n\n标签定义了HTML文档的样式文件引用地址.\n\n元素中你也可以直接添加样式来渲染 HTML 文档:\n\n```html\n<head>\n<style type=\"text/css\">\nbody {background-color:yellow}\np {color:blue}\n</style>\n</head>\n```\n\n## HTML meta 元素\n\n标签描述了一些基本的元数据。\n\n标签提供了元数据.元数据也不显示在页面上，但会被浏览器解析。\n\n元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者，和其他元数据。\n\n##  meta 标签- 使用实例\n\n为搜索引擎定义关键词:\n\n```html\n<meta name=\"keywords\" content=\"HTML, CSS, XML, XHTML, JavaScript\">\n```\n\n为网页定义描述内容:\n\n```html\n<meta name=\"description\" content=\"免费 Web & 编程 教程\">\n```\n\n定义网页作者:\n\n```html\n<meta name=\"author\" content=\"Runoob\">\n```\n\n每30秒钟刷新当前页面:\n\n```html\n<meta http-equiv=\"refresh\" content=\"30\">\n```\n\n## HTML  script 元素\n\nscript 标签用于加载脚本文件，如： JavaScript。\n\n## HTML head 元素\n\n|        |                                    |\n| ------ | ---------------------------------- |\n| title  | 定义了文档的标题                   |\n| base   | 定义了页面链接标签的默认链接地址   |\n| link   | 定义了一个文档和外部资源之间的关系 |\n| meta   | 定义了HTML文档中的元数据           |\n| script | 定义了客户端的脚本文件             |\n| style  | 定义了HTML文档的样式文件           |\n| head   | 定义了文档的信息                   |\n\n',66,1,'blog/1.jpg',0,13,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(200,'HTTP 响应状态码','HTTP 响应状态码','##  HTTP 响应状态码\n\n| HTTP 状态码 | 涵义                  | 解释说明                                                     |\n| :---------- | :-------------------- | :----------------------------------------------------------- |\n| 200         | OK                    | 用于一般性的成功返回，不可用于请求错误返回                   |\n| 201         | Created               | 资源被创建                                                   |\n| 202         | Accepted              | 用于资源异步处理的返回，仅表示请求已经收到。对于耗时比较久的处理，一般用异步处理来完成 |\n| 204         | No Content            | 此状态可能会出现在 PUT、POST、DELETE 的请求中，一般表示资源存在，但消息体中不会返回任何资源相关的状态或信息 |\n| 400         | Bad Request           | 用于客户端一般性错误信息返回, 在其它 4xx 错误以外的错误，也可以使用，错误信息一般置于 body 中 |\n| 401         | Unauthorized          | 接口需要授权访问，为通过授权验证                             |\n| 403         | Forbidden             | 当前的资源被禁止访问                                         |\n| 404         | Not Found             | 找不到对应的信息                                             |\n| 500         | Internal Server Error | 服务器内部错误                                               |\n\n## HTTP 共有四个谓词方法\n\n| HTTP 谓词方法 | 解释说明           |\n| :------------ | :----------------- |\n| GET           | 获取资源信息       |\n| POST          | 提交新的资源信息   |\n| PUT           | 更新已有的资源信息 |\n| DELETE        | 删除资源           |',86,4,'blog/1.jpg',0,13,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(201,'css 技巧','css 技巧','## css 技巧\n\n### 图片模糊\n\n```css\n        filter: blur(1px);\n        -webkit-filter: blur(1px); /* chrome, opera */\n        -ms-filter: blur(1px);\n        -moz-filter: blur(1px);\n```\n\n\n\n### 元素隐藏\n\n```css\nvisibility: hidden; 这个属性只是简单的隐藏某个元素，但是元素占用的空间任然存在；\nopacity: 0;``CSS3属性，设置0可以使一个元素完全透明；\nposition: absolute; 设置一个很大的 left 负值定位，使元素定位在可见区域之外；\ndisplay: none; 元素会变得不可见，并且不会再占用文档的空间；\ntransform: scale(0); 将一个元素设置为缩放无限小，元素将不可见，元素原来所在的位置将被保留；\n<div hidden=\"hidden\"> HTML5属性,效果和display:none;相同，但这个属性用于记录一个元素的状态；\nheight: 0; 将元素高度设为 0 ，并消除边框；\nfilter: blur(0); CSS3属性，将一个元素的模糊度设置为0，从而使这个元素“消失”在页面中；\n\n```\n\n### 三角形\n\n```css\n/** 正三角 */\n.triangle {\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 0 25px 40px 25px;\n  border-color: transparent transparent rgb(245, 129, 127) transparent;\n}\n```\n\n### 倒三角\n\n```css\n/** 倒三角 */\n.triangle {\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 40px 25px 0 25px;\n  border-color:  rgb(245, 129, 127) transparent transparent transparent;\n}\n```\n\n### 虚线效果\n\n```css\n.dotted-line{\n    border: 1px dashed transparent;\n    background: linear-gradient(white,white) padding-box, repeating-linear-gradient(-45deg,#ccc 0, #ccc .25em,white 0,white .75em);\n}\n```\n\n### 文本超出省略号\n\n单行文本\n\n```css\n.single-ellipsis{\n  width: 500px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n```\n\n多行文本\n\n```css\n.multiline-ellipsis {\n  display: -webkit-box;\n  word-break: break-all;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 4; //需要显示的行数\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n### 排版竖文\n\n```vue\n<div class=\"bruce flex-ct-x\">\n	<div class=\"vertical-text\">\n		<h3>情</h3>\n		<p>我见犹怜，<br>爱不释手。<br>雅俗共赏，<br>君子好逑。</p>\n	</div>\n</div>\n\n```\n\n```css\n.vertical-text {\n	writing-mode: vertical-rl;\n	h3 {\n		padding-left: 20px;\n		font-weight: bold;\n		font-size: 18px;\n		color: #f66;\n	}\n	p {\n		line-height: 30px;\n		color: #66f;\n	}\n}\n```\n\n### 灰度模式\n\n```css\nfilter: grayscale(100%);\n```\n\n### 描绘波浪线\n\n```vue\n<div class=\"bruce flex-ct-x\">\n	<p class=\"waveline-text\">波浪线文字</p>\n</div>\n```\n\n```css\n@mixin waveline($h, $color: #f66) {\n	position: relative;\n	&::after {\n		position: absolute;\n		left: 0;\n		top: 100%;\n		width: 100%;\n		height: $h;\n		background: linear-gradient(135deg, transparent, transparent 45%, $color, transparent 55%, transparent 100%), linear-gradient(45deg, transparent, transparent 45%, $color, transparent 55%, transparent 100%);\n		background-size: $h * 2 $h * 2;\n		content: \"\";\n	}\n}\n.waveline-text {\n	height: 20px;\n	line-height: 20px;\n	letter-spacing: 10px;\n	@include waveline(10px);\n}\n```\n\n### 格子背景\n\n```css\n  background-image: linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%),\n            linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%);\n            background-position: 0 0, 20px 20px;\n            background-size: 40px 40px;\n```\n\n### 下划线跟随导航栏\n\n```vue\n<div class=\"bruce flex-ct-x\">\n	<ul class=\"underline-navbar\">\n		<li>Alibaba阿里巴巴</li>\n		<li>Tencent腾讯</li>\n		<li>Baidu百度</li>\n		<li>Jingdong京东</li>\n		<li>Ant蚂蚁金服</li>\n		<li>Netease网易</li>\n	</ul>\n</div>\n```\n\n```css\n.underline-navbar {\n	display: flex;\n	li {\n		position: relative;\n		padding: 10px;\n		cursor: pointer;\n		font-size: 20px;\n		color: #09f;\n		transition: all 300ms;\n		&::before {\n			position: absolute;\n			left: 100%;\n			top: 0;\n			border-bottom: 2px solid transparent;\n			width: 0;\n			height: 100%;\n			content: \"\";\n			transition: all 300ms;\n		}\n		&:active {\n			background-color: #09f;\n			color: #fff;\n		}\n		&:hover {\n			&::before {\n				left: 0;\n				top: 0;\n				z-index: -1;\n				border-bottom-color: #09f;\n				width: 100%;\n				transition-delay: 100ms;\n			}\n			& + li::before {\n				left: 0;\n			}\n		}\n	}\n}\n```\n\n### 动态边框\n\n```vue\n<div class=\"bruce flex-ct-x\">\n	<div class=\"dynamic-border\">iCSS</div>\n</div>\n```\n\n```css\n.dynamic-border {\n	width: 200px;\n	height: 80px;\n	background: linear-gradient(0, #f66 2px, #f66 2px) no-repeat left top/0 2px,\n		linear-gradient(-90deg, #f66 2px, #f66 2px) no-repeat right top/2px 0,\n		linear-gradient(-180deg, #f66 2px, #f66 2px) no-repeat right bottom/0 2px,\n		linear-gradient(-270deg, #f66 2px, #f66 2px) no-repeat left bottom/2px 0;\n	cursor: pointer;\n	line-height: 80px;\n	text-align: center;\n	font-weight: bold;\n	font-size: 50px;\n	color: #f66;\n	transition: all 300ms;\n	&:hover {\n		background-size: 100% 2px, 2px 100%, 100% 2px, 2px 100%;\n	}\n}\n```\n\n### 自动打字\n\n```html\n<div class=\"bruce flex-ct-x\">\n	<div class=\"auto-typing\">Do You Want To Know More About CSS Development Skill</div>\n</div>\n```\n\n```css\n@mixin typing($count: 0, $duration: 0, $delay: 0) {\n	overflow: hidden;\n	border-right: 1px solid transparent;\n	width: #{$count + 1}ch;\n	font-family: Consolas, Monaco, Monospace;\n	white-space: nowrap;\n	animation: typing #{$duration}s steps($count + 1) #{$delay}s backwards, caret 500ms steps(1) #{$delay}s $duration * 2 forwards;\n}\n.auto-typing {\n	font-weight: bold;\n	font-size: 30px;\n	color: #09f;\n	@include typing(52, 5);\n}\n@keyframes typing {\n	from {\n		width: 0;\n	}\n}\n@keyframes caret {\n	50% {\n		border-right-color: currentColor;\n	}\n}\n```\n\n### 渐变色文字\n\n```css\n  <h2 class=\"gradient-text\">Gradient text</h2>\n\n<style>\n.gradient-text {\n  background-image: linear-gradient(90deg, red, blue);\n  background-clip: text;\n  color: transparent;\n}\n</style>\n\n```\n\n### 顺滑滚动\n\n```css\nhtml {\n  scroll-behavior: smooth;\n}\n```\n\n### text-shadow多阴影\n\n```css\n<h2 class=\"so-many-shadows\">This is fun</h2>\n\n<style>\n.so-many-shadows {\n  text-shadow: \n    3px 3px 0 yellow, \n    6px 6px 0 blue, \n    9px 9px red,\n    12px 12px 0 black;\n }\n</style>\n\n```\n\n### text-shadow多边框叠加\n\n```css\n.content {\n  box-shadow:\n    0 0 0 10px #EE6352,\n    0 0 0 20px #D45379,\n    0 0 0 30px #A4558F,\n    0 0 0 40px #6D588E,\n    0 0 0 50px #405378;\n}\n```\n\n\n\n### 响应式多列布局\n\n```css\n.content {\n  columns: 200px;\n}\n\n```\n\n\n\n### 动画链接下划线\n\n```css\n h5 > a {\n                position: relative;\n                text-decoration: none;\n            }\n            h5 > a:hover {\n                cursor: pointer;\n            }\n            h5 > a::before {\n                content: \"\";\n                position: absolute;\n                width: 100%;\n                height: 2px;\n                bottom: 0;\n                left: 0;\n                background-color: #7f828f;\n                visibility: hidden;\n                transform: scaleX(0);\n                transition: all 0.3s ease-in-out 0s;\n            }\n            h5 > a:hover::before {\n                visibility: visible;\n                transform: scaleX(1);\n            }\n```\n\n### 使用linear-gradient控制背景渐变\n\n```css\n.gradient-bg {\n        background: linear-gradient(135deg, #f66, #f90, #3c9, #09f, #66f) left center/400% 400%;\n        animation: move 10s infinite;\n    }\n    @keyframes move {\n        0%,\n        100% {\n            background-position-x: left;\n        }\n        50% {\n            background-position-x: right;\n        }\n    }\n```\n\n### 清除 overflow: auto;的滚动条\n\n```css\n.div{\n  overflow: auto\n}\n \n.div::-webkit-scrollbar{\n    display: none;\n}\n```\n\n\n\n### 控制文本渐变\n\n```css\n                        background-image: linear-gradient(90deg, #f66, #f90);\n                        background-clip: text;\n                        animation: hue 5s linear infinite;\n                        -webkit-text-fill-color: transparent;\n                        @keyframes hue {\n                            from {\n                                filter: hue-rotate(0);\n                            }\n                            to {\n                                filter: hue-rotate(-1turn);\n                            }\n                        }\n                    }\n```\n\n### 气泡背景墙\n\n```html\n<div class=\"bruce\" data-title=\"气泡背景墙\">\n	<ul class=\"bubble-bgwall\">\n		<li>Love</li>\n		<li>Love</li>\n		<li>Love</li>\n		<li>Love</li>\n		<li>Love</li>\n		<li>Love</li>\n		<li>Love</li>\n		<li>Love</li>\n		<li>Love</li>\n		<li>Love</li>\n	</ul>\n</div>\n```\n\n```css\n.bruce {\n	background-image: linear-gradient(270deg, #8146b4, #6990f6);\n}\n.bubble-bgwall {\n	overflow: hidden;\n	position: relative;\n	margin: 0 auto;\n	width: 100%;\n	max-width: 1200px;\n	height: 100%;\n	li {\n		display: flex;\n		position: absolute;\n		bottom: -200px;\n		justify-content: center;\n		align-items: center;\n		border-radius: 10px;\n		width: 50px;\n		height: 50px;\n		background-color: rgba(#fff, .15);\n		color: #ccc;\n		animation: bubble 15s infinite;\n		&:nth-child(1) {\n			left: 10%;\n		}\n		&:nth-child(2) {\n			left: 20%;\n			width: 90px;\n			height: 90px;\n			animation-duration: 7s;\n			animation-delay: 2s;\n		}\n		&:nth-child(3) {\n			left: 25%;\n			animation-delay: 4s;\n		}\n		&:nth-child(4) {\n			left: 40%;\n			width: 60px;\n			height: 60px;\n			background-color: rgba(#fff, .3);\n			animation-duration: 8s;\n		}\n		&:nth-child(5) {\n			left: 70%;\n		}\n		&:nth-child(6) {\n			left: 80%;\n			width: 120px;\n			height: 120px;\n			background-color: rgba(#fff, .2);\n			animation-delay: 3s;\n		}\n		&:nth-child(7) {\n			left: 32%;\n			width: 160px;\n			height: 160px;\n			animation-delay: 2s;\n		}\n		&:nth-child(8) {\n			left: 55%;\n			width: 40px;\n			height: 40px;\n			font-size: 12px;\n			animation-duration: 15s;\n			animation-delay: 4s;\n		}\n		&:nth-child(9) {\n			left: 25%;\n			width: 40px;\n			height: 40px;\n			background-color: rgba(#fff, .3);\n			font-size: 12px;\n			animation-duration: 12s;\n			animation-delay: 2s;\n		}\n		&:nth-child(10) {\n			left: 85%;\n			width: 160px;\n			height: 160px;\n			animation-delay: 5s;\n		}\n	}\n}\n@keyframes bubble {\n	0% {\n		opacity: .5;\n		transform: translateY(0) rotate(45deg);\n	}\n	25% {\n		opacity: .75;\n		transform: translateY(-400px) rotate(90deg);\n	}\n	50% {\n		opacity: 1;\n		transform: translateY(-600px) rotate(135deg);\n	}\n	100% {\n		opacity: 0;\n		transform: translateY(-1000px) rotate(180deg);\n	}\n}\n```\n\n### 自动打字器\n\n```html\n<div class=\"bruce flex-ct-x\" data-title=\"自动打字\">\n	<div class=\"auto-typing\">Do You Want To Know More About CSS Development Skill</div>\n</div>\n```\n\n```css\n@mixin typing($count: 0, $duration: 0, $delay: 0) {\n	overflow: hidden;\n	border-right: 1px solid transparent;\n	width: #{$count + 1}ch;\n	font-family: Consolas, Monaco, monospace;\n	white-space: nowrap;\n	animation: typing #{$duration}s steps($count + 1) #{$delay}s infinite backwards,\n		caret 500ms steps(1) #{$delay}s infinite forwards;\n	// animation: typing #{$duration}s steps($count + 1) #{$delay}s backwards,\n	// 	caret 500ms steps(1) #{$delay}s $duration * 2 forwards;\n}\n.auto-typing {\n	font-weight: bold;\n	font-size: 30px;\n	color: #09f;\n	@include typing(52, 5);\n}\n@keyframes caret {\n	50% {\n		border-right-color: currentColor;\n	}\n}\n@keyframes typing {\n	from {\n		width: 0;\n	}\n}\n```\n\n\n\n### 鼠标样式cursor\n```\n**default**小白 默认\n\n**pointer**小手\n\n**move**移动\n\n**text**文本\n\n**not-allowed**禁止\n```\n\n\n',120,3,'blog/1.jpg',0,12,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(202,'div盒子形状','正方形     #square {       width: 100px;       height: 100px;       background: red;     }    长方形     #rectangle {       width: 200px;       height: 100px;       background: red;     }   ','### 正方形 \n\n```css\n    #square {\n      width: 100px;\n      height: 100px;\n      background: red;\n    }\n  \n```\n\n### 长方形\n\n```\n    #rectangle {\n      width: 200px;\n      height: 100px;\n      background: red;\n    }\n  \n```\n\n### 圆形\n\n```\n   #circle {\n      width: 100px;\n      height: 100px;\n      background: red;\n      border-radius: 50%\n    }\n```\n\n### 椭圆形\n\n```\n    #oval {\n      width: 200px;\n      height: 100px;\n      background: red;\n      border-radius: 100px / 50px;\n    }\n  \n```\n\n### 三角形\n\n```\n    #triangle-up {\n      width: 0;\n      height: 0;\n      border-left: 50px solid transparent;\n      border-right: 50px solid transparent;\n      border-bottom: 100px solid red;\n    }\n  \n```\n\n```\n    #triangle-down {\n      width: 0;\n      height: 0;\n      border-left: 50px solid transparent;\n      border-right: 50px solid transparent;\n      border-top: 100px solid red;\n    }\n  \n```\n\n Left 三角形\n\n```\n    #triangle-left {\n      width: 0;\n      height: 0;\n      border-top: 50px solid transparent;\n      border-right: 100px solid red;\n      border-bottom: 50px solid transparent;\n    }\n  \n```\n\n  Right\n\n```\n    #triangle-right {\n      width: 0;\n      height: 0;\n      border-top: 50px solid transparent;\n      border-left: 100px solid red;\n      border-bottom: 50px solid transparent;\n    }\n  \n```\n\n Top Left\n\n```\n    #triangle-topleft {\n      width: 0;\n      height: 0;\n      border-top: 100px solid red;\n      border-right: 100px solid transparent;\n    }\n  \n```\n\n Top Right\n\n```\n    #triangle-topright {\n      width: 0;\n      height: 0;\n      border-top: 100px solid red;\n      border-left: 100px solid transparent;\n    }\n  \n```\n\n Bottom Left\n\n```\n    #triangle-bottomleft {\n      width: 0;\n      height: 0;\n      border-bottom: 100px solid red;\n      border-right: 100px solid transparent;\n    }\n  \n```\n\nBottom Right\n\n```\n    #triangle-bottomright {\n      width: 0;\n      height: 0;\n      border-bottom: 100px solid red;\n      border-left: 100px solid transparent;\n    }\n  \n```\n\n### 5角星\n\n\n\n```\n    #star-five {\n      margin: 50px 0;\n      position: relative;\n      display: block;\n      color: red;\n      width: 0px;\n      height: 0px;\n      border-right: 100px solid transparent;\n      border-bottom: 70px solid red;\n      border-left: 100px solid transparent;\n      transform: rotate(35deg);\n    }\n    #star-five:before {\n      border-bottom: 80px solid red;\n      border-left: 30px solid transparent;\n      border-right: 30px solid transparent;\n      position: absolute;\n      height: 0;\n      width: 0;\n      top: -45px;\n      left: -65px;\n      display: block;\n      content: '''';\n      transform: rotate(-35deg);\n    }\n    #star-five:after {\n      position: absolute;\n      display: block;\n      color: red;\n      top: 3px;\n      left: -105px;\n      width: 0px;\n      height: 0px;\n      border-right: 100px solid transparent;\n      border-bottom: 70px solid red;\n      border-left: 100px solid transparent;\n      transform: rotate(-70deg);\n      content: '''';\n    }\n  \n```\n\n### 六角形\n\n```\n    #hexagon {\n      width: 100px;\n      height: 55px;\n      background: red;\n      position: relative;\n    }\n    #hexagon:before {\n      content: \"\";\n      position: absolute;\n      top: -25px;\n      left: 0;\n      width: 0;\n      height: 0;\n      border-left: 50px solid transparent;\n      border-right: 50px solid transparent;\n      border-bottom: 25px solid red;\n    }\n    #hexagon:after {\n      content: \"\";\n      position: absolute;\n      bottom: -25px;\n      left: 0;\n      width: 0;\n      height: 0;\n      border-left: 50px solid transparent;\n      border-right: 50px solid transparent;\n      border-top: 25px solid red;\n    }\n  \n```\n\n### 八角形\n\n```\n    #octagon {\n      width: 100px;\n      height: 100px;\n      background: red;\n      position: relative;\n    }\n    #octagon:before {\n      content: \"\";\n      width: 100px;\n      height: 0;\n      position: absolute;\n      top: 0;\n      left: 0;\n      border-bottom: 29px solid red;\n      border-left: 29px solid #eee;\n      border-right: 29px solid #eee;\n    }\n    #octagon:after {\n      content: \"\";\n      width: 100px;\n      height: 0;\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      border-top: 29px solid red;\n      border-left: 29px solid #eee;\n      border-right: 29px solid #eee;\n    }\n  \n```\n\n### 心型\n\n```\n    #heart {\n      position: relative;\n      width: 100px;\n      height: 90px;\n    }\n    #heart:before,\n    #heart:after {\n      position: absolute;\n      content: \"\";\n      left: 50px;\n      top: 0;\n      width: 50px;\n      height: 80px;\n      background: red;\n      border-radius: 50px 50px 0 0;\n      transform: rotate(-45deg);\n      transform-origin: 0 100%;\n    }\n    #heart:after {\n      left: 0;\n      transform: rotate(45deg);\n      transform-origin: 100% 100%;\n    }\n  \n```\n\n\n\n\n\n\n\n',141,0,'blog/1.jpg',0,12,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(203,'使用二重循环实现数组的冒泡排序算法','class Program     {         static void Main(string[] args)         {             int[] scores = new int[5];             int i, j;  // 循环变量             int temp;  // 临时变量              // 读入成绩             Console.WriteLine(\"请输入5个学员的成绩：\");             for (i = 0; i < 5; i++)             {                 Console.WriteLine(\"请输入第{0}个学员的成绩：\", i + 1);                 scores[i] = int.Parse(Console.ReadLine());//类型转换               }','\n### 使用\n```c#\nclass Program\n    {\n        static void Main(string[] args)\n        {\n            int[] scores = new int[5];\n            int i, j;  // 循环变量\n            int temp;  // 临时变量\n            // 读入成绩\n            Console.WriteLine(\"请输入5个学员的成绩：\");\n            for (i = 0; i < 5; i++)\n            {\n                Console.WriteLine(\"请输入第{0}个学员的成绩：\", i + 1);\n                scores[i] = int.Parse(Console.ReadLine());//类型转换  \n            }\n            // 开始排序\n            for (i = 0; i < scores.Length - 1; i++)\n            {\n                for (j = 0; j < scores.Length - 1 - i; j++)\n                {\n                    if (scores[j] > scores[j + 1])\n                    {\n                        // 交换元素\n                        temp = scores[j];\n                        scores[j] = scores[j + 1];\n                        scores[j + 1] = temp;\n                    }\n                }\n            }\n            // 排序后输出\n            Console.WriteLine(\"排序后的成绩为：\");\n            for (i = 0; i < 5; i++)\n            {\n                Console.Write(\"{0}\\t\", scores[i]);\n            }\n            Console.ReadLine();\n        }\n    }\n```\n\n',155,4,'blog/1.jpg',0,23,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(204,' vue-cli 4设置字体','1 下载tff格式的字体 2 assets中新建文件夹fonts，把tff字体文件放在fonts，并在assets/css中新建font.css','\n\n### 1 下载tff格式的字体\n\n\n\n### 2 assets中新建文件夹fonts，把tff字体文件放在fonts，并在assets/css中新建font.css\n\n```css\n@font-face {\n    font-family: \"Acy\";\n    src: url(''../fonts/Acy.ttf'') format(''truetype'');\n    font-weight: normal;\n    font-style: normal;\n}\n```\n\n### 3、在mian.js中引用font.css\n\n```javascript\nimport ''./assets/css/font.css''\n```\n\n### 4、在需要使用的地方设置新字体样式就可以了\n\n```css\nfont-family: \"Acy\";\n```',152,4,'blog/1.jpg',0,16,3,4,'2020-11-26 00:00:00','2021-08-02 00:00:00'),
(205,'vue.js Interpolation inside attributes has been removed.','','\n\n### 比如\n\n```\n<img src=\"{{item.img}}\" \n```\n\n\n### 正确的用法\n```language\n<img :src=\"item.img\"\n```\n',112,5,'blog/4.jpg',0,16,9,4,'2020-12-01 00:00:00','2021-08-02 00:00:00'),
(206,' vue封装js','新建index.js import Vue from \"vue\";     /**      * 回到顶部功能实现过程：      * 1. 获取页面当前距离顶部的滚动距离（虽然IE不常用了，但还是需要考虑一下兼容性的）      * 2. 计算出每次向上移动的距离，用负的滚动距离除以5，因为滚动的距离是一个正数，想向上移动就是做一个减法      * 3. 用当前距离加上计算出的距离，然后赋值给当前距离，就可以达到向上移动的效果      * 4. 最后记得在移动到顶部时，清除定时器      */    const backtops= {         backtop: function () {','\n\n### 1.新建index.js\n\n```js\nimport Vue from \"vue\";\n    /**\n     * 回到顶部功能实现过程：\n     * 1. 获取页面当前距离顶部的滚动距离（虽然IE不常用了，但还是需要考虑一下兼容性的）\n     * 2. 计算出每次向上移动的距离，用负的滚动距离除以5，因为滚动的距离是一个正数，想向上移动就是做一个减法\n     * 3. 用当前距离加上计算出的距离，然后赋值给当前距离，就可以达到向上移动的效果\n     * 4. 最后记得在移动到顶部时，清除定时器\n     */\n   const backtops= {\n        backtop: function () {\n            {\n                var timer = setInterval(function () {\n                    let osTop = document.documentElement.scrollTop || document.body.scrollTop;\n                    let ispeed = Math.floor(-osTop / 5);\n                    document.documentElement.scrollTop = document.body.scrollTop = osTop + ispeed;\n                    this.isTop = true;\n                    if (osTop === 0) {\n                        clearInterval(timer);\n                    }\n                }, 30)\n            }\n        }\n    }\nVue.prototype.backtops = backtops;\nexport default {};\n```\n### 2.main导入js\n```js\nimport ''./components/common/backtop/index''\n```\n### 3.调用\n\n```\n this.backtops.backtop(); \n```',298,3,'blog/1.jpg',0,16,3,4,'2020-12-01 00:00:00','2021-08-02 00:00:00'),
(207,'vue富文本vue-quill-editor','// main.js import Vue from ''vue'' import VueQuillEditor from ''vue-quill-editor'' import ''quill/dist/quill.core.css'' // import styles import ''quill/dist/quill.snow.css'' // for snow ','\n### 1.安装\n\n```markdown\nnpm install vue-quill-editor -S\n```\n\n#### 2.组件挂载\n\n#### 全局挂载\n\n```js\n// main.js\nimport Vue from ''vue''\nimport VueQuillEditor from ''vue-quill-editor''\nimport ''quill/dist/quill.core.css'' // import styles\nimport ''quill/dist/quill.snow.css'' // for snow theme\nimport ''quill/dist/quill.bubble.css'' // for bubble theme\nVue.use(VueQuillEditor, /* { default global options } */)\n\n```\n\n#### 局部挂载\n\n```js\nimport \"quill/dist/quill.core.css\";\nimport \"quill/dist/quill.snow.css\";\nimport \"quill/dist/quill.bubble.css\";\nimport { quillEditor } from \"vue-quill-editor\";\n\ncomponents: {\n    quillEditor\n  },\n```\n\n### 2.组件使用\n\n```vue\n                  <quill-editor\n                    ref=\"myQuillEditor\"\n                    v-model=\"form.talkText\"\n                    :options=\"editorOption\"\n                    @blur=\"onEditorBlur($event)\"\n                    @focus=\"onEditorFocus($event)\"\n                    @ready=\"onEditorReady($event)\"\n                    class=\"editor\"\n                  />\n```\n\n### 3.配置\n\n```js\n //富文本编辑器配置\n      editorOption: {\n        //  富文本编辑器配置\n        modules: {\n          //工具栏定义的\n          toolbar: toolbarOptions\n        },\n        //主题\n        theme: \"snow\",\n        placeholder: \"请输入正文\"\n      },\n          \n    methods: {\n      //失去焦点事件\n      onEditorBlur(quill) {\n        console.log(''editor blur!'', quill)\n      },\n      //获得焦点事件\n      onEditorFocus(quill) {\n        console.log(''editor focus!'', quill)\n      },\n      // 准备富文本编辑器\n      onEditorReady(quill) {\n        console.log(''editor ready!'', quill)\n      },\n      //内容改变事件\n      onEditorChange({ quill, html, text }) {\n        console.log(''editor change!'', quill, html, text)\n        this.content = html\n      }\n    }\n          \n```\n\n#### **工具栏**\n\n```js\n// 工具栏配置\nconst toolbarOptions = [\n  [\"bold\", \"italic\", \"underline\", \"strike\"], // 加粗 斜体 下划线 删除线 -----[''bold'', ''italic'', ''underline'', ''strike'']\n  [\"blockquote\", \"code-block\"], // 引用  代码块-----[''blockquote'', ''code-block'']\n  [\n    {\n      header: 2\n    },\n    {\n      header: 3\n    }\n  ], // 1、2 级标题-----[{ header: 1 }, { header: 2 }]\n  [\n    {\n      list: \"ordered\"\n    },\n    {\n      list: \"bullet\"\n    }\n  ], // 有序、无序列表-----[{ list: ''ordered'' }, { list: ''bullet'' }]\n  [\n    {\n      script: \"sub\"\n    },\n    {\n      script: \"super\"\n    }\n  ], // 上标/下标-----[{ script: ''sub'' }, { script: ''super'' }]\n  [\n    {\n      indent: \"-1\"\n    },\n    {\n      indent: \"+1\"\n    }\n  ], // 缩进-----[{ indent: ''-1'' }, { indent: ''+1'' }]\n  [\n    {\n      direction: \"rtl\"\n    }\n  ], // 文本方向-----[{''direction'': ''rtl''}]\n  [\n    {\n      size: [\"small\", false, \"large\", \"huge\"]\n    }\n  ], // 字体大小-----[{ size: [''small'', false, ''large'', ''huge''] }]\n  [\n    {\n      header: [1, 2, 3, 4, 5, 6, false]\n    }\n  ], // 标题-----[{ header: [1, 2, 3, 4, 5, 6, false] }]\n  [\n    {\n      color: []\n    },\n    {\n      background: []\n    }\n  ], // 字体颜色、字体背景颜色-----[{ color: [] }, { background: [] }]\n  [\n    {\n      font: []\n    }\n  ], // 字体种类-----[{ font: [] }]\n  [\n    {\n      align: []\n    }\n  ], // 对齐方式-----[{ align: [] }]\n  [\"clean\"], // 清除文本格式-----[''clean'']\n  [\"image\", \"video\"] // 链接、图片、视频-----[''link'', ''image'', ''video'']\n];\n```\n\n#### css\n\n```css\n.editor {\n  line-height: normal !important;\n  height: 500px;\n}\n\n.ql-snow .ql-tooltip[data-mode=\"link\"]::before {\n  content: \"请输入链接地址:\";\n}\n\n.ql-snow .ql-tooltip.ql-editing a.ql-action::after {\n  border-right: 0px;\n  content: \"保存\";\n  padding-right: 0px;\n}\n\n.ql-snow .ql-tooltip[data-mode=\"video\"]::before {\n  content: \"请输入视频地址:\";\n}\n\n.ql-snow .ql-picker.ql-size .ql-picker-label::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item::before {\n  content: \"14px\";\n}\n\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"small\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"small\"]::before {\n  content: \"10px\";\n}\n\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"large\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"large\"]::before {\n  content: \"18px\";\n}\n\n.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=\"huge\"]::before,\n.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=\"huge\"]::before {\n  content: \"32px\";\n}\n\n.ql-snow .ql-picker.ql-header .ql-picker-label::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item::before {\n  content: \"文本\";\n}\n\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"1\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before {\n  content: \"标题1\";\n}\n\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"2\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before {\n  content: \"标题2\";\n}\n\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"3\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before {\n  content: \"标题3\";\n}\n\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"4\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before {\n  content: \"标题4\";\n}\n\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"5\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before {\n  content: \"标题5\";\n}\n\n.ql-snow .ql-picker.ql-header .ql-picker-label[data-value=\"6\"]::before,\n.ql-snow .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before {\n  content: \"标题6\";\n}\n\n.ql-snow .ql-picker.ql-font .ql-picker-label::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item::before {\n  content: \"标准字体\";\n}\n\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"serif\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"serif\"]::before {\n  content: \"衬线字体\";\n}\n\n.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=\"monospace\"]::before,\n.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=\"monospace\"]::before {\n  content: \"等宽字体\";\n}\n```\n\n',131,6,'blog/3.jpg',0,16,3,4,'2020-12-21 00:00:00','2021-08-02 00:00:00'),
(208,'Vue3使用NProgress顶部进度条','使用NProgress顶部进度条','\n### 1.安装\n\n```c#\n $ npm install --save nprogress \n $ yarn add nprogress\n```\n\n### 2.使用\n\n**App.vue**\n\n```vue\n<script lang=\"ts\">\nimport NProgress from \"nprogress\";\nimport \"nprogress/nprogress.css\";\nimport { useRouter } from \"vue-router\";\nexport default {\n  setup() {\n    const router = useRouter();\n    router.beforeEach((to, from, next) => {\n      NProgress.start();\n      next();\n    });\n    router.afterEach(() => {\n      NProgress.done();\n    });\n  },\n};\n</script>\n```\n\n### Ts报错解决\nimport NProgress from \"nprogress\";\n\n**shims-vue.d.ts**\n\n```js\ndeclare module ''nprogress'';\n```\n\n',110,5,'blog/1.jpg',0,16,3,4,'2020-12-23 00:00:00','2021-08-02 00:00:00'),
(209,'VUE提示 Object is possibly ‘null‘','方案 let table = document.querySelector(\"body\");       if (table) {         table.setAttribute(\"style\", \"background-color:#f7f7f7\");       }','\n\n### 方案\n\n```tsx\nlet table = document.querySelector(\"body\");\n      if (table) {\n        table.setAttribute(\"style\", \"background-color:#f7f7f7\");\n      }\n      // document\n      //   .querySelector(\"body\")\n      //   .setAttribute(\"style\", \"background-color:#f7f7f7\");\n```\n\n',164,13,'blog/2.jpg',0,16,3,4,'2020-12-23 00:00:00','2021-08-02 00:00:00'),
(210,'# netCore 3.1 使用jwt完成登录验证','nuget安装 Microsoft.AspNetCore.Authentication.JwtBearer 3.1.0 版本  配置appsettings.json   \"Authentication\": { //jwt     \"JwtBearer\": {       \"IsEnabled\": \"true\",       \"SecurityKey\": \"Demo_C421AAEE0D114E9C1\",       \"Issuer\": \"Demo\",       \"Audience\": \"Demo\",       \"Expiration\": 2 //token过期时间 （单位：分钟）     }   }','\n\n### nuget安装\n\nMicrosoft.AspNetCore.Authentication.JwtBearer 3.1.0 版本\n\n### 配置appsettings.json\n\n```c#\n  \"Authentication\": { //jwt\n    \"JwtBearer\": {\n      \"IsEnabled\": \"true\",\n      \"SecurityKey\": \"Demo_C421AAEE0D114E9C1\",\n      \"Issuer\": \"Demo\",\n      \"Audience\": \"Demo\",\n      \"Expiration\": 2 //token过期时间 （单位：分钟）\n    }\n  }\n```\n\n### 添加扩展类和jwt配置类\n\n#### AuthConfigure.cs\n\n```c#\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.IdentityModel.Tokens;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Snblog.Jwt\n{\n   public static class AuthConfigure\n    {\n        public static void ConfigureJwt(this IServiceCollection services, IConfiguration configuration)\n        {\n            if (bool.Parse(configuration[\"Authentication:JwtBearer:IsEnabled\"]))\n            {\n                services.AddAuthentication(options =>\n                {\n                    options.DefaultAuthenticateScheme = \"JwtBearer\";\n                    options.DefaultChallengeScheme = \"JwtBearer\";\n                }).AddJwtBearer(\"JwtBearer\", options =>\n                {\n                    options.Audience = configuration[\"Authentication:JwtBearer:Audience\"];\n \n                    options.TokenValidationParameters = new TokenValidationParameters\n                    {\n                        // The signing key must match!\n                        ValidateIssuerSigningKey = true,\n                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(configuration[\"Authentication:JwtBearer:SecurityKey\"])),\n \n                        // Validate the JWT Issuer (iss) claim\n                        ValidateIssuer = true,\n                        ValidIssuer = configuration[\"Authentication:JwtBearer:Issuer\"],\n \n                        // Validate the JWT Audience (aud) claim\n                        ValidateAudience = true,\n                        ValidAudience = configuration[\"Authentication:JwtBearer:Audience\"],\n \n                        // Validate the token expiry\n                        ValidateLifetime = true,\n \n                        // If you want to allow a certain amount of clock drift, set that here\n                        ClockSkew = TimeSpan.Zero\n                    };\n                });\n            }\n        }\n    }\n}\n```\n\n#### JwtConfig.cs\n\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Snblog.Jwt\n{\n    public class JwtConfig\n    {\n        /// <summary>\n        /// 密钥\n        /// </summary>\n        public string SecurityKey { get; set; }\n        /// <summary>\n        /// 所属者\n        /// </summary>\n        public string Issuer { get; set; }\n \n        public string Audience { get; set; }\n \n        /// <summary>\n        /// 过期时间\n        /// </summary>\n        public int Expiration { get; set; }\n    }\n}\n\n```\n\n### **配置Startup**\n\n```c#\npublic void ConfigureServices(IServiceCollection services)\n{\n    //配置jwt\n    services.ConfigureJwt(Configuration);\n    //注入JWT配置文件\n    services.Configure<JwtConfig>(Configuration.GetSection(\"Authentication:JwtBearer\"));\n    services.AddControllers();\n}\n \npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    app.UseHttpsRedirection();\n    app.UseRouting();\n    app.UseAuthentication(); //一定要在这个位置（app.UseAuthorization()上面）\n    app.UseAuthorization();\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\n    });\n}\n```\n\n### 接口上加特性：[Authorize]\n\n如\n\n```c#\n    [Authorize]\n    [Route(\"api/[controller]\")]\n    [ApiController]\n\n    public class SnArticleController : ControllerBase\n    {\n```\n\n### 登录配置\n\n```c#\n        private readonly JwtConfig jwtModel = null;\n\n\n        public SnUserController(ISnUserService service, snblogContext coreDbContext, IOptions<JwtConfig> _jwtModel)\n        {\n            _service = service;\n            _coreDbContext = coreDbContext;\n            user = coreDbContext.SnUser;\n            jwtModel = _jwtModel.Value;\n        }\n\n        [HttpGet(\"Login\")]\n        public IActionResult Login(string users, string pwd)\n        {\n            if (string.IsNullOrEmpty(users) && string.IsNullOrEmpty(pwd))\n            {\n                return Ok(\"用户密码不能为空\");\n            }\n            var data = from u in user\n                       where u.UserName == users && u.UserPwd == pwd\n                       select u.UserName;\n            if (data.Count() == 0)\n            {\n                return Ok(\"登录失败\");\n            }\n            else\n            {\n                //return Ok(\"登录成功\");\n\n\n            var claims = new List<Claim>();\n            claims.AddRange(new[]\n            {\n                new Claim(\"UserName\", \"111\"),\n                new Claim(JwtRegisteredClaimNames.Sub,\"111\"),\n                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),\n                new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.Now.ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64)\n            });\n \n            DateTime now = DateTime.UtcNow;\n            var jwtSecurityToken = new JwtSecurityToken(\n                issuer: jwtModel.Issuer,\n                audience: jwtModel.Audience,\n                claims: claims,\n                notBefore: now,\n                expires: now.Add(TimeSpan.FromMinutes(jwtModel.Expiration)),\n                signingCredentials: new SigningCredentials(new SymmetricSecurityKey(Encoding.ASCII.GetBytes(jwtModel.SecurityKey)), SecurityAlgorithms.HmacSha256)\n            );\n            \n            string token = new JwtSecurityTokenHandler().WriteToken(jwtSecurityToken);\n \n            return  Ok(token);\n\n            }\n\n        }\n```\n\n',194,19,'blog/5.jpg',0,18,3,4,'2021-02-26 00:00:00','2021-08-02 00:00:00'),
(223,' C#开发中linq与lambda写法对照','C#开发中linq与lambda写法对照，在使用C#编程过程中，有些码农在实现查询功能的时候纠结于到底使用linq还是lambda来写代码，有些还搞不清楚，现就两者之间写汗的比较整理一个表格供参考。','# C#开发中linq与lambda写法对照\n\nC#开发中linq与lambda写法对照，在使用C#编程过程中，有些码农在实现查询功能的时候纠结于到底使用linq还是lambda来写代码，有些还搞不清楚，现就两者之间写汗的比较整理一个表格供参考。\n## linq与lambda写法对照\n\n| **SQL**                                                      | **LINQ**                                                     | **Lambda**                                                   |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| SELECT * FROM Employee                                       | from e in Employees select e                                 | Employees.Select ()                                          |\n| SELECT e.LoginID,e.JobTitle FROM Employee AS e               | from e in Employees select new {e.LoginID, e.JobTitle}       | Employees.Select ( e => new{LoginID = e.LoginID,JobTitle = e.JobTitle} ) |\n| SELECT e.LoginID AS ID, e.JobTitle AS Title FROM Employee AS e | from e in Employees select new {ID = e.LoginID, Title = e.JobTitle} | Employees.Select (e => new{ID = e.LoginID,Title = e.JobTitle } ) |\n| SELECT DISTINCT e.JobTitle FROM Employee AS e                | (from e in Employees select e.JobTitle).Distinct()           | Employees.Select (e => e.JobTitle) .Distinct ()              |\n| SELECT e.* FROM Employee AS e WHERE e.LoginID = ‘test’       | from e in Employees where e.LoginID == “test” select e       | Employees.Where (e => (e.LoginID == “test”))                 |\n| SELECT e.* FROM Employee AS e WHERE e.LoginID = ‘test’ AND e.SalariedFlag = 1 | from e in Employees where e.LoginID == “test” && e.SalariedFlag select e | Employees.Where (e => ((e.LoginID == “test”) && e.SalariedFlag)) |\n| SELECT e.* FROM Employee AS e WHERE e.VacationHours >= 2 AND e.VacationHours <= 10 | from e in Employees where e.VacationHours >= 2 && e.VacationHours <= 10 select e | Employees.Where (e => (((Int32)(e.VacationHours) >= 2) && ((Int32)(e.VacationHours) <= 10))) |\n| SELECT e.* FROM Employee AS e ORDER BY e.NationalIDNumber    | from e in Employees orderby e.NationalIDNumber select e      | Employees.OrderBy (e => e.NationalIDNumber)                  |\n| SELECT e.* FROM Employee AS e ORDER BY e.HireDate DESC, e.NationalIDNumber | from e in Employees orderby e.HireDate descending, e.NationalIDNumber select e | Employees.OrderByDescending (e => e.HireDate).ThenBy (e => e.NationalIDNumber) |\n| SELECT e.* FROM Employee AS e WHERE e.JobTitle LIKE ‘Vice%’ OR SUBSTRING(e.JobTitle, 0, 3) = ‘Pro’ | from e in Employees where e.JobTitle.StartsWith(“Vice”) \\|\\| e.JobTitle.Substring(0, 3) == “Pro” select e | Employees.Where (e => (e.JobTitle.StartsWith (“Vice”) \\|\\| (e.JobTitle.Substring (0, 3) == “Pro”))) |\n| SELECT SUM(e.VacationHours) FROM Employee AS e               |                                                              | Employees.Sum(e => e.VacationHours);                         |\n| SELECT COUNT(*) FROM Employee AS e                           |                                                              | Employees.Count();                                           |\n| SELECT SUM(e.VacationHours) AS TotalVacations,e.JobTitle FROM Employee AS e GROUP BY e.JobTitle | from e in Employees group e by e.JobTitle into g select new {JobTitle = g.Key, TotalVacations = g.Sum(e => e.VacationHours)} | Employees.GroupBy (e => e.JobTitle) .Select (g =>new{JobTitle = g.Key, TotalVacations = g.Sum (e => (Int32)(e.VacationHours)) }) |\n| SELECT e.JobTitle, SUM(e.VacationHours) AS TotalVacations FROM Employee AS e GROUP BY e.JobTitle HAVING e.COUNT(*) > 2 | from e in Employees group e by e.JobTitle into g where g.Count() > 2 select new {JobTitle = g.Key, TotalVacations = g.Sum(e => e.VacationHours)} | Employees.GroupBy (e => e.JobTitle) .Where (g => (g.Count () > 2)).Select ( g =>new{JobTitle = g.Key, TotalVacations = g.Sum (e => (Int32)(e.VacationHours))} ) |\n| SELECT * FROM Product AS p,ProductReview AS pr               | from p in Products from pr in ProductReviews select new {p, pr} | Products.SelectMany (p => ProductReviews,(p, pr) =>new{ p = p, pr = pr}) |\n| SELECT * FROM Product AS p INNER JOIN ProductReview AS pr ON p.ProductID = pr.ProductID | from p in Products join pr in ProductReviews on p.ProductID equals pr.ProductID select new {p, pr} | Products.Join (ProductReviews, p => p.ProductID,pr => pr.ProductID, (p, pr) =>new{p = p,pr = pr}) |\n| SELECT * FROM Product AS p INNER JOIN ProductCostHistory AS pch ON p.ProductID = pch.ProductID AND p.SellStartDate = pch.StartDate | from p in Products join pch in ProductCostHistories on new {p.ProductID, StartDate = p.SellStartDate} equals new {pch.ProductID, StartDate = pch.StartDate}select new {p, pch} | Products.Join (ProductCostHistories, p =>new{ProductID = p.ProductID, StartDate = p.SellStartDate}, pch =>new{ProductID = pch.ProductID, StartDate = pch.StartDate}, (p, pch) =>new{p = p,pch = pch}) |\n| SELECT * FROM Product AS p LEFT OUTER JOIN ProductReview AS pr ON p.ProductID = pr.ProductID | from p in Products join pr in ProductReviews on p.ProductID equals pr.ProductID into prodrev select new {p, prodrev} | Products.GroupJoin (ProductReviews, p => p.ProductID,pr => pr.ProductID,(p, prodrev) => new{p = p,prodrev = prodrev }) |\n| SELECT p.ProductID AS ID FROM Product AS p UNION SELECT pr.ProductReviewID FROM ProductReview AS pr | (from p in Products select new {ID = p.ProductID}).Union(from pr in ProductReviews select new {ID = pr.ProductReviewID}) | Products.Select (p => new{ID =p.ProductID}).Union (ProductReviews .Select (pr =>new{ ID = pr.ProductReviewID})) |\n| SELECT TOP (10) * FROM Product AS p WHERE p.StandardCost < 100 | (from p in Products where p.StandardCost < 100 select p).Take(10) | Products.Where (p => (p.StandardCost < 100)).Take (10)       |\n| SELECT * FROM [Product] AS p WHERE p.ProductID IN (SELECT pr.ProductID FROM [ProductReview] AS [pr] WHERE pr.[Rating] = 5) | from p in Products where (from pr in ProductReviews where pr.Rating == 5 select pr.ProductID).Contains(p.ProductID)select p | Products.Where (p =>ProductReviews.Where (pr => (pr.Rating == 5)) .Select (pr => pr.ProductID).Contains (p.ProductID) |\n\nlinq与lambda写法对照\n\nlinq与lambda写法对照可以让你在写linq或者lambda时，更加的方便。\n\n原文出处：江湖人士【江小编】\n\n原文链接：https://jhrs.com/2018/12525.html\n\n本文观点不代表Dotnet9立场，转载请联系原作者。\n\n',86,2,'blog/3.jpg',0,7,7,4,'2021-07-19 00:00:00','2021-08-02 00:00:00'),
(224,'EFCore——Code First生成数据库与表','Code First——领域设计模式中非常有用。使用 Code First 模式，专注于领域设计，创建领域类，然后生成数据库。','\n\nCode First——领域设计模式中非常有用。使用 Code First 模式，专注于领域设计，创建领域类，然后生成数据库。\n\n文章目录\n\n\n\n\n\n## 1.创建数据模型类\n\n一般就是数据库里面有哪些表，就创建哪些模型， POCO 类就够了。\n\n```c#\npublic partial class SmsPush\n    {\n        [Key]\n        public int Id { get; set; }\n        [MaxLength(128)]\n        public string AppName { get; set; }\n\n        [DataType(DataType.Text)]\n        public string TargetValue { get; set; }\n\n        [DataType(DataType.Text)]\n        public string Content { get; set; }\n\n        [DataType(DataType.DateTime)]\n        public DateTime CreateTime { get; set; }\n    }\n\n\n```\n\n## 2.安装 nuget 包\n\n按您使用的数据选择包\n\n- sqlserver：`Install-Package Microsoft.EntityFrameworkCore.SqlServer`\n- mysql：`Install-Package MySql.Data.EntityFrameworkCore`\n\n## 3.创建数据库上下文类\n\n需要继承`DbContext`\n\n```c#\npublic class MvcMovieContext : DbContext\n    {\n        public MvcMovieContext (DbContextOptions<MvcMovieContext> options)\n            : base(options)\n        {\n        }\n\n        public DbSet<Movie> Movie { get; set; }\n    }\n```\n\n\n\n## 4.注册数据库上下文\n\n在应用启动过程中，EF core 数据库上下文服务必须通过依赖注入注册。需要服务，通过构造函数注入即可。\n\n- **sqlserver**\n\n```c#\nservices.AddDbContext<MvcMovieContext>(options =>\n            options.UseSqlServer(Configuration.GetConnectionString(\"MvcMovieContext\")));\n```\n\n\n\n- **mysql**\n\n```c#\nservices.AddDbContext<PushContext>(options =>\n            {\n                options.UseMySQL(Configuration.GetConnectionString(\"PushContext\"));\n            });\n```\n\n\n\n## 5.添加数据连接字符串\n\n上面的`Configuration.GetConnectionString`,是从`appsettings.json`中读取的。所以需要添加相关配置。由于使用的是 mysql，所以相关配置如下\n\n```c#\n{\n  \"ConnectionStrings\": {\n    \"PushContext\": \"Persist Security Info=False;database=push-center;server=localhost;Connect Timeout=30;user id=root; pwd=111111\"\n  }\n}\n```\n\nmysql 链接字符串，参考 mysql 官方：https://dev.mysql.com/doc/dev/connector-net/8.0/html/P_MySql_Data_MySqlClient_MySqlConnection_ConnectionString.htm\n\n## 6.安装 Mysql\n\n由于博主是在 windows 下开发，所以这里介绍最简单的 windows 下安装 mysql 的方法及后续相关操作。这里我们推荐使用巧克力安装 mysql，一款越用越香的 windows 包管理器，如果不知道巧克力，请参考博文【Nginx】Nginx 部署实战——静态文件+反向代理+均衡负载+https+websocket,有关于巧克力的安装，可以类比 centos 的黄狗(yum).\n\n\\\n\n```\n#安装mysql\nchoco install mysql\n\\#遇到让你选择是否运行脚本，Y/A 按着走\n```\n\n\n\n- 有可能会遇到在https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-winx64.zip下载巨慢的情况（在公司下载很快，晚上在家下载很慢，不知道为啥，想办法吧），可以在巧克力执行`powershell`之前，也就是提示选择他要执行 `C:\\ProgramData\\chocolatey\\lib\\mysql\\tools\\chocolateyInstall`脚本，去编辑这个脚本，替换为国内资源镜像\n\n\\\n\n```\n#第三行\n$url = ''https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-winx64.zip''\n\\#替换为搜狐镜像 类似还有\n\\#网易 http://mirrors.163.com/\n\\#中科大 http://mirrors.ustc.edu.cn/\n\\#清华 https://mirrors.tuna.tsinghua.edu.cn/\n$url = ''http://mirrors.sohu.com/mysql/MySQL-8.0/mysql-8.0.20-winx64.zip''\n```\n\n不出意外，`mysql`就安装好了，路径`C:\\tools`,甚至相关 windows 服务也装好了。根据之前的经验【One by one 系列】一步步部署.Net core 应用-CentOs 介绍的 mysql 安装后，初始化密码\n\n\\\n\n```\n# 修改密码\n\\# 初次安装mysql，root账户没有密码。直接登录\nmysql -u root\nmysql>show databases;\nmysql>set password **for** ''root''@''localhost'' =password(''设置你的密码'');\nQuery OK, 0 rows affected (0.00 sec)\n\\#不需要重启数据库即可生效\n```\n\n**上面是针对 5.6 以下的版本有效，通过巧克力默认安装的是最新版本，是 8.0 版本,修改密码的操作需要更换如下 sql 语句。**\n\n```\nmysql -u root\n\n\\#初始化root账户的密码\nmysql>ALTER USER root@localhost IDENTIFIED BY ''123456'';\n```\n\n\n\n## 7.初始迁移-Initial migration\n\n运用 efcore 迁移功能来创建数据库。migration 是可用于创建和更新数据库以匹配数据模型的一组工具\n\n\\\n\n```\n#第一步\nAdd-Migration InitialCreate\n\n\\#第二步\nUpdate-Database\n```\n\n\n\n- `Add-Migration InitialCreate`:生成 `Migrations/{timestamp}_InitialCreate.cs` 迁移文件 。`InitialCreate` 参数是迁移名称。可以使用任何名称，但是按照惯例，会选择可说明迁移的名称。因为这是首次迁移，所以生成的类包含用于创建数据库架构的代码。\n\n- ```\n  Update-Database\n  ```\n\n  :将数据库更新到\n\n  上一个命令创建的最新迁移\n\n  。此命令运行在 Migrations/{time-stamp}_InitialCreate.cs 文件中 \n\n  \n\n  up 方法，用于创建数据库的。\n\n  - ps：`Up` 方法创建 表。`Down` 方法可还原 `Up` 迁移所做的架构更改。\n\n- 如果是数据库更新，会生成如下警告(可以忽略)：\n\n```\nNo type was specified **for** the decimal column ''Price'' on entity type ''Movie''. **This** will cause values to be silently truncated **if** they **do** not fit **in** the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values using ''HasColumnType()''.\n```\n\n更多内容参考：https://docs.microsoft.com/zh-cn/ef/core/miscellaneous/cli/powershell\n\n## 8.依赖注入数据库上下文\n\n\n\n## 9\n\n```c#\npublic class MoviesController : Controller\n{\n    private readonly MvcMovieContext _context;\n\n    public MoviesController(MvcMovieContext context)\n    {\n        _context = context;\n    }\n}\n```\n\n.迁移回退\n\n上面 migration 命令，主要依赖`Microsoft.EntityFrameworkCore.Tools`包，如果此包缺失，请安装。\n\n\\\n\n```\n#先检查下\n\nGet-Help about_EntityFrameworkCore\n\nPM> Get-Help about_EntityFrameworkCore\n\n​                     _/\\__\n\n​               ---==/    \\\\\n\n​         ___  ___   |.    \\|\\\n\n​        | __|| __|  |  )   \\\\\\\n\n​        | _| | _|   \\_/ |  //|\\\\\n\n​        |___||_|       /   \\\\\\/\\\\\n\nTOPIC\n\n​    about_EntityFrameworkCore\n\nSHORT DESCRIPTION\n\n​    Provides information about the Entity Framework Core Package Manager Console Tools.\n\nLONG DESCRIPTION\n\n​    **This** topic describes the Entity Framework Core Package Manager Console Tools. See https://docs.efproject.net for\n\n​    information on Entity Framework Core.\n\n​    The following Entity Framework Core commands are available.\n\n​        Cmdlet                      Description\n\n​        --------------------------  ---------------------------------------------------\n\n​        Add-Migration               Adds a **new** migration.\n\n​        Drop-Database               Drops the database.\n\n​        Get-DbContext               Gets information about a DbContext type.\n\n​        Remove-Migration            Removes the last migration.\n\n​        Scaffold-DbContext          Scaffolds a DbContext and entity types **for** a database.\n\n​        Script-DbContext            Generates a SQL script from the current DbContext.\n\n​        Script-Migration            Generates a SQL script from migrations.\n\n​        Update-Database             Updates the database to a specified migration.\n\nSEE ALSO\n\n​    Add-Migration\n\n​    Drop-Database\n\n​    Get-DbContext\n\n​    Remove-Migration\n\n​    Scaffold-DbContext\n\n​    Script-DbContext\n\n​    Script-Migration\n\n​    Update-Database\n\n\\#上面是包没问题的象征，如果有问题，再执行如下命令\n\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n```\n\n\n\nTo undo this action, use Remove-Migration.\n\n\\\n\n```\n# POCO类修改=>修改数据表\n\n\\# 给本次迁移取一个名字：UpdateEditions，初始化取的名字:InitialCreate\n\nAdd-Migration UpdateEditions\n\n\\# 更新\n\nUpdate-Database\n\n\\# 突然发现可能有影响，那就回滚吧，删除上一次迁移（回滚针对迁移进行的代码更改）\n\nRemove-Migration\n```\n\n\n\nRemove-Migration\n\n| 参数   | 说明                                 |\n| ------ | ------------------------------------ |\n| -Force | 恢复迁移（回滚应用于数据库的更改）。 |\n\n\n\n原文链接：https://mp.weixin.qq.com/s/gXXh7Yqy4MTEFf488gad9A\n\n\n\n',139,4,'blog/4.jpg',0,2,7,4,'2021-07-20 00:00:00','2021-08-02 00:00:00'),
(225,'Markdown Nice 排版工具','- 支持自定义样式的 Markdown 编辑器 - 支持微信公众号、知乎和稀土掘金 - 欢迎扫码回复「排版」加入推文群','![](https://files.mdnice.com/logo.svg)\n\n请使用 **Chrome** 浏览器。\n\n请阅读下方文本熟悉工具使用方法，本文可直接拷贝到微信中预览。\n\n## 1 Markdown Nice 简介\n\n- 支持自定义样式的 Markdown 编辑器\n- 支持微信公众号、知乎和稀土掘金\n- 欢迎扫码回复「排版」加入推文群\n\n![](https://files.mdnice.com/pic/cd3ca20c-896f-4cfc-9bdd-c4c58e69ba26.jpg)\n\n## 2 主题\n\n**https://product.mdnice.com/themes/**\n\n欢迎提交主题，提供更多文章示例~~\n\n## 3 通用语法\n\n### 3.1 标题\n\n在文字写书写不同数量的`#`可以完成不同的标题，如下：\n\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n### 3.2 无序列表\n\n无序列表的使用，在符号`-`后加空格使用。如下：\n\n- 无序列表 1\n- 无序列表 2\n- 无序列表 3\n\n如果要控制列表的层级，则需要在符号`-`前使用空格。如下：\n\n- 无序列表 1\n- 无序列表 2\n  - 无序列表 2.1\n  - 无序列表 2.2\n\n**由于微信原因，最多支持到二级列表**。\n\n### 3.3 有序列表\n\n有序列表的使用，在数字及符号`.`后加空格后输入内容，如下：\n\n1. 有序列表 1\n2. 有序列表 2\n3. 有序列表 3\n\n### 3.4 粗体和斜体\n\n粗体的使用是在需要加粗的文字前后各加两个`*`。\n\n而斜体的使用则是在需要斜体的文字前后各加一个`*`。\n\n如果要使用粗体和斜体，那么就是在需要操作的文字前后加三个`*`。如下：\n\n**这个是粗体**\n\n_这个是斜体_\n\n**_这个是粗体加斜体_**\n\n注：由于 commonmark 标准，可能会导致加粗与想象不一致，如下\n\n**今天天气好晴朗，**处处好风光。\n\n这个是正常现象，请参考[加粗 Issue](https://github.com/markdown-it/markdown-it/issues/410 \"加粗 Issue\")。\n\n### 3.5 链接\n\n微信公众号仅支持公众号文章链接，即域名为`https://mp.weixin.qq.com/`的合法链接。使用方法如下所示：\n\n对于该论述，欢迎读者查阅之前发过的文章，[你是《未来世界的幸存者》么？](https://mp.weixin.qq.com/s/s5IhxV2ooX3JN_X416nidA)\n\n\n\n### 3.6 引用\n\n引用的格式是在符号 `>` 后面书写文字，文字的内容可以包含标题、链接、图片、粗体和斜体等。\n\n一级引用如下：\n\n> ### 一级引用示例\n>\n> 读一本好书，就是在和高尚的人谈话。 **——歌德**\n>\n\n当使用多个 `>` 符号时，就会变成多级引用\n\n二级引用如下：\n\n>> ### 二级引用示例\n>\n>> 读一本好书，就是在和高尚的人谈话。 **——歌德**\n>\n\n三级引用如下：\n\n>>> ### 三级引用示例\n>\n>>> 读一本好书，就是在和高尚的人谈话。 **——歌德**\n>\n>>> [Markdown Nice最全功能介绍](https://mp.weixin.qq.com/s/lM808MxUu6tp8zU8SBu3sg)\n>\n>>> ![这里写图片描述](https://files.mdnice.com/pic/cd3ca20c-896f-4cfc-9bdd-c4c58e69ba26.jpg)\n\n### 3.7 分割线\n\n可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：\n\n---\n\n### 3.8 删除线\n\n删除线的使用，在需要删除的文字前后各使用两个`~`，如下：\n\n~~这是要被删除的内容。~~\n\n### 3.9 表格\n\n可以使用冒号来定义表格的对齐方式，如下：\n\n| 姓名       | 年龄 |         工作 |\n| :--------- | :--: | -----------: |\n| 小可爱     |  18  |     吃可爱多 |\n| 小小勇敢   |  20  |   爬棵勇敢树 |\n| 小小小机智 |  22  | 看一本机智书 |\n\n宽度过长的表格可以滚动，可在自定义主题中调节宽度：\n\n| 姓名       | 年龄 |         工作 |      邮箱       |    手机     |\n| :--------- | :--: | -----------: | :-------------: | :---------: |\n| 小可爱     |  18  |     吃可爱多 | lovely@test.com | 18812345678 |\n| 小小勇敢   |  20  |   爬棵勇敢树 | brave@test.com  | 17712345678 |\n| 小小小机智 |  22  | 看一本机智书 | smart@test.com  | 16612345678 |\n\n### 3.10 图片\n\n可以通过在图片尾部添加宽度和高度控制图片大小，用法如下：\n\n![同时设置宽度和高度](https://files.mdnice.com/logo.png =150x150)\n\n![只设置宽度，推荐使用百分比](https://files.mdnice.com/logo.png =40%x)\n\n该语法比较特殊，其他 Markdown 编辑器不完全通用。\n\n支持 jpg、png、gif、svg 等图片格式，**其中 svg 文件仅可在微信公众平台中使用**，svg 文件示例如下：\n\n![](https://files.mdnice.com/i-am-svg.svg)\n\n- 支持图片**拖拽和截图粘贴**到编辑器中上传，上传时使用当前选择的图床。\n- 可使用**格式->图片**上传本地图片，网站目前支持「图壳」图床，失败率低，但是只可保存一天用于排版\n\n**注：仅支持 https 的图片，图片粘贴到微信、知乎或掘金时会自动上传其服务器，不必担心使用上述图床会导致图片丢失**。\n\n\n## 4. 特殊语法\n\n### 4.1 脚注\n\n> 支持平台：微信公众号、知乎。\n\n脚注与链接的区别如下所示：\n\n```markdown\n链接：[文字](链接)\n脚注：[文字](脚注解释 \"脚注名字\")\n```\n\n有人认为在[大前端时代](https://en.wikipedia.org/wiki/Front-end_web_development \"Front-end web development\")的背景下，移动端开发（Android、IOS）将逐步退出历史舞台。\n\n[全栈工程师](是指掌握多种技能，并能利用多种技能独立完成产品的人。 \"什么是全栈工程师\")在业务开发流程中起到了至关重要的作用。\n\n脚注内容请拉到最下面观看。\n\n### 4.2 代码块\n\n> 支持平台：微信公众号、知乎。\n\n如果在一个行内需要引用代码，只要用反引号引起来就好，如下：\n\nUse the `printf()` function.\n\n在需要高亮的代码块的前一行及后一行使用三个反引号，同时**第一行反引号后面表示代码块所使用的语言**，如下：\n\n```java\n// FileName: HelloWorld.java\npublic class HelloWorld {\n  // Java 入口程序，程序从此入口\n  public static void main(String[] args) {\n    System.out.println(\"Hello,World!\"); // 向控制台打印一条语句\n  }\n}\n```\n\n支持以下语言种类：\n\n```\nbash\nclojure，cpp，cs，css\ndart，dockerfile, diff\nerlang\ngo，gradle，groovy\nhaskell\njava，javascript，json，julia\nkotlin\nlisp，lua\nmakefile，markdown，matlab\nobjectivec\nperl，php，python\nr，ruby，rust\nscala，shell，sql，swift\ntex，typescript\nverilog，vhdl\nxml\nyaml\n```\n\n如果想要更换代码主题，可在上方挑选，不支持代码主题自定义。\n\n其中**微信代码主题与微信官方一致**，有以下注意事项：\n\n- 带行号且不换行，代码大小与官方一致\n- 需要在代码块处标志语言，否则无法高亮\n- 粘贴到公众号后，用鼠标点代码块内外一次，完成高亮\n\ndiff 不能同时和其他语言的高亮同时显示，且需要调整代码主题为微信代码主题以外的代码主题才能看到 diff 效果，使用效果如下:\n\n```diff\n+ 新增项\n- 删除项\n```\n\n**其他主题不带行号，可自定义是否换行，代码大小与当前编辑器一致**\n\n### 4.3 数学公式\n\n> 支持平台：微信公众号、知乎。\n\n行内公式使用方法，比如这个化学公式：$\\ce{Hg^2+ ->[I-] HgI2 ->[I-] [Hg^{II}I4]^2-}$\n\n块公式使用方法如下：\n\n$$H(D_2) = -\\left(\\frac{2}{4}\\log_2 \\frac{2}{4} + \\frac{2}{4}\\log_2 \\frac{2}{4}\\right) = 1$$\n\n矩阵：\n\n$$\n  \\begin{pmatrix}\n  1 & a_1 & a_1^2 & \\cdots & a_1^n \\\\\n  1 & a_2 & a_2^2 & \\cdots & a_2^n \\\\\n  \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n  1 & a_m & a_m^2 & \\cdots & a_m^n \\\\\n  \\end{pmatrix}\n$$\n\n公式由于微信不支持，目前的解决方案是转成 svg 放到微信中，无需调整，矢量不失真。\n\n目前测试如果公式量过大，在 Chrome 下会存在粘贴后无响应，但是在 Firefox 中始终能够成功。\n\n### 4.4 TOC\n\n> 支持平台：微信公众号、知乎。\n\nTOC 全称为 Table of Content，列出全部标题。由于示例标题过多，需要使用将下方代码段去除即可。\n\n```\n[TOC]\n```\n\n由于微信只支持到二级列表，本工具仅支持二级标题和三级标题的显示。\n\n\n\n## 5 其他语法\n\n### 5.1 HTML\n\n支持原生 HTML 语法，请写内联样式，如下：\n\n<span style=\"display:block;text-align:right;color:orangered;\">橙色居右</span>\n<span style=\"display:block;text-align:center;color:orangered;\">橙色居中</span>\n\n### 5.2 UML\n\n不支持，推荐使用开源工具`https://draw.io/`制作后再导入图片\n\n### 5.3 更多文档\n\n更多文档请参考 [mdnice 产品主页](https://product.mdnice.com/articles/ \"更多文档\")',294,13,'blog/2.jpg',0,28,7,4,'2021-07-20 00:00:00','2021-10-22 00:00:00'),
(275,'c#获取文件夹目录下文件信息','应用程序可能只允许用户选择文佳夹而非文件，，在添加时，只要选择添加这个文佳夹，就是只选择了文佳夹，而不是文件，这就要用到FloderBrowertDIalog控件对话框','应用程序可能只允许用户选择文佳夹而非文件，，在添加时，只要选择添加这个文佳夹，就是只选择了文佳夹，而不是文件，这就要用到FloderBrowertDIalog控件对话框\n\n**FolderBrowserDialog控件对话框的常用属性**\n\nDescription　　　　　　　　在对话框中提供描述性的消息\n\nRootFloder　　　　　　　　指定对话框开始浏览的根文件夹\n\nSelectedPath　　　　　　　指定用户所选的文件夹\n\nShowNewFloderButton　　 指定新建文件夹按钮是否显示在对话框中\n\n```js\nprivate void button1_Click(object sender, System.EventArgs e) \n{\n	//浏览文件夹\n	this.folderBrowserDialog1.ShowDialog();\n	if(this.folderBrowserDialog1.SelectedPath.Trim()!=\"\")\n	this.textBox1.Text=this.folderBrowserDialog1.SelectedPath.Trim();\n}\nprivate void button2_Click(object sender, System.EventArgs e) \n{\n	//显示指定文件夹下的文件\n	if(this.textBox1.Text.Trim()==\"\")\n	return;\n	this.listBox1.Items.Clear();\n	string[] MyFiles=System.IO.Directory.GetFiles(this.textBox1.Text);\n	this.listBox1.Items.AddRange(MyFiles);\n	//foreach(string File in MyFiles)\n	// this.listBox1.Items.Add(File);\n}\n```\n\n=======================================================================================\n\n本文链接：原创文章转载请注明',19,0,'blog/2.jpg',0,14,1,4,'2021-10-28 00:00:00','2021-10-28 00:00:00'),
(276,'vue3 axios安装及使用','安装 使用npm安装  $ npm install axios 封装axios /*  * @Author: Axios封装  * @Date: 2020-12-08 10:39:03  * @LastEditTime: 2021-10-22 11:34:08  * @LastEditors: Please set LastEditors  * @Description: In User Settings Edit  * @FilePath: \\blogs-s\\src\\api\\index.ts  */','# vue3 axios安装及使用\n\n### 安装\n\n使用npm安装\n\n```\n$ npm install axios\n```\n\n\n\n### 封装axios\n\n```js\n/*\n * @Author: Axios封装\n * @Date: 2020-12-08 10:39:03\n * @LastEditTime: 2021-10-22 11:34:08\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: \\blogs-s\\src\\api\\index.ts\n */\nimport axios from ''axios'';\nimport qs from \"qs\";\nimport store from \"@/store/index\";\nimport router from ''@/router/index'';\nimport { dataList } from ''@/components/aspin/data'';\nimport { message } from ''ant-design-vue'';\nimport { storage } from ''../storage/storage'';\n\n//数据请求字符\naxios.defaults.baseURL = process.env.VUE_APP_API_URL,\n  // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n  axios.defaults.timeout = 5000;\n// 表示跨域请求时是否需要使用凭证\naxios.defaults.withCredentials = false;\n// axios.defaults.headers.common[''token''] =  AUTH_TOKEN\naxios.defaults.headers.post[''Content-Type''] = ''application/json;charset=UTF-8'';\n// 允许跨域\naxios.defaults.headers.post[\"Access-Control-Allow-Origin-Type\"] = \"*\";\n\n// 请求拦截器\naxios.interceptors.request.use(function (config) {\n  if (\n    config.method === \"post\" ||\n    config.method === \"put\" ||\n    config.method === \"delete\"\n  ) {\n    // qs序列化\n    config.data = qs.parse(config.data);\n  }\n  // 若是有做鉴权token , 就给头部带上token\n  if (storage.get(store.state.Roles)) {\n    store.state.Roles\n    config.headers.Authorization = storage.get(store.state.Roles);\n  }\n  return config;\n}, error => {\n  message.error(error.data.error.message);\n  return Promise.reject(error.data.error.message);\n})\n\n// 响应拦截器\naxios.interceptors.response.use(function (config) {\n\n\n  dataList.show = true\n  if (config.status === 200 || config.status === 204) {\n    setTimeout(() => {\n      dataList.show = false\n    }, 400)\n    return Promise.resolve(config);\n  } else {\n    return Promise.reject(config);\n  }\n},\n  function (error) {\n\n    if (error.response.status) {\n      switch (error.response.status) {\n        case 400:\n          message.error(\"发出的请求有错误，服务器没有进行新建或修改数据的操作==>\" + error.response.status)\n          break;\n\n        // 401: 未登录\n        // 未登录则跳转登录页面，并携带当前页面的路径\n        // 在登录成功后返回当前页面，这一步需要在登录页操作。                \n        case 401: //重定向\n          message.error(\"token:登录失效==>\" + error.response.status + \":\" + store.state.Roles)\n          storage.remove(store.state.Roles)\n          storage.get(store.state.Roles)\n          router.replace({\n            path: ''/Login'',\n          });\n          break;\n        // 403 token过期\n        // 登录过期对用户进行提示\n        // 清除本地token和清空vuex中token对象\n        // 跳转登录页面                \n        case 403:\n          message.error(\"用户得到授权，但是访问是被禁止的==>\" + error.response.status)\n          break;\n        case 404:\n          message.error(\"网络请求不存在==>\" + error.response.status)\n          break;\n        case 406:\n          message.error(\"请求的格式不可得==>\" + error.response.status)\n          break;\n        case 410:\n          message.error(\"请求的资源被永久删除，且不会再得到的==>\" + error.response.status)\n          break;\n        case 422:\n          message.error(\"当创建一个对象时，发生一个验证错误==>\" + error.response.status)\n          break;\n        case 500:\n          message.error(\"服务器发生错误，请检查服务器==>\" + error.response.status)\n          break;\n        case 502:\n          message.error(\"网关错误==>\" + error.response.status)\n          break;\n        case 503:\n          message.error(\"服务不可用，服务器暂时过载或维护==>\" + error.response.status)\n          break;\n        case 504:\n          message.error(\"网关超时==>\" + error.response.status)\n          break;\n        default:\n          message.error(\"其他错误错误==>\" + error.response.status)\n      }\n      return Promise.reject(error.response);\n    } else {\n      // 处理断网的情况\n      // eg:请求超时或断网时，更新state的network状态\n      // network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏\n      // 关于断网组件中的刷新重新获取数据，会在断网组件中说明\n      store.commit(''changeNetwork'', false);\n    }\n  }\n)\nexport default axios\n```\n\n\n\n### main.ts:\n\n#### 全局使用\n\n```js\nimport axios from ''./utils/http/axios''\n全局使用\n// 全局ctx(this) 上挂载 $axios\napp.config.globalProperties.$api = axios\n```\n\n #### 封装使用\n\n```js\n/*\n * @Author: your name\n * @Date: 2021-05-08 11:33:56\n * @LastEditTime: 2021-10-22 10:36:05\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: \\blogs-s\\src\\api\\article.js\n */\nimport request from ''@/utils/http/axios''\nimport { IntArticle } from \"@/api/data/interData\";\n\nexport class article {\n\n  /**\n   * @description: 查询总条数\n   */\n  static async GetCountAsync() {\n    return await request({\n      url: \"/api/SnArticle/GetCountAsync\",\n      method: ''get'',\n    })\n  }\n\n  /**\n   * @description: 查询分类总条数\n   * @param {number} id\n   */\n  static async ConutSort(id: number) {\n    return await request({\n      url: \"/api/SnArticle/GetConutSortAsync?type=\" + id + \"&cache=true\",\n      method: ''get'',\n    })\n  }\n  /**\n   * @description: 模糊查询\n   * @param {string} name\n   */\n  static async GetContainsAsync(name: string) {\n    return await request({\n      url: \"/api/SnArticle/GetContainsAsync?name=\" + name + \"&cache=true\",\n      method: ''get'',\n    })\n  }\n  /**\n   * @description: 按标签模糊查询\n   * @param {string} name\n   */\n  static async GetTypeContainsAsync(tag: string, name: string, chache: boolean) {\n    return await request({\n      url: \"/api/SnArticle/GetTypeContainsAsync?type=\" + tag + \"&name=\" + name + \"&cache=\" + chache,\n      method: ''get'',\n    })\n  }\n\n  /**\n   * @description: 主键查询\n   * @param {number} id\n   * @param {boolean} cache\n   * @return {*}\n   */\n  static async GetByIdAsync(id: any, cache: boolean): Promise<any> {\n    return await request({\n      url: \"/api/SnArticle/GetByIdAsync?id=\" + id + \"&cache=\" + cache,\n      method: ''get'',\n    })\n  }\n  /**\n   * @description: 按标签条件查询\n   * @param {number} id\n   * @param {boolean} cache\n   * @return {*}\n   */\n  static async GetTagtextAsync(id: number, cache: boolean): Promise<any> {\n    return await request({\n      url: \"/api/SnArticle/GetTagAsync?labelId=\" + id + \"&isDesc=true&cache=\" + cache,\n      method: ''get'',\n    })\n  }\n  /**\n   * @description: 标签分页查询\n   * @param {number} page\n   * @param {number} pagesize\n   * @return {*}\n   */\n  static async GetFyTitleAsync(page: number, pagesize: number, isDesc: boolean, cache: boolean): Promise<any> {\n    return await request({\n      url:\n        \"/api/SnArticle/GetFyTitleAsync?\" +\n        \"&pageIndex=\" +\n        page +\n        \"&pageSize=\" +\n        pagesize +\n        \"&isDesc=\" + isDesc + \"&cache=\" + cache,\n      method: ''get'',\n    })\n  }\n\n  /**\n   * @description: 分类分页查询\n   * @param {number} page\n   * @param {number} pagesize\n   */\n  static async GetFySortTitleAsync(page: number, pagesize: number, cache: boolean): Promise<any> {\n    return await request({\n      url: \"/api/SnArticle/GetfySortTestAsync?type=7&pageIndex=\" + page + \"&pageSize=\" + pagesize + \"&isDesc=true&cache=\" + cache,\n      method: ''get'',\n    })\n  }\n\n  /**\n   * @description: 更新\n   * @param {any} resultData\n   * @param {string} type\n   */\n  static async UpdatePortionAsync(resultData: any, type: string): Promise<any> {\n    return await\n      request({\n        // 更新\n        url: \"/api/SnArticle/UpdatePortionAsync?type=\" + type,\n        method: \"put\",\n        data: resultData,\n      })\n  }\n\n  /**\n   * @description: 新增数据\n   * @param {any} resultData\n   */\n  static async AddAsync(resultData: IntArticle) {\n    return await\n      request({\n        url: \"/api/SnArticle/AddAsync\",\n        method: \"post\",\n        data: resultData,\n      })\n  }\n  /**\n   * @description: 更新数据\n   * @param {IntArticle} resultData\n   */\n  static async UpdateAsync(resultData: IntArticle) {\n    return await\n      request({\n        url: \"/api/SnArticle/UpdateAsync\",\n        method: \"put\",\n        data: resultData,\n      })\n  }\n  /**\n   * @description: 删除\n   * @param {number} id\n   * @return {*}\n   */\n  static async DeleteAsync(id: number) {\n    return await\n      request({\n        url: \"/api/SnArticle/DeleteAsync?id=\" + id,\n        method: \"delete\",\n      })\n  }\n}\n\n```\n\n \n\n### axios 并发请求\n\n处理并发请求的助手函数\n\n axios.all(iterable)\n\n axios.spread(callback)\n\n```js\n//示例:\nimport { article } from ''@/api/index'';\nimport { blogsList } from \"./components/data\";\nimport axios from ''@/utils/http/axios''\nclass methods {\n  static async GetFySortTitle() {\n    await article.GetFySortTitleAsync(blogsList.page, blogsList.pagesize, true).then((res: any) => {\n      blogsList.dataResult = res.data;\n    });\n  }\n  static async ConutSort() {\n    await article.ConutSort(7).then((result: any) => {\n      blogsList.count = result.data;\n    });\n  }\n}\nasync function QueryAll() {\n  // axios.all([await methods.ConutSort(), await methods.GetFySortTitle()]).then(axios.spread((Fy, co: any) => {\n  //   blogsList.count = co.data;\n  //   blogsList.dataResult = Fy.data;\n  // }))\n  axios.all([await methods.ConutSort(), await methods.GetFySortTitle()])\n}\n\nexport {\n  methods,\n  QueryAll\n}\n```\n\n\n\n\n\n \n\n ',56,5,'blog/3.jpg',0,16,1,4,'2021-10-28 00:00:00','2021-10-28 00:00:00'),
(277,'Vue3 + Ts 封装axios','index.ts 我们需要在src的根目录下创建一个axios文件夹，其中创建一个index.ts文件，这个文件主要用来封装axios的配置（实例化请求配置、请求拦截器、相应拦截器）及相应的方法（登录跳转、消息提示、错误处理等）','\n\n### 封装思路\n\nindex.ts\n我们需要在src的根目录下创建一个axios文件夹，其中创建一个index.ts文件，这个文件主要用来封装axios的配置（实例化请求配置、请求拦截器、相应拦截器）及相应的方法（登录跳转、消息提示、错误处理等）\n\nbase.ts\n这个文件主要用于项目扩展的情况下 不同模块需要调用不同接口（请求的base地址 baseURL ）而前期做的准备，便于后期的维护\n\nrequest.ts\n主要用于封装基于axios配置的get/post/put/delete等使用方法。\n\napi.ts\n在后面的 main.ts 中引入该模块，包括所有接口数据信息写入该文件中。\n\n### index.ts\n\n封装如下。考虑到单一职责，index这块只封装axios\n\n```js\n// index.ts\nimport axios, { AxiosRequestConfig, Method } from \"axios\";\nimport router from \"@/router\";\nimport store from \"@/store\";\nimport { message } from ''ant-design-vue''\nimport { storage } from \"../storage/storage\";\nimport { dataList } from \"@/components/aspin/data\";\n\n/** \n * 跳转登录页\n * 携带当前页面路由，以期在登录页面完成登录后返回当前页面\n */\nconst toLogin = () => {\n  router.replace({\n    name: ''LoginPage'',\n  });\n}\n\n/** \n * 请求失败后的错误统一处理 \n * @param {Number} status 请求失败的状态码\n */\nconst errorHandle = (status: number, other: string) => {\n  // 状态码判断\n  switch (status) {\n\n    case 302: message.error(''接口重定向了！'');\n      break;\n    case 400:\n      message.error(\"发出的请求有错误，服务器没有进行新建或修改数据的操作==>\" + status)\n      break;\n    // 401: 未登录\n    // 未登录则跳转登录页面，并携带当前页面的路径\n    // 在登录成功后返回当前页面，这一步需要在登录页操作。                \n    case 401: //重定向\n      message.error(\"token:登录失效==>\" + status + \":\" + store.state.Roles)\n      storage.remove(store.state.Roles)\n      storage.get(store.state.Roles)\n      router.replace({\n        path: ''/Login'',\n      });\n      break;\n    // 403 token过期\n    // 清除token并跳转登录页\n    case 403:\n      message.error(\"登录过期,用户得到授权，但是访问是被禁止的==>\" + status)\n      // store.commit(''token'', null);\n      setTimeout(() => {\n        router.replace({\n          path: ''/Login'',\n        });\n      }, 1000);\n      break;\n    case 404:\n      message.error(\"网络请求不存在==>\" + status)\n      break;\n    case 406:\n      message.error(\"请求的格式不可得==>\" + status)\n      break;\n    case 408: message.error(\" 请求超时！\")\n      break;\n    case 410:\n      message.error(\"请求的资源被永久删除，且不会再得到的==>\" + status)\n      break;\n    case 422:\n      message.error(\"当创建一个对象时，发生一个验证错误==>\" + status)\n      break;\n    case 500:\n      message.error(\"服务器发生错误，请检查服务器==>\" + status)\n      break;\n    case 502:\n      message.error(\"网关错误==>\" + status)\n      break;\n    case 503:\n      message.error(\"服务不可用，服务器暂时过载或维护==>\" + status)\n      break;\n    case 504:\n      message.error(\"网关超时==>\" + status)\n      break;\n    default:\n      message.error(\"其他错误错误==>\" + status)\n  }\n}\n\n// 定义接口\ninterface PendingType {\n  url?: string;\n  method?: Method;\n  params: any;\n  data: any;\n  cancel: any;\n}\n// 取消重复请求\nconst pending: Array<PendingType> = [];\nconst CancelToken = axios.CancelToken;\n\n// 移除重复请求\nconst removePending = (config: AxiosRequestConfig) => {\n  for (const key in pending) {\n    const item: number = +key;\n    const list: PendingType = pending[key];\n    // 当前请求在数组中存在时执行函数体\n    if (list.url === config.url && list.method === config.method && JSON.stringify(list.params) === JSON.stringify(config.params) && JSON.stringify(list.data) === JSON.stringify(config.data)) {\n      // 执行取消操作\n      list.cancel(''操作太频繁，请稍后再试'');\n      // 从数组中移除记录\n      pending.splice(item, 1);\n    }\n  }\n};\n\n/* 实例化请求配置 */\nconst instance = axios.create({\n  headers: {\n    //php 的 post 传输请求头一定要这个 不然报错 接收不到值\n    \"Content-Type\": \"application/json;charset=UTF-8\",\n    \"Access-Control-Allow-Origin-Type\": ''*''\n  },\n  // 请求时长\n  timeout: 1000 * 30,\n  // 请求的base地址 TODO:这块以后根据不同的模块调不同的api\n  baseURL: process.env.VUE_APP_API_URL,\n  //     ? \"测试\"\n  //     : \"正式\",\n  // 表示跨域请求时是否需要使用凭证\n  withCredentials: false,\n})\n\n/** \n * 请求拦截器 \n * 每次请求前，如果存在token则在请求头中携带token \n */\ninstance.interceptors.request.use(\n  config => {\n\n    removePending(config);\n    config.cancelToken = new CancelToken((c) => {\n      pending.push({ url: config.url, method: config.method, params: config.params, data: config.data, cancel: c });\n    });\n    // 登录流程控制中，根据本地是否存在token判断用户的登录情况        \n    // 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token        \n    // 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码        \n    // 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。        \n    // const token = store.state.token;\n    // localStorage.setItem(''token'', token);\n\n    if (storage.get(store.state.Roles)) {\n      store.state.Roles\n      config.headers.Authorization = storage.get(store.state.Roles);\n    }\n    return config;\n  },\n  error => {\n    message.error(error.data.error.message);\n    return Promise.reject(error.data.error.message);\n  }\n\n)\n\n// 响应拦截器\ninstance.interceptors.response.use(function (config) {\n\n  dataList.show = true\n  removePending(config.config);\n  // 请求成功\n  if (config.status === 200 || config.status === 204) {\n    setTimeout(() => {\n      dataList.show = false\n    }, 400)\n    return Promise.resolve(config);\n  } else {\n    return Promise.reject(config);\n  }\n  // 请求失败\n}, function (error) {\n\n  const { response } = error;\n  if (response) {\n    errorHandle(response.status, response.data.message);\n\n    // 超时重新请求\n    const config = error.config;\n    // 全局的请求次数,请求的间隙\n    const [RETRY_COUNT, RETRY_DELAY] = [3, 1000];\n\n    if (config && RETRY_COUNT) {\n      // 设置用于跟踪重试计数的变量\n      config.__retryCount = config.__retryCount || 0;\n      // 检查是否已经把重试的总数用完\n      if (config.__retryCount >= RETRY_COUNT) {\n        return Promise.reject(response || { message: error.message });\n      }\n      // 增加重试计数\n      config.__retryCount++;\n      // 创造新的Promise来处理指数后退\n      const backoff = new Promise<void>((resolve) => {\n        setTimeout(() => {\n          resolve();\n        }, RETRY_DELAY || 1);\n      });\n      // instance重试请求的Promise\n      return backoff.then(() => {\n        return instance(config);\n      });\n    }\n\n    return Promise.reject(response);\n  } else {\n    // 处理断网的情况\n    // eg:请求超时或断网时，更新state的network状态\n    // network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏\n    // 后续增加断网情况下做的一些操作\n    store.commit(''networkState'', false);\n  }\n}\n)\n// 只需要考虑单一职责，这块只封装axios\nexport default instance\n```\n\n### base.ts\n\n区分每个模块的 baseUrl 方便后期维护管理\n\n```js\n// base.ts\nexport class Base {\n  /* 公共模块 */\n  static env = process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8087\"\n    : \"https://produceCommon.com(生产线地址)\"\n}\n```\n\n也可以直接在index.ts中设置这样就不需要base.ts\n\n```js\nconst instance = axios.create({\n  // 请求的base地址 TODO:这块以后根据不同的模块调不同的api\n  baseURL: process.env.VUE_APP_API_URL,\n})\n```\n\n需要配置根目录\n\n.env.development\n\n```\n     NODE_ENV = ''development''\n 	 # VUE_APP_API_URL = ''https://localhost:5001/''\n    VUE_APP_API_URL = ''http://localhost:8087/''\n```\n\n.env.production\n\n```\n# 生产环境的请求接口\nNODE_ENV = ''production''\nVUE_APP_API_URL = ''http://129.xxxxx/''\n```\n\n### request.ts\n\n封装axios的get、post方法，其余关于接口调用的方法也可写入该文件中，便于管理。\n\n```js\n// request.ts\nimport axios from \"./index\";\nimport qs from \"qs\";\n\nexport class Request {\n  /**\n   * get方法\n   * @param {string} url 路径\n   * @param {object} params 参数\n   */\n  static get = (url: string, params?: any) => {\n    return new Promise((resolve, reject) => {\n      axios.get(url, { params: params }).then(res => {\n        resolve(res);\n      }).catch(err => {\n        reject(err);\n      })\n    })\n  }\n\n  static post = (url: string, params?: any) => {\n    return new Promise((resolve, reject) => {\n      axios.post(url, qs.stringify(params)).then(res => {\n        resolve(res);\n      }).catch(err => {\n        reject(err);\n      })\n    })\n  }\n}\n```\n\n### api.ts\n\nvue页面需要使用的api接口\n\n```js\n// 其中使用 install 的目的在于 ts在main.ts中 \n// 不能通过Vue.prototype.$Api这个方式直接调用\n//，在全局方法中会说到使用 插件的方式去挂载。\n// api.ts\nimport { Base } from \"./base\";\nimport { Request } from \"./request\";\n\nclass api {\n  /* api接口模块 */\n  public static article = {\n     // 直接在index.ts中设置不需要Base模块\n    genre: () => Request.get(''/api/SnArticle/GetCountAsync''),\n     // 基于Base模块封装调用\n    genres: () => Request.get(`${Base.env}/api/SnArticle/GetCountAsync`),\n  }\n}\nexport {\n  api\n}\n```\n\n### index.vue\n\n```js\nimport { api } from ''../../utils/api/api''\nimport { onMounted } from ''vue''\nonMounted(async () => {\n  await QueryAll()\n  api.article.genre().then((res: any) => {\n    console.log(''genre'' + res.data)\n  })\n  api.article.genres().then((res: any) => {\n    console.log(''genres'' + res.data)\n  })\n})\n```\n\n### 参考\n\nhttps://blog.csdn.net/qq_40031303/article/details/113920135',86,1,'blog/1.jpg',0,24,3,4,'2021-11-01 00:00:00','2021-11-10 18:11:00');
/*!40000 ALTER TABLE `sn_article` ENABLE KEYS */;

-- 
-- Definition of sn_leave
-- 

DROP TABLE IF EXISTS `sn_leave`;
CREATE TABLE IF NOT EXISTS `sn_leave` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `text` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '留言内容',
  `user_id` int(11) NOT NULL COMMENT '用户外键',
  `time_create` datetime NOT NULL COMMENT '发布时间',
  `time_modified` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `user_id` (`user_id`),
  CONSTRAINT `user_id` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_leave
-- 

/*!40000 ALTER TABLE `sn_leave` DISABLE KEYS */;
INSERT INTO `sn_leave`(`id`,`text`,`user_id`,`time_create`,`time_modified`) VALUES
(4,'string',4,'2020-12-25 00:00:00','2021-11-02 00:00:00'),
(5,'string',4,'2020-12-25 00:00:00','2021-11-02 00:00:00'),
(6,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(7,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(8,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(9,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(10,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(11,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(12,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(13,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(14,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(15,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(16,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(17,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(18,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(19,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(20,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(21,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(22,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(23,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(24,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(25,'string',4,'2021-04-29 00:00:00','2021-11-02 00:00:00'),
(26,'string',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(27,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(28,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(29,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(30,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(31,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(32,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(33,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(34,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(35,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(36,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(37,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(38,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(39,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(40,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(41,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(42,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(43,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00'),
(44,'jenny',4,'2021-05-03 00:00:00','2021-11-02 00:00:00');
/*!40000 ALTER TABLE `sn_leave` ENABLE KEYS */;

-- 
-- Definition of sn_navigation
-- 

DROP TABLE IF EXISTS `sn_navigation`;
CREATE TABLE IF NOT EXISTS `sn_navigation` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '导航标题',
  `describe` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题描述',
  `img` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图片路径',
  `url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '链接路径',
  `type_id` int(11) NOT NULL COMMENT '分类',
  `user_id` int(11) NOT NULL COMMENT '用户',
  `time_create` datetime DEFAULT NULL,
  `time_modified` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `nav_user_id` (`user_id`),
  KEY `nav_type_id` (`type_id`),
  CONSTRAINT `nav_type_id` FOREIGN KEY (`type_id`) REFERENCES `sn_navigation_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `nav_user_id` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=563 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_navigation
-- 

/*!40000 ALTER TABLE `sn_navigation` DISABLE KEYS */;
INSERT INTO `sn_navigation`(`id`,`title`,`describe`,`img`,`url`,`type_id`,`user_id`,`time_create`,`time_modified`) VALUES
(1,'Webpack','Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.27/dist/img/webpack.png','https://www.webpackjs.com/',14,4,'2021-11-10 14:45:01','2021-11-11 16:24:54'),
(2,'React','React 起源于 Facebook 的内部项目，是一个用于构建用户界面的 JavaScript 库。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.27/dist/img/react.png','https://reactjs.bootcss.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(3,'TypeScript','TypeScript 是由微软开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.27/dist/img/typescript.png','https://typescript.bootcss.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(4,'Svelte','Svelte 是构建 Web 应用程序的一种新方法。Svelte 是一个编译器，它将声明性组件转换成高效的 JavaScript 代码，并像做外科手术一样细粒度地更新 DOM。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.27/dist/img/svelte.png','https://www.sveltejs.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(5,'Next.js','Next.js 是一个轻量级的 React 服务端渲染应用框架。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.28/dist/img/nextjs.png','https://www.nextjs.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(6,'Babel','Babel 是一个 JavaScript 编译器。Babel 通过语法转换器支持最新版本的 JavaScript 语法。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.27/dist/img/babeljs.png','https://www.babeljs.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(7,'Node.js','Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.28/dist/img/nodejs.png','https://www.nodeapp.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(8,'Deno','Deno 是一个简单、现代且安全的 JavaScript 和 TypeScript 运行时，deno 基于 V8 引擎并使用 Rust 编程语言构建。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.28/dist/img/deno.png','https://deno.bootcss.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(9,'Yarn','Yarn 是一个快速、可靠、安全的依赖管理工具。是 NPM 的替代品。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.28/dist/img/yarn.png','https://yarn.bootcss.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(10,'Yarn v2','Yarn 是一个快速、可靠、安全的依赖管理工具。是 NPM 的替代品。Yarn v2 与 v1 版本有很大的不同，Yarn v2 改进了 CLI 交互、支持 workspace、PnP 等新功能。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.28/dist/img/yarn.png','https://www.yarnpkg.com.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(11,'前端学习路线','好好学习，天天敲代码','https://objtube.github.io/front-end-roadmap/#/','https://objtube.github.io/front-end-roadmap/#/',15,4,'2021-11-10 14:45:01','2021-12-16 14:25:19'),
(12,'Visual Studio 2019','功能完备的集成开发环境 (IDE)，适用于 Android、iOS、Windows、Web 和云 (IDE)','https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE1Mu3b?ver=5c31','https://visualstudio.microsoft.com/zh-hans/downloads/',14,4,'2021-11-10 14:45:01','2021-11-18 10:44:59'),
(13,'webpack','本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。','1','https://www.webpackjs.com/concepts/',3,4,'2021-11-10 14:45:01','2021-11-15 14:14:43'),
(14,'现代 JavaScript','以最新的 JavaScript 标准为基准。通过简单但足够详细的内容，为你讲解从基础到高阶的 JavaScript 相关知识。','https://zh.javascript.info/','https://zh.javascript.info/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(15,'Sass中文网','Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass 以及 Sass 的样式库（如 Compass）有助于更好地组织管理样式文件，以及更高效地开发项目。','https://www.sass.hk/docs/','https://www.sass.hk/docs/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(16,'BootstrapVue','我们开始BootstrapVue之旅游，基于全球最流行的Bootstrap V4框架，构建移动优先的响应式门户，在Vue.js前端栈基础上。','http://code.z01.com/bootstrap-vue/docs/','http://code.z01.com/bootstrap-vue/docs/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(17,'前端导航站','前端内容汇总','http://jsdig.com/','http://jsdig.com/',15,4,'2021-11-10 14:45:01','2021-12-16 14:25:48'),
(18,'Md2All排版','Markdown排版利器，支持 \"一键排版\" 、自定义css、80多种代码高亮。\n能让Markdown内容，无需作任何调整就能一键复制到微信公众号、博客园、掘金、知乎、csdn、51cto、wordpress、hexo。。。等平台。','http://md.aclickall.com/','http://md.aclickall.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(19,'VuePress','Vue 驱动的静态网站生成器','https://v0.vuepress.vuejs.org/zh/','https://v0.vuepress.vuejs.org/zh/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(20,'Blog.Core','BCVP（Blog.Core & Vue Project）是一个开箱即用的企业级权限管理应用框架。\n采用最新的前后端完全分离技术【 ASP.NET Core Api 3.x + Vue 2.x 】。','http://apk.neters.club/.doc/','http://apk.neters.club/.doc/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(21,'sqlSugar','.NET 4.+ & .NET CORE 高性能 轻量级 ORM框架，众多.NET框架中最容易使用的数据库访问技术','http://www.codeisbug.com/','http://www.codeisbug.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(22,'Avue','一个很多骚操作的前端框架\n让数据驱动视图，减去繁琐的操作，更贴近企业级的前端开发组件','https://avuejs.com/','https://avuejs.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(24,'Bootstrap ','基于 Bootstrap 样式库精心打造，并且额外增加了 50 多种常用的组件，为您快速开发项目带来非一般的感觉','https://blazor.sdgxgz.com/','https://blazor.sdgxgz.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(25,'Editor.md','\n开源在线 Markdown 编辑器','http://editor.md.ipandao.com/','http://editor.md.ipandao.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(26,'标签[c#]','','https://stackoom.com/img/logo.png','https://stackoom.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(27,'Font Aweso','世界上最流行的ICON图标字体库和CSS工具包','http://www.fontawesome.com.cn/','http://www.fontawesome.com.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(28,'Dotnet9','Donet技术论坛','https://dotnet9.com/','https://dotnet9.com/',8,4,'2021-11-10 14:45:01','2021-11-15 14:30:21'),
(29,'vol.vue','前后端分离\n\n全自动代码生成\n\n支持前端、后台扩展的快速开发框架','http://www.volcore.xyz/','http://www.volcore.xyz/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(30,'jQuery插件库','jQuery插件库','https://www.jq22.com/','https://www.jq22.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(31,'Vue.js中文文档','渐进式\nJavaScript 框架','https://vue.docschina.org/','https://vue.docschina.org/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(32,'我是前端','前端学习','https://www.imqianduan.com/','https://www.imqianduan.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(33,'CSS Fonts','网络安全 CSS 字体堆栈的完整集合。','','https://www.cssfontstack.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(34,'CSS速查总表 ','','http://css.cuishifeng.cn/','http://css.cuishifeng.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(35,'爆胎','互联网长方体空间移动师','https://tvax1.sinaimg.cn/square/0084aYsLly1ggmuk8fguaj305k05kq30.jpg','https://itggg.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(36,'青找博客','我们总在生活中与「一瞬的感动」相遇。','https://tva3.sinaimg.cn/square/0084aYsLly1ggmukfjc0uj3068068dfs.jpg','https://www.linguang.me/',8,4,'2021-11-10 14:45:01','2021-11-11 16:24:27'),
(37,'axios中文网','易用、简洁且高效的http库','','http://www.axios-js.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(38,'layui','由职业前端倾情打造，面向全层次的前后端开发者，低门槛开箱即用的前端 UI 解决方案','','https://www.layui.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(39,'我爱斗图','在线表情包','','https://www.52doutu.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(40,'Quasar Fra','以最短时间构建高性能的VueJS用户界面','','http://www.quasarchs.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(41,'Electron','使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序','','https://www.electronjs.org/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(42,'2020年Web前端','新手入门前端，需要学习的基础内容有很多，如下。','','https://www.cnblogs.com/qianguyihao/p/8776837.html',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(43,'ZUI','一个基于 Bootstrap 深度定制开源前端实践方案，帮助你快速构建现代跨屏应用。','','https://www.openzui.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(44,'Aplayer','Wow, such a beautiful HTML5 music player','','https://aplayer.js.org/#/zh-Hans/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(45,'alloyteam','','','http://www.alloyteam.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(46,'.NET万能框架','项目基于.NET 4.5构建，语法版本C#6.0，包含日常编程多数的常用封装，可以说是一个万能框架，能够用于任何基于.NET平台的项目当中。','','https://masuit.com/55',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(47,'Tailwind Grids','为 Tailwind CSS 项目轻松生成响应式网格。所有生成的类都基于 Tailwind 默认值，只需选择您的设置即可开始使用。','','https://tailwindgrids.com/#/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(48,'CSS Inspiration -- CSS灵感','这里可以让你寻找到使用或者是学习 CSS 的灵感，以分类的形式，展示不同 CSS 属性或者不同的课题使用 CSS 来解决的各种方法。','','https://csscoco.com/inspiration/#/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(49,'小游网','二次元技术宅','https://img.xiaoyou66.com/images/2020/02/20/tTSY.jpg','https://xiaoyou66.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(50,'全历史','全历史(Allhistory)以AI知识图谱为核心引擎,通过高度时空化、关联化数据的方式构造及展现数字人文内容,尤其是历史知识。','https://img.xiaoyou66.com/images/2020/02/20/tTSY.jpg','https://www.allhistory.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(51,'疯狂去水印','打开短视频APP， 选择要下载的视频，点击右下角分享按钮，在分享弹框中点击“复制链接”','https://douyin.video996.com/img/mp.jpg','https://douyin.video996.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(52,'知妖','知妖是一个开放的在线“妖怪”资料库。致力于收集、整理、介绍、分享古人文献中的“妖怪”。我们尽可能地收录古文献中的“妖怪”资料，让更多的人能够完整，系统地了解中国“妖怪”文化。','https://static.cbaigui.com/images/2020/04/loading.jpg!full','https://www.cbaigui.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(53,'煎蛋','地球上没有新鲜事','http://img.jandan.net/news/2020/03/2e4024373d26ccd3888e29a6f4152076.jpg!square','http://jandan.net/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(54,'小鸡词典','查网络流行语','https://jikipedia.com/images/logo/logo_full_side.png','https://jikipedia.com/',8,4,'2021-11-10 14:45:01','2021-11-18 13:41:02'),
(55,'网站任意门','你将被传送到完全随机的一个网站，传送到任何一个网站的概率都是相等的。','https://gate.ofo.moe/social/hero-4.jpg','https://gate.ofo.moe/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(56,'Tailwind C','Tailwind 是基于 PostCSS 开发的,通过 JavaScript 代码进行配置,这意味着你可以完全发挥真正的编程语言的能力。 Tailwind 不仅仅是一个 CSS 框架,他更是构建设计系统','','https://www.tailwindcss.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(57,'Flexbox网格','基于flex显示属性的网格系统。','','http://flexboxgrid.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(58,'purecss','一组小型的自适应CSS模块，您可以在每个Web项目中使用。','https://purecss.io/img/logo_pure@2x.png','https://purecss.io/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(59,'vue-aplayer','A beautiful HTML5 music player for Vue.js','https://aplayer.netlify.app/docs/hero.png','https://aplayer.netlify.app/docs/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(60,'林德熙','微软最具价值专家 Windows Development MVP','https://blog.lindexi.com/img/avatar.png','https://blog.lindexi.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(61,'MahApps.Me','MahApps.Metro是一个框架，使开发人员可以轻松地为自己的WPF应用程序整合Metro或Modern UI。','https://mahapps.com/assets/img/oss.png','https://mahapps.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(62,'C#入门经典教程','C# 是微软推出的一门面向对象的通用型编程语言，它除了可以开发 PC 软件、网站（借助 ASP.NET）和 APP（基于 Windows Phone），还能作为游戏脚本，编写游戏逻辑。','','http://c.biancheng.net/csharp/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(63,'.NET技术','代码改变世界','http://www.vnfan.com/lteui/dist/img/user2-160x160.jpg','http://www.vnfan.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(64,'C# 指南','官方指南','https://docs.microsoft.com/favicon.ico','https://docs.microsoft.com/zh-cn/dotnet/csharp/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(65,'Ant Design Blazor','这里是 Ant Design 的 Blazor 实现，开发和服务于企业级后台产品。','https://raw.githubusercontent.com/ant-design-blazor/ant-design-blazor/master/logo.svg','https://ant-design-blazor.gitee.io/zh-CN/docs/introduce',4,4,'2021-11-10 14:45:01','2022-09-28 11:43:42'),
(66,'mavonEditor','关于\nmavonEditor-基于Vue的markdown编辑器，支持多种个性化功能','https://raw.githubusercontent.com/ant-design-blazor/ant-design-blazor/master/logo.svg','https://github.com/hinesboy/mavonEditor',24,4,'2021-11-10 14:45:01','2022-09-28 11:44:16'),
(67,'Lodash','关于\nmavonEditor-基于Vue的markdown编辑器，支持多种个性化功能','https://www.lodashjs.com/','https://www.lodashjs.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(68,'VUE粒子','粒子背景的Vue.js组件','','https://vue-particles.netlify.app/',24,4,'2021-11-10 14:45:01','2021-11-18 14:38:44'),
(69,'Element','Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库','','https://element.eleme.cn/#/zh-CN',19,4,'2021-11-10 14:45:01','2021-11-18 14:38:29'),
(70,'outils','前端业务代码工具库','','https://www.npmjs.com/package/outils',5,4,'2021-11-10 14:45:01','2021-11-15 14:33:28'),
(71,'Anime.js','一个强大的、轻量级的用来制作动画的javascript库','','https://animejs.com/',12,4,'2021-11-10 14:45:01','2021-11-18 14:38:20'),
(72,'Hover.css','CSS hover 悬停效果，可以应用于链接、按钮、图片等等','','http://ianlunn.github.io/Hover/',12,4,'2021-11-10 14:45:01','2022-09-28 11:43:55'),
(73,'Waves','点击波纹效果','','http://fian.my.id/Waves/#examples',9,4,'2021-11-10 14:45:01','2021-11-18 14:37:52'),
(74,'Viewer.js','图片滑动切换展示效果','','https://fengyuanchen.github.io/viewerjs/',5,4,'2021-11-10 14:45:01','2021-11-18 14:38:37'),
(75,'clipboard','复制粘贴插件','','https://clipboardjs.com/',24,4,'2021-11-10 14:45:01','2021-11-18 14:38:02'),
(76,'You-need-to-know-css','作为一名Web开发者，CSS是必备技能之一，我一直以为自己对CSS的掌握已经够用了，直到读Lea Verou的《CSS揭秘》，我发现自己充其量就算个会打CS的选手，书中针对我们常见的网页设计难题从不同的角度提出了多种实用又优雅的解决方案，在这里强烈的推荐给每一位从事前端相关工作和对前端有兴趣的同学，相信你一定会有所收获','https://lhammer.cn/You-need-to-know-css/static/logo.png','https://lhammer.cn/You-need-to-know-css/#/zh-cn/',9,4,'2021-11-10 14:45:01','2021-11-18 14:37:38'),
(77,'Shiro','Shiro，是alphardex平时所做的CSS创意作品集','','https://shiroi.netlify.app/',9,4,'2021-11-10 14:45:01','2021-11-18 14:37:32'),
(78,'今日热榜','每日榜单','https://file.ipadown.com/tophub/assets/images/logo.png','https://tophub.today/',11,4,'2021-11-10 14:45:01','2021-11-18 14:37:25'),
(79,'艾特网','程序员之家','https://iiter.cn/_nuxt/img/f996b71.png','https://iiter.cn/',8,4,'2021-11-10 14:45:01','2021-11-18 14:37:03'),
(80,'PostCSS','是一个用 JavaScript 工具和插件转换 CSS 代码的工具','https://www.postcss.com.cn/postcss.1b20c651.png','https://www.postcss.com.cn/',12,4,'2021-11-10 14:45:01','2022-09-28 11:43:14'),
(81,'Articles','css技巧','','https://css-tricks.com/archives/',9,4,'2021-11-10 14:45:01','2021-11-18 14:37:10'),
(82,'JavaScript 秘密花园','此中文翻译由三生石上独立完成，博客园首发，转载请注明出处。','','https://bonsaiden.github.io/JavaScript-Garden/zh/#intro',5,4,'2021-11-10 14:45:01','2021-11-18 14:35:56'),
(83,'uni-app','uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。','https://vkceyugu.cdn.bspapp.com/VKCEYUGU-uni-app-doc/7c946930-bcf2-11ea-b997-9918a5dda011.png','https://uniapp.dcloud.io/README',21,4,'2021-11-10 14:45:01','2021-11-18 14:37:45'),
(84,'前端小册子','前端学习曲线陡峭，入门容易精通难。后期有瓶颈往往是因为前期基础不扎实。学习一点，掌握一点，貌似慢，实际快。实战是好事，但理论不扎实就着急实战并非是好事。实战帮助更好地理解理论，而不是帮助学习理论。理论学明白，项目才能踏实做，否则，在实战的过程中得到的只是零碎知识点，并没有形成完善的理论体系，收效不大\n好的代码像粥一样，都是用时间熬出来的。小火柴立志要做一名前端工匠\n\n这个小册子是小火柴总结的前端知识结构，方便自己学习，也希望能够帮到更多人\n由于里面许多内容是自己的总结，可能会有错误或纰漏之处，希望不会造成误导，多多交流','https://vkceyugu.cdn.bspapp.com/VKCEYUGU-uni-app-doc/7c946930-bcf2-11ea-b997-9918a5dda011.png','https://xiaohuochai.site/introduce.html',11,4,'2021-11-10 14:45:01','2021-11-18 14:36:36'),
(85,'uView(uni-appUI框架)','uView UI，是uni-app生态最优秀的UI框架，全面的组件和便捷的工具会让您信手拈来，如鱼得水','https://uviewui.com/common/logo.png','https://uviewui.com/',19,4,'2021-11-10 14:45:01','2021-11-18 14:36:53'),
(86,'umy-ui','为开发者准备的基于 Vue 2.0 的桌面端组件库; 流畅渲染表格万级数据','','https://www.umyui.com/',21,4,'2021-11-10 14:45:01','2021-11-18 14:36:30'),
(87,'Element UI表单设计及代码生成器','可将生成的代码直接运行在基于Element的vue项目中；也可导出JSON表单，使用配套的解析器将JSON解析成真实的表单。','','https://jakhuang.github.io/form-generator/#/',19,4,'2021-11-10 14:45:01','2021-11-18 14:36:47'),
(88,'luch-request(uni-app)','基于Promise开发的uni-app跨平台请求库','https://www.quanzhan.co/luch-request/assets/img/logo.jpg','https://www.quanzhan.co/luch-request/',21,4,'2021-11-10 14:45:01','2021-11-18 14:36:22'),
(89,'Entity Framework Core API 参考','欢迎使用 .NET API 浏览器！这个一站式商店，销售 Microsoft 提供的所有基于 .NET 的 API。 在下面的框中键入字词，开始搜索任意托管 API 吧。 可以通过我们的博文详细了解 API 浏览器。','','https://docs.microsoft.com/zh-cn/dotnet/api/?view=efcore-3.1',4,4,'2021-11-10 14:45:01','2021-11-18 13:41:27'),
(90,'Furion','Furion 是 .NET 5 平台下极易入门、极速开发的 Web 应用框架。','https://monksoul.gitee.io/fur/img/logo.png','https://dotnetchina.gitee.io/furion/',4,4,'2021-11-10 14:45:01','2021-11-18 13:40:32'),
(91,'Phonto','Hey There\nI''m Bruce.Au\n( σ''ω'')σ#Skr','https://cdn.toofook.com/my-blog/myfont.png','https://www.vanoc.top/about',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(92,'vue-admin-beautiful','是一款基于vue+element-ui的绝佳的中后台前端开发管理框架（基于vue/cli 4 最新版，同时支持电脑，手机，平板）,他同时是拥有100+页面的大型vue前端单页应用','','https://gitee.com/chu1204505056/vue-admin-beautiful/?hmsr=github&hmpl=&hmcu=&hmkw=&hmci=',19,4,'2021-11-10 14:45:01','2021-11-18 13:41:17'),
(93,'Animate中文网','强大的跨平台的预设css3动画库\n内置了很多典型的css3动画，兼容性好使用方便','','http://www.animate.net.cn/',9,4,'2021-11-10 14:45:01','2021-11-18 13:40:25'),
(94,'jQuery API 3.3.1 速查表','速查表','','https://www.94xh.com/index.html',5,4,'2021-11-10 14:45:01','2021-11-18 13:40:08'),
(95,'flv.js(播放器)','flv.js 是一个使用纯JavaScript编写的FLV(HTML5 Flash Video)播放器。','','https://www.bootcdn.cn/flv.js/1.5.0/',5,4,'2021-11-10 14:45:01','2021-11-18 13:39:57'),
(96,'福利汇总','大千世界收集福利分享','','https://www.gifxu.com/',10,4,'2021-11-10 14:45:01','2021-11-18 12:28:16'),
(97,'Animate.css','Just-add-water CSS animations','','https://animate.style/',9,4,'2021-11-10 14:45:01','2021-11-18 10:58:10'),
(98,'Typecho','Typecho博客分享','https://qqdie.com/wp-content/themes/lighthouse/images/typecho.png','https://qqdie.com/links.html',14,4,'2021-11-10 14:45:01','2021-11-18 10:58:03'),
(99,'Umar Hansa的开发人员技巧','开发人员技巧','','https://umaar.com/dev-tips/',15,4,'2021-11-10 14:45:01','2021-11-18 10:57:50'),
(100,'iconfont','阿里巴巴图形库','','https://www.iconfont.cn/',18,4,'2021-11-10 14:45:01','2021-11-18 14:36:05'),
(101,'highlight.js','Web语法突出显示','','https://highlightjs.org/',5,4,'2021-11-10 14:45:01','2021-11-18 10:57:30'),
(102,'MakingCSS','The web tool for generating CSS3 code','','https://makingcss.com/',9,4,'2021-11-10 14:45:01','2021-11-18 10:57:38'),
(103,'CSS生成器','','','https://www.cssportal.com/',9,4,'2021-11-10 14:45:01','2021-11-18 10:37:40'),
(104,'LintCode 领扣','空前强大的  在线编程  训练系统  即刻启程！','','https://www.lintcode.com/',17,4,'2021-11-10 14:45:01','2021-11-18 10:52:12'),
(105,'postcss简介','PostCSS 是一个允许使用 JS 插件转换样式的工具。 这些插件可以检查（lint）你的 CSS，支持 CSS Variables 和 Mixins， 编译尚未被浏览器广泛支持的先进的 CSS 语法，内联图片，以及其它很多优秀的功能。','','https://www.cnblogs.com/aidixie/p/12771985.html',9,4,'2021-11-10 14:45:01','2021-11-18 10:44:28'),
(106,'TypeScript','TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。\nTypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。','','https://www.tslang.cn/index.html',5,4,'2021-11-10 14:45:01','2021-11-18 10:44:35'),
(107,'Axios中文文档','Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。','','https://www.kancloud.cn/yunye/axios/234845',13,4,'2021-11-10 14:45:01','2021-11-18 10:44:07'),
(108,'关于ASP.NETCore的分享之路','学习路线图\nASP.NET CORE学习指南\n《基础知识掌握部分》\n《部署与组件学习部分》\n《容器化与跨平台部分》','','https://www.cnblogs.com/laozhang-is-phi/p/all-knowledge-for-netcore.html#autoid-2-1-0',15,4,'2021-11-10 14:45:01','2021-11-18 14:36:14'),
(109,'C#之Action和Func的用法','','','https://www.cnblogs.com/LipeiNet/p/4694225.html',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(110,'NanUI 界面组件','这是一个开放源代码的 .NET / .NET Core 窗体应用程序（WinForms）界面组件。您可以使用 HTML5 / CSS3 / Javascript 等前端技术来构建您的应用程序界面。主流的Javascript框架，比如Angular, React, Vue都是可以用来构架SPA应用的明智选择。使用 NanUI 界面组件将给您的窗体设计工作带来无限可能。','','https://www.formium.net/',4,4,'2021-11-10 14:45:01','2021-11-18 10:44:13'),
(111,'让你30分钟快速掌握vue 3','经过了漫长的迭代，Vue 3.0终于在上2020-09-18发布了，带了翻天覆地的变化，使用了Typescript 进行了大规模的重构，带来了Composition API RFC版本，类似React Hook 一样的写Vue，可以自定义自己的hook ，让使用者更加的灵活，接下来总结一下vue 3.0  带来的部分新特性。\n\n作者：撒点料儿\n链接：https://juejin.im/post/6887359442354962445\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。','','https://juejin.im/post/6887359442354962445',15,4,'2021-11-10 14:45:01','2021-11-18 10:39:34'),
(112,'vuepress-theme-vdoing','一款简洁高效的VuePress 知识管理&博客 主题','https://doc.xugaoyi.com/vuepress-theme-vdoing-doc/','https://doc.xugaoyi.com/vuepress-theme-vdoing-doc/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(113,'软件工艺师(bibi)','视频教程','https://doc.xugaoyi.com/vuepress-theme-vdoing-doc/','https://space.bilibili.com/361469957/video',8,4,'2021-11-10 14:45:01','2021-11-18 10:38:51'),
(114,'NetModular','为中小型企业而生的基于.Net Core平台的模块化快速开发解决方案','https://docs.17mkh.com/images/logo.png','https://docs.17mkh.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(115,'秦枫鸢梦','花有重开日，人无再少年','https://q1.qlogo.cn/g?b=qq&nk=2013143650&s=100','https://blog.zwying.com/',8,4,'2021-11-10 14:45:01','2021-11-18 10:39:15'),
(116,'Mikutap','','','https://xiabor.com/mikutap/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(117,'Typora','Typora 是一款支持实时预览的 Markdown 文本编辑器。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是完全免费的。','12321','https://typora.io/',14,4,'2021-11-10 14:45:01','2021-11-18 10:36:44'),
(118,'LtGt','LtGt是一个用于处理HTML的简约库','','https://www.ctolib.com/Tyrrrz-LtGt.html',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(119,'ExCSS','一个CSS3解析器C#库','','https://www.ctolib.com/ExCSS.html',4,4,'2021-11-10 14:45:01','2021-11-18 10:39:02'),
(120,'Everything','Everything中文版是一款功能强大，便捷实用的文件搜索软件。','','https://everything.en.softonic.com/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(121,'AnyDesk','远程连接到您的计算机，无论是从办公室的另一层还是世界的另一端。 AnyDesk为IT专业人员和移动用户提供安全可靠的远程桌面连接。','','https://anydesk.com/zhs',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(122,'WebStorm','WebStorm 是jetbrains公司旗下一款JavaScript 开发工具。已经被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScript IDE”等。与IntelliJ IDEA同源，继承了IntelliJ IDEA强大的JS部分的功能。','','https://www.jetbrains.com/help/webstorm/installation-guide.html',14,4,'2021-11-10 14:45:01','2021-11-18 10:43:58'),
(123,'Snipaste','截图工具','','https://www.snipaste.com/',14,4,'2021-11-10 14:45:01','2021-11-18 10:39:24'),
(124,'XMind','思如泉涌 • 成竹在图','','https://www.xmind.cn/',14,4,'2021-11-10 14:45:01','2021-11-18 10:39:08'),
(125,'Postman','API开发协作平台','','https://www.postman.com/',14,4,'2021-11-10 14:45:01','2021-11-18 10:35:45'),
(126,'AutoHotkey','AutoHotkey 是一个自由、开源的宏生成器和自动化软件工具，它让用户能够自动执行重复性任务。AutoHotkey 可以修改任何应用程序的用户界面（例如，把默认的 Windows 按键控制命令替换为 Emacs 风格）。它是由定制的脚本语言驱动，旨在提供键盘快捷键或热键。——wikipedia','','https://www.autohotkey.com/',14,4,'2021-11-10 14:45:01','2021-11-17 17:10:09'),
(127,'Notepad++','Notepad++ 是在微软视窗环境之下的一个免费的代码编辑器。为了产生小巧且有效率的代码编辑器,这个在GPL许可证下的自由软体开发专案采用 win32 api 和 STL 以 ...','','https://notepad-plus-plus.org/',14,4,'2021-11-10 14:45:01','2021-11-17 17:10:00'),
(128,'字体仓库','免费字体库','','https://www.ziticangku.com/',14,4,'2021-11-10 14:45:01','2021-11-17 17:09:40'),
(129,'You-need-to-know-css','为了以后可以更爽的复制粘贴，笔者把自己的收获和工作中常用的一些CSS小样式总结成这份文档','','https://lhammer.cn/You-need-to-know-css/#/zh-cn/',9,4,'2021-11-10 14:45:01','2021-11-17 17:09:33'),
(130,'CSS Tricks','总结一些常用的 CSS 样式\n记录一些 CSS 的新属性和一点奇技淫巧\n在“动”部分下有些动画并不是 CSS 效果，因为没有地方放置，所以暂时寄存在这里\n尽量少说废话，代码简单易用，方便复制','','http://css-tricks.neatbang.com/',9,4,'2021-11-10 14:45:01','2021-11-17 17:09:22'),
(131,'animista','该项目里面有各种 CSS 实现的效果，还有代码演示，方便直接复制代码，还可以复制压缩后的代码，如果你在找某个 CSS 的效果的话，可以到这里找找看。','','https://animista.net/',9,4,'2021-11-10 14:45:01','2021-11-18 10:35:52'),
(132,'spinkit','汇集了实现各种加载效果的 CSS 代码片段。\n\nSpinKit 仅使用（transform 和 opacity）CSS 动画来创建平滑且易于自定义的动画。','','https://tobiasahlin.com/spinkit/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(133,'Blog.Admin','框架涵盖 VUE 开发中常见的基本知识点，不仅适合初学者入门，同时也适用于企业级别的开发。','','https://vueadmin.neters.club/.doc/',19,4,'2021-11-10 14:45:01','2021-11-17 17:09:47'),
(134,'.NET Core 学习资料精选：入门','主要分享一些.NET Core比较优秀的社区资料和微软官方资料。我进行了知识点归类，让大家可以更清晰的学习.NET Core。\n\n首先感谢资料原作者的贡献。','','https://www.cnblogs.com/heyuquan/p/dotnet-basic-learning-resource.html',15,4,'2021-11-10 14:45:01','2021-11-17 17:05:08'),
(135,'.NET Core 学习资料精选：进阶','主要分享一些.NET Core比较优秀的社区资料和微软官方资料。我进行了知识点归类，让大家可以更清晰的学习.NET Core。\n\n首先感谢资料原作者的贡献。','','https://www.cnblogs.com/heyuquan/p/dotnet-advance-learning-resource.html',15,4,'2021-11-10 14:45:01','2021-11-17 17:09:11'),
(136,'ASP.NET Core on K8S 入门学习系列文章目录','K8S的入门学习放到了2019年的学习列表中，并总结了一些学习笔记和实践总结的文章并汇总在这里，希望对各位园友有帮助！','','https://www.cnblogs.com/edisonchou/',15,4,'2021-11-10 14:45:01','2021-11-18 12:28:04'),
(137,'.NET Core微服务架构学习与实践系列文章目录','拥抱开源，任重而道远！','K8S的入门学习放到了2019年的学习列表中，并总结了一些学习笔记和实践总结的文章并汇总在这里，希望对各位园友有帮助！','https://www.cnblogs.com/edisonchou/p/dotnetcore_microservice_foundation_blogs_index_final.html',15,4,'2021-11-10 14:45:01','2021-11-18 10:43:50'),
(138,'C# 官方语言指南','提供许多有关 C# 语言学习资源、新增功能、概念、操作指南、编程指南和语言参考等。','','https://docs.microsoft.com/zh-cn/dotnet/csharp/',13,4,'2021-11-10 14:45:01','2021-11-17 17:04:51'),
(139,'ASP.NET Core 教程','跨平台的高性能开源框架，用于在 Windows、Mac 或 Linux 上开发基于现代化的 Web 应用程序。','','https://docs.microsoft.com/zh-cn/aspnet/core/?view=aspnetcore-5.0',15,4,'2021-11-10 14:45:01','2021-11-18 10:59:12'),
(140,'EF Core 官方教程','Entity Framework (EF) Core 是轻量化、可扩展、开源和跨平台版的常用数据访问技术。','','https://docs.microsoft.com/zh-cn/ef/core/',13,4,'2021-11-10 14:45:01','2021-11-17 16:56:56'),
(141,'Visual Studio 文档','学习使用强大功能提高开发效率，开发、生成、调试、测试、部署、版本控制、 DevOps 和性能分析','','https://docs.microsoft.com/zh-cn/visualstudio/?view=vs-2019',13,4,'2021-11-10 14:45:01','2021-11-17 16:56:48'),
(142,'.NET 微服务应用程序架构指南','本指南介绍如何使用 .NET Core 和 Docker 容器开发基于微服务的应用程序并对其进行管理。','','https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/',4,4,'2021-11-10 14:45:01','2021-11-18 10:43:30'),
(143,'微软 eShopOnWeb 开源框架','基于 ASP.NET Core 构建的单体分层应用架构，使用 DDD 领域驱动设计程序体系结构和部署模型。','','https://www.cnblogs.com/MrHSR/p/10855824.html',4,4,'2021-11-10 14:45:01','2021-11-17 16:56:23'),
(144,'IdentityServer4中文文档','dentityServer4 是一个免费的开源 OpenID Connect 和 OAuth 2.0 身份认证与授权框架，适用于 ASP.NET Core 平台，IdentityServer4 由 Dominick Baier 和 Brock Allen 两位大神创建和维护，您可以快捷的在应用程序中集成基于令牌的身份验证，单点登录和 API 访问控制，支持非常多的协议实现和可扩展点，IdentityServer4 由 OpenID 基金会正式认证，因此符合规范且可互操作，被微软作为 .NET 基金会项目的一部分，并根据其行为准则运行，虽然这个框架也非常的好，博客也不少，但以下整理的中文文档值得推荐学习。','','https://www.xcode.me/post/6038#',4,4,'2021-11-10 14:45:01','2021-11-17 16:56:30'),
(145,'dnSpy基于.NET的反编译工具','dnSpy是一款基于.NET的反编译与调试工具，开源免费，能够讲.NET开发的Exe和Dll程序集反编译为C#代码，同时支持断点调试和代码二次编辑，如果您只有编译后的程序集，在没有源码的情况下想还原C#源码，dnSpy绝对是首选。','','https://github.com/dnSpy/dnSpy/releases',4,4,'2021-11-10 14:45:01','2021-11-17 17:05:15'),
(146,'Visual Studio 2015','软就放出了VS2015不同版本的离线安装镜像包，支持32位和64位，现在，您就可以下载并安装它','','https://www.xcode.me/post/1916',14,4,'2021-11-10 14:45:01','2021-11-17 16:55:55'),
(147,'微软官方常用系统工具合集','这些小工具原本是为了解决工程师们平常在工作上遇到的各种问题而开发的，之后他们将这些工具集合起来称为 Sysinternals，并免费提供公众下载，其中部分还开源了，一直以来都颇受 IT 界人士的好评。如果把管理员比喻成战士的话，那么 Sysinternals 就是我们手中的良兵利器。熟悉和掌握这些工具，并且对 Windows 的体系有一定的了解，将大幅提高你的电脑维护、应用技能。','','https://www.xcode.me/post/1631',4,4,'2021-11-10 14:45:01','2021-11-17 17:04:59'),
(149,'零度编程','分享编程之美','','https://www.xcode.me/',8,4,'2021-11-10 14:45:01','2021-11-17 16:54:17'),
(150,'技术胖','专注前端开发,每年100集免费视频。','https://blogimages.jspang.com/blogtouxiang1.jpg','http://www.jspang.com/',8,4,'2021-11-10 14:45:01','2021-11-17 16:40:28'),
(151,'网站(Web App)','这里包含了基于Vue.js开发的网站应用程序，包括管理工具、网页游戏、购物社交网站等。','','https://madewith.cn/',3,4,'2021-11-10 14:45:01','2021-11-17 16:40:20'),
(152,'任务协助系统','任何业务场景，您都可以找到合适的方案 PearProject 拥有丰富且灵活的产品研发管理功能，协助您释放产品研发能力，是推动研发进程的强力驱动','','https://home.vilson.xyz/?from=madewith.cn#/',13,4,'2021-11-10 14:45:01','2021-11-17 16:40:10'),
(154,'NPM','NPM（node package manager）是 Node.js 世界的包管理器。NPM 可以让 JavaScript 开发者在共享代码、复用代码以及更新共享的代码上更加方便。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/npm.png','https://www.npmjs.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(155,'Lerna','Lerna 是一个管理工具，用于管理包含多个软件包（package）的 JavaScript 项目。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/lernajs.png','https://lernajs.bootcss.com/',5,4,'2021-11-10 14:45:01','2021-11-18 10:36:35'),
(156,'Vue.js','Vue.js - 是一套构建用户界面的渐进式框架。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/vuejs.png','https://vuejs.bootcss.com/guide/',3,4,'2021-11-10 14:45:01','2021-11-17 16:39:56'),
(157,'Nuxt.js','Nuxt.js 是一个基于 Vue.js 的通用应用框架。通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI渲染。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/nuxtjs.png','https://www.nuxtjs.cn/',19,4,'2021-11-10 14:45:01','2021-11-18 10:36:01'),
(158,'Parcel','Parcel - 极速、零配置的 web 应用打包工具。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/parcel.png','https://www.parceljs.cn/',13,4,'2021-11-10 14:45:01','2021-11-17 16:54:33'),
(160,'Pro Git','Pro Git 中文版（第二版）是一本详细的 Git 指南，主要介绍了 Git 的使用基础和原理，让你从 Git 初学者成为 Git 专家。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/progit.png','https://www.progit.cn/',13,4,'2021-11-10 14:45:01','2021-11-18 10:36:26'),
(161,'PurgeCSS','PurgeCSS 是一个用来删除未使用的 CSS 代码的工具，能够减小 CSS 文件的体积。例如可以用来减小 Bootstrap 等前端框架的文件体积，提升加载速度。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/purgecss.png','https://www.purgecss.cn/',9,4,'2021-11-10 14:45:01','2021-11-17 16:39:47'),
(162,'Markdown','Markdown 是一种轻量级标记语言，便于人们使用易读易写的纯文本格式编写文档并添加格式元素。Markdown 是 John Gruber 于 2004 年创建的。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/markdown.png','https://www.markdown.xyz/',20,4,'2021-11-10 14:45:01','2021-11-16 16:37:14'),
(163,'ESLint','ESLint 是一个插件化并且可配置的 JavaScript 语法规则和代码风格的检查工具。ESLint 能够帮你轻松写出高质量的 JavaScript 代码。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/eslint.png','https://cn.eslint.org/',3,4,'2021-11-10 14:45:01','2021-11-16 16:37:05'),
(164,'Infima CSS 框架','Infima 是 Facebook 出品的一个 CSS 框架，专为内容驱动型网站而设计，并且内建对暗模式的支持。是 Docusaurus 的姊妹项目。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/infima.png','https://infima.bootcss.com/',12,4,'2021-11-10 14:45:01','2021-11-16 16:36:38'),
(165,'Stylus','Stylus - 富于表现力、健壮、功能丰富的 CSS 预处理语言。','https://cdn.jsdelivr.net/npm/@bootcss/www.bootcss.com@0.0.37/dist/img/stylus.png','https://stylus.bootcss.com/',9,4,'2021-11-10 14:45:01','2021-11-17 16:39:38'),
(166,'懒得勤快','勤于发现,乐于分享','https://git.imweb.io/ldqk/imgbed/raw/master/20190606/5dc7fc1266bfd8109d1ef5e0e7630f2c_2_3_art.png','https://masuit.com/',8,4,'2021-11-10 14:45:01','2021-11-16 16:36:33'),
(167,'爱哔哔','视频解析','','https://www.ibilibili.com/',14,4,'2021-11-10 14:45:01','2021-11-16 16:36:45'),
(168,'果核剥壳','工具分享','https://www.ghpym.com/wp-content/uploads/2019/12/2020logo.png','https://www.ghpym.com/category/all/pcsoft/pccode',14,4,'2021-11-10 14:45:01','2021-11-16 16:36:59'),
(169,'醉秋风','要相信一切都是最好的安排','https://blog.slomoo.cn/slomoo.png','https://blog.slomoo.cn/',8,4,'2021-11-10 14:45:01','2021-11-16 16:36:27'),
(170,'薛定喵君','scan to see more ?','http://tiaocaoer.com/images/site_icon.png','http://tiaocaoer.com/',8,4,'2021-11-10 14:45:01','2021-11-16 16:36:51'),
(171,'舔狗日记','我们是狗,是舔狗','https://we.dog/assets/images/logo.gif','https://we.dog/',10,4,'2021-11-10 14:45:01','2021-11-16 16:35:44'),
(172,'rscss','CSS样式表结构的合理系统。\n一组简单的想法可以指导您构建可维护CSS的过程。','https://we.dog/assets/images/logo.gif','https://rscss.io/index.html',9,4,'2021-11-10 14:45:01','2021-11-17 16:39:20'),
(173,'WEB安全色','WEB安全色','','https://www.bootcss.com/p/websafecolors/',9,4,'2021-11-10 14:45:01','2021-11-16 16:36:00'),
(174,'Adobe Color ','色輪 (或「擷取主題」標籤中的影像)','','https://color.adobe.com/zh/create/color-wheel',9,4,'2021-11-10 14:45:01','2021-11-18 10:36:08'),
(175,'中国色 ','中国色 ','','http://zhongguose.com/',9,4,'2021-11-10 14:45:01','2021-11-16 16:35:52'),
(176,'托盘式 ','利用数百万设计师的知识生成漂亮的调色板。','','https://www.palettable.io/CCCC82',9,4,'2021-11-10 14:45:01','2021-11-17 17:04:42'),
(177,'itmeo','WebGradients 是180个线性渐变的免费集合，您可以将其用作\n网站任何部分的内容背景。轻松复制CSS3跨浏览器代码\n，稍后使用！我们还为每个渐变准备了.PNG版本。\n 作为奖励，还有用于Sketch  ＆  Photoshop的软件包 。','','https://webgradients.com/',9,4,'2021-11-10 14:45:01','2021-11-17 16:56:42'),
(178,'配色表','网页设计常用色彩搭配表','','http://tool.c7sky.com/webcolor/',9,4,'2021-11-10 14:45:01','2021-11-16 16:34:27'),
(179,'avascript粒子动画引擎','avascript粒子动画引擎','','https://drawcall.github.io/Proton/#examples',9,4,'2021-11-10 14:45:01','2021-11-16 16:36:20'),
(180,'Keyframes helps you write better CSS','Dead simple visual tools to help you generate CSS for your projects.','','https://keyframes.app/',9,4,'2021-11-10 14:45:01','2021-11-16 16:35:34'),
(181,'Ant Design Pro','开箱即用的中台前端/设计解决方案','','https://pro.ant.design/index-cn',19,4,'2021-11-10 14:45:01','2021-11-17 16:39:29'),
(182,'Laravel诗词博客','','','https://www.qqphp.com/article',8,4,'2021-11-10 14:45:01','2021-11-16 15:46:38'),
(183,'hexo','快速、简洁且高效的博客框架','','https://hexo.io/zh-cn/',13,4,'2021-11-10 14:45:01','2021-11-16 16:35:21'),
(184,'Gridea',' 是一个静态博客写作客户端，帮助你更容易地构建并管理博客或任何静态站点。','','https://gridea.dev/',13,4,'2021-11-10 14:45:01','2021-11-16 16:35:29'),
(185,'awesome-bookmarks','个人收藏夹','','https://panjiachen.github.io/awesome-bookmarks/',11,4,'2021-11-10 14:45:01','2021-11-18 10:36:18'),
(186,'VueRequest','⚡️ 一个很酷的 Vue3 的请求库','','https://cn.attojs.org/',3,4,'2021-11-10 14:45:01','2021-11-16 16:34:20'),
(187,'牛客网','','','https://www.nowcoder.com/profile/8768562',17,4,'2021-11-10 14:45:01','2021-11-16 15:44:54'),
(188,'TinyPNG','','','https://tinypng.com/',18,4,'2021-11-10 14:45:01','2021-11-16 16:36:09'),
(189,'长征部落格','事 不 三 思 终 有 悔， 人 能 百 忍 自 无 忧。','','https://www.cz5h.com/',8,4,'2021-11-10 14:45:01','2021-11-16 15:44:02'),
(190,'Zidone','莫道君行早 更有早行人','','https://www.aye.ink/',8,4,'2021-11-10 14:45:01','2021-11-16 16:34:12'),
(191,'天涯社区','提供论坛、部落、博客、问答、文学、相册、个人空间等服务。拥有天涯杂谈、娱乐八卦、情感天地等人气栏目,以及关天茶舍、煮酒论史等高端人文论坛。','https://static.tianyaui.com/global/bbs/web/static/images/weixin_code.jpg','https://bbs.tianya.cn/',10,4,'2021-11-10 14:45:01','2021-11-16 15:45:07'),
(192,'胶囊日记','凌晨零点，集体失忆','http://s4.timepill.net/s/w220/topic/74toih.png','http://www.timepill.net/',10,4,'2021-11-10 14:45:01','2021-11-16 15:45:01'),
(193,'码库CTOlib','收集GitHub上的实用dotnet开源项目，并进行分类。每天都有新的库和项目添加到列表中。','https://www.ctolib.com/static/img/getqrcode.jpg','https://www.ctolib.com/',11,4,'2021-11-10 14:45:01','2021-11-17 16:55:45'),
(194,'SegmentFault','每一位开发者都在贡献和更新技术内容，共同参与社区建设，维护社区秩序。\n\n如果你和我们一样有技术理想，并愿意贡献自己的力量，欢迎加入我们。','https://cdn.segmentfault.com/r-d209f51c/static/logo-b.d865fc97.svg','https://segmentfault.com/',10,4,'2021-11-10 14:45:01','2021-11-17 16:55:37'),
(195,'LearnKu','编程者社区','https://cdn.learnku.com/uploads/images/201901/24/1/OyBnfB2vlk.png!/both/44x44','https://learnku.com/',10,4,'2021-11-10 14:45:01','2021-11-16 11:54:14'),
(196,'毒导航','网络资源','https://www.toxic.ltd/wp-content/uploads/2020/04/lang_logo.png','https://www.toxic.ltd/',11,4,'2021-11-10 14:45:01','2021-11-16 15:44:35'),
(197,'tailblocks','tailblocks','','https://tailblocks.cc/',19,4,'2021-11-10 14:45:01','2021-11-16 16:33:56'),
(198,'TailwindCSS 中文网','TailwindCSS 使用教程、TailwindCSS 中文文档及 TailwindCSS 相关资源','https://tailwindchina.com/logo.png','https://tailwindchina.com/',13,4,'2021-11-10 14:45:01','2021-11-16 15:46:22'),
(199,'vue-tailwind.com','针对 TailwindCss 优化的 Lightview 和完全可定制的 Vue 组件集','','https://www.vue-tailwind.com/',19,4,'2021-11-10 14:45:01','2021-11-16 16:34:05'),
(200,'emantic UI','用户界面就是 Web 的语言','','https://semantic-ui.com/',19,4,'2021-11-10 14:45:01','2021-11-16 15:46:31'),
(201,'be-a-professional-programmer','成为专业程序员路上用到的各种优秀资料、神器及框架','','http://tools.stanzhai.site/',13,4,'2021-11-10 14:45:01','2021-11-16 11:39:41'),
(202,'Bulma','现代化的CSS框架','Bulma是一个免费、开源的CSS框架，它提供了易于使用的前端的组件，您可以轻松地组合这些组件来构建响应式Web界面。','https://bulma.zcopy.site/',12,4,'2021-11-10 14:45:01','2021-11-16 15:44:28'),
(203,'PhotoKit','图片编辑器','https://photokit.com/images/editor.min.webp','https://photokit.com/?lang=zh',18,4,'2021-11-10 14:45:01','2021-11-16 14:15:02'),
(204,'V2EX','V2EX 是一个关于分享和探索的地方','','https://www.v2ex.com/',10,4,'2021-11-10 14:45:01','2021-11-16 15:44:16'),
(205,'screensiz','screensiz','','https://screensiz.es/phone',14,4,'2021-11-10 14:45:01','2021-11-17 16:55:28'),
(206,'Vue Router','用 Vue + Vue Router 创建单页应用非常简单：通过 Vue.js，我们已经用组件组成了我们的应用。当加入 Vue Router 时，我们需要做的就是将我们的组件映射到路由上，让 Vue Router 知道在哪里渲染它们。','https://cdn4.buysellads.net/uu/1/3386/1525189943-38523.png','https://next.router.vuejs.org/',3,4,'2021-11-10 14:45:01','2021-11-16 15:44:08'),
(207,'View UI','View UI®，即原先的 iView，是一套基于 Vue.js 的开源 UI 组件库，主要服务于 PC 界面的中后台产品。','https://file.iviewui.com/dist/7dcf5af41fac2e4728549fa7e73d61c5.svg','https://www.iviewui.com/docs/introduce',19,4,'2021-11-10 14:45:01','2021-11-16 15:42:35'),
(208,'it365万能解码器','it365万能解码器，能自动识别各种编码的文本文件，如：GB2312、Big5、UTF-8等。此解码器小巧，但是非常强悍。支持几十种编码，支持自动探测文件编码。一个web网页程序，就能解决文件乱码、编码转换等工作。','https://c10365.now.sh/zan/active.jpg','https://it365.gitlab.io/zh-cn/decode/?81206z',14,4,'2021-11-10 14:45:01','2021-11-16 14:15:09'),
(209,'果糖网net论坛','','https://www.donet5.com/HtmlTemplate2/com_files/logo.png','https://www.donet5.com/',10,4,'2021-11-10 14:45:01','2021-11-16 14:17:04'),
(210,'Vue3 One Piece','下一代web开发方式，更快，更轻，易维护，更多的原生支持','https://static.vue-js.com/6280b990-ff19-11ea-85f6-6fac77c0c9b3.png','https://vue3js.cn/',3,4,'2021-11-10 14:45:01','2021-11-16 14:14:50'),
(211,'vuepress-theme-vdoing','一款简洁高效的VuePress 知识管理&博客 主题','https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200409124835.png','https://doc.xugaoyi.com/',13,4,'2021-11-10 14:45:01','2021-11-16 15:42:27'),
(212,'TailwindCSS的漂亮扩展。','Tailwind Starter Kit是免费和开源的。它不会更改或从TailwindCSS向已添加的CSS添加任何CSS 。它具有多个HTML元素，并带有ReactJS，Vue和Angular的动态组件。','','https://www.creative-tim.com/learning-lab/tailwind-starter-kit/presentation',19,4,'2021-11-10 14:45:01','2021-11-16 11:57:06'),
(213,'创造者日报','一群创造者','','https://creatorsdaily.com/',10,4,'2021-11-10 14:45:01','2021-11-16 14:13:23'),
(214,'唧唧','','','https://www.jijidown.com/',8,4,'2021-11-10 14:45:01','2021-11-16 14:14:34'),
(215,'OpenJudge','OpenJudge是开放的在线程序评测系统','','http://openjudge.cn/',14,4,'2021-11-10 14:45:01','2021-11-16 14:13:18'),
(216,'levy','','','http://book.levy.net.cn/',2,4,'2021-11-10 14:45:01','2021-11-10 14:45:13'),
(217,'万有导航','','','http://wanyouw.com/',11,4,'2021-11-10 14:45:01','2021-11-16 14:13:05'),
(218,'极客阅读','','','https://jikeyuedu.cn/topic/Vue.js',10,4,'2021-11-10 14:45:01','2021-11-16 14:12:59'),
(219,'鱼塘热榜','','','https://mo.fish/',10,4,'2021-11-10 14:45:01','2021-11-16 14:12:52'),
(220,'老张的哲学','','','https://www.cnblogs.com/laozhang-is-phi/',8,4,'2021-11-10 14:45:01','2021-11-16 11:55:03'),
(221,'软件盒子','','','https://www.bsc1011.top/',11,4,'2021-11-10 14:45:01','2021-11-16 14:12:47'),
(222,'编程导航','站长是腾讯全栈开发 & 腾讯云开发高级布道师，欢迎关注他的  微信公众号【程序员鱼皮】，或添加  微信 liyupi66  交流学习 ','','https://www.code-nav.cn/recommend',11,4,'2021-11-10 14:45:01','2021-11-16 14:12:39'),
(223,'手把手教你AspNetCore WebApi：数据验证','小明最近又遇到麻烦了，小红希望对接接口传送的数据进行验证，既然是小红要求，那小明说什么都得满足呀，这还不简单嘛。','','https://www.cnblogs.com/zcqiand/p/13795675.html',15,4,'2021-11-10 14:45:01','2021-11-16 14:12:33'),
(224,'缓存（MemoryCache和Redis）','这几天小明又有烦恼了，系统上线一段时间后，系统性能出现了问题，马老板很生气，叫小明一定要解决这个问题。性能问题一般用什么来解决呢？小明第一时间想到了缓存。','','https://www.cnblogs.com/zcqiand/p/13816732.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:55:11'),
(225,'Autofac一个优秀的.NET IoC框架','Autofac与C#语言的结合非常紧密，并学习它非常的简单，也是.NET领域最为流行的IoC框架之一。','','https://www.cnblogs.com/zcqiand/p/14257650.html',15,4,'2021-11-10 14:45:01','2021-11-16 14:12:27'),
(226,'.net Core 使用AutoMapper','在我们的项目中慢慢的要把数据库的实体模型和视图模型进行分离，防止被人拿到我们表字段。在学校的时候自己只是有将很多数据库模型，写成一个视图模型返回到前台。','','https://www.cnblogs.com/chenxi001/p/11800943.html',15,4,'2021-11-10 14:45:01','2021-11-16 14:12:21'),
(227,'Autofac 框架初识与应用','AutoFac是一个开源的轻量级的依赖注入容器，也是.net下比较流行的实现依赖注入的工具之一。','','https://www.cnblogs.com/i3yuan/archive/2021/04/13/14654547.html',15,4,'2021-11-10 14:45:01','2021-11-16 14:12:15'),
(228,'Vue项目中实现用户登录及token验证','','','https://www.cnblogs.com/web-record/p/9876916.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:56:52'),
(229,'asp.net core 批量依赖注入服务','看园子里netcore的文章都是简单的注入几个服务的例子,在项目中肯定不会一行一行的写注册服务的代码，参考网上，找到一些解决方案，根据自己实际需求进行更改，特记录下来。','','https://www.cnblogs.com/5jia0/archive/2021/04/14/14658642.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:56:46'),
(230,'张鑫旭的个人主页','张鑫旭-鑫空间-鑫生活','','https://www.zhangxinxu.com/',8,4,'2021-11-10 14:45:01','2021-11-16 11:56:41'),
(231,'colorui文档','','','https://www.kancloud.cn/m22543/colorui/1289223',13,4,'2021-11-10 14:45:01','2021-11-16 11:56:35'),
(232,'lucky-canvas','一个基于 Js + Canvas 的【大转盘 & 九宫格】抽奖，致力于为 web 前端提供一个功能强大且专业可靠的组件，只需要通过简单配置即可实现自由化定制，帮助你快速的完成产品需求','','https://100px.net/',24,4,'2021-11-10 14:45:01','2021-11-16 11:56:30'),
(233,'[C#] NAudio 库的各种常见使用方式: 播放 录制 转码 音频可视化','在 NAudio 中, 常用类型有 WaveIn, WaveOut, WaveStream, WaveFileWriter, WaveFileReader, AudioFileReader 以及接口: IWaveProvider, ISampleProvider, IWaveIn, IWavePlayer','','https://www.cnblogs.com/slimenull/p/14735111.html',4,4,'2021-11-10 14:45:01','2021-11-16 11:56:24'),
(234,'.NET之生成数据库全流程','本文主要是回顾下从项目创建到生成数据到数据库(代码优先)的全部过程。采用EFCore作为ORM框架。','','https://www.cnblogs.com/azrng/p/14757769.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:56:16'),
(235,'24K导航','','','https://www.24kdh.com/',11,4,'2021-11-10 14:45:01','2021-11-16 11:54:52'),
(236,'印记中文','','','https://docschina.org/',11,4,'2021-11-10 14:45:01','2021-11-16 11:54:47'),
(237,'NuxtJS ','NuxtJS 让你构建你的下一个 Vue.js 应用程序变得更有信心。这是一个 开源 的框架，让 web 开发变得简单而强大','','https://www.nuxtjs.cn/',3,4,'2021-11-10 14:45:01','2021-11-16 11:54:41'),
(238,'Tailwind CSS文档','开始 Tailwind CSS 之旅\n用最适合您的方式学习 Tailwind','','https://www.tailwindcss.cn/docs',13,4,'2021-11-10 14:45:01','2021-11-16 11:54:36'),
(239,'outils 代码库','','','https://www.npmjs.com/package/outils',11,4,'2021-11-10 14:45:01','2021-11-16 11:54:31'),
(240,'30 seconds of code ','代码片段','','https://www.30secondsofcode.org/',5,4,'2021-11-10 14:45:01','2021-11-16 11:54:24'),
(243,'Pagination.js','分页控件','','http://pagination.js.org/',24,4,'2021-11-10 14:45:01','2021-11-16 11:54:03'),
(244,'Lodash 中文文档','Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库。','','https://www.lodashjs.com/',5,4,'2021-11-10 14:45:01','2021-11-16 11:53:57'),
(245,'微信SDK微信SDK','','','https://sdk.weixin.senparc.com/Document',4,4,'2021-11-10 14:45:01','2021-11-16 11:53:52'),
(246,'VUE API 手册','','','https://vue3js.cn/vue-composition-api/',3,4,'2021-11-10 14:45:01','2021-11-16 11:53:47'),
(247,'极客导航','','','https://geekdocs.cn/',11,4,'2021-11-10 14:45:01','2021-11-16 11:47:47'),
(248,'.NET 官方文档','了解如何使用 .NET 在任何使用 C#、F# 和 Visual Basic 的平台上创建应用程序。 浏览 API 引用、代码示例、教程以及其他内容。','','https://docs.microsoft.com/zh-cn/dotnet/',4,4,'2021-11-10 14:45:01','2021-11-16 11:53:42'),
(249,'开源前哨','分享热门、有趣和实用的开源项目～','','https://www.zhihu.com/column/c_1317124962785062912',11,4,'2021-11-10 14:45:01','2021-11-16 11:53:35'),
(250,'DotNet 资源大全中文版','DotNet 资源大全中文版，内容包括：编译器、压缩、应用框架、应用模板、加密、数据库、反编译、IDE、日志、风格指南等。','','https://github.com/jobbole/awesome-dotnet-cn#api',11,4,'2021-11-10 14:45:01','2021-11-16 11:53:29'),
(251,'C#/.NET/.NET Core学习视频汇总（持续更新ing）','之前有很多小伙伴在我的公众号后台留言问有没有C#/.NET/.NET Core这方面相关的视频推荐，我一般都会推荐他们去B站搜索一下。今天刚好有空收集了网上一些比较好的C#/.NET/.NET Core这方面的学习视频，希望能够帮助到有需要的小伙伴们。当然假如你有更好的资源视频推荐可以在我的文章下面留言，开篇之前我要感谢各位小伙伴对【C#/.NET/.NET Core学习、工作、面试指南','','https://www.cnblogs.com/Can-daydayup/p/15046838.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:52:38'),
(256,'MYSQL中数据类型介绍','MySQL的数据类型','1','https://www.cnblogs.com/-xlp/p/8617760.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:53:17'),
(287,'LBO.net','保持饥饿！保持愚蠢！ ->C#在线编辑','','https://www.cnblogs.com/lbonet/',8,4,'2021-11-10 14:45:01','2021-11-16 11:44:54'),
(288,'牛客网','求职之前，先上牛客','','https://www.nowcoder.com/',17,4,'2021-11-10 14:45:01','2021-11-16 11:47:36'),
(289,'GitHub Profile README Generator','简历生成','','https://rahuldkjain.github.io/gh-profile-readme-generator/',14,4,'2021-11-10 14:45:01','2021-11-16 11:53:11'),
(290,'vue3最新学习资料集合，不断更新','vue3最新学习资料集合，不断更新','','https://learnku.com/articles/48928',3,4,'2021-11-10 14:45:01','2021-11-16 11:53:05'),
(291,'daisyUI','Tailwind CSS Components','https://daisyui.com/','https://daisyui.com/',19,4,'2021-11-10 14:45:01','2021-11-16 11:30:17'),
(292,'wangEditorV4','wangEditorV4\nTypescript 开发的 Web 富文本编辑器， 轻量、简洁、易用、开源免费','','https://www.wangeditor.com/',20,4,'2021-11-10 14:45:01','2021-11-16 11:52:58'),
(293,'最好的uniapp入门实战教程','uniapp是Dcloud公司的产品，是一个跨端开发框架，基于vue.js技术栈。开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。这是它的功能架构图','','https://juejin.cn/post/6899642866693423111#heading-16',15,4,'2021-11-10 14:45:01','2021-11-16 11:47:55'),
(294,'EFCore之详细增删改查','EFCore之详细增删改查','','https://juejin.cn/post/6965727147189075976#heading-31',15,4,'2021-11-10 14:45:01','2021-11-16 11:52:53'),
(295,'NET Core和Blog.Core【老张的哲学】','NET Core和Blog.Core【老张的哲学】','','https://www.yuque.com/docs/share/c58f37a4-677c-4a08-b240-4f7f4088a63b#dlCt7',15,4,'2021-11-10 14:45:01','2021-11-16 11:52:46'),
(296,'Vue3+Vite工程常用工具的接入方法','Vue3+Vite工程常用工具的接入方法','','https://juejin.cn/post/6982476410279460878',15,4,'2021-11-10 14:45:01','2021-11-16 11:48:02'),
(297,'Uni-App从入门到实战-黑马程序员杭州校区出品','Uni-App从入门到实战-黑马程序员杭州校区出品','','https://www.bilibili.com/video/BV1BJ411W7pX?p=40',15,4,'2021-11-10 14:45:01','2021-11-16 11:45:02'),
(298,'dotNet全栈开发','dotNet全栈开发\n.NET Core\\xamarin爱好者、篮球狂热爱好者https://dwz.cn/ppnuFzrZ','','https://blog.csdn.net/kebi007',8,4,'2021-11-10 14:45:01','2021-11-16 11:39:27'),
(299,'什么是 Docker','Docker 最初是 dotCloud 公司创始人 Solomon Hykes (opens new window)在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源 (opens new window)，主要项目代码在 GitHub (opens new window)上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI） (opens new window)。','','https://vuepress.mirror.docker-practice.com/',23,4,'2021-11-10 14:45:01','2021-11-15 14:30:37'),
(300,'编程之家','','','https://www.jb51.cc/netcore/index_2.html',11,4,'2021-11-10 14:45:01','2021-11-16 11:39:18'),
(303,'宝塔','','','http://129.204.92.64:8888/6904e070/',14,4,'2021-11-10 14:45:01','2021-11-16 11:39:10'),
(304,'.NetCore中EFCore的使用整理','EntirtyFramework框架是一个轻量级的可扩展版本的流行实体框架数据访问技术.\n\n其中的.NetCore版本对应EntityFrameworkCore','','https://www.cnblogs.com/tianma3798/p/6835400.html',4,4,'2021-11-10 14:45:01','2021-11-16 11:39:00'),
(305,'【EFCORE笔记】添加数据的多种方案','','','https://www.cnblogs.com/lbonet/p/14599549.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:38:54'),
(306,'ES6 入门教程','《ECMAScript 6 入门教程》是一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新引入的语法特性。','','https://es6.ruanyifeng.com/',15,4,'2021-11-10 14:45:01','2021-11-16 11:38:48'),
(307,'图文','','','https://pixabay.com/',18,4,'2021-11-10 14:45:01','2021-11-16 11:38:41'),
(308,'免费个人图床搭建gitee+PicGo','','','https://www.cnblogs.com/jiba/p/15147616.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:38:35'),
(309,'Moment.js','JavaScript 日期处理类库','','http://momentjs.cn/',5,4,'2021-11-10 14:45:01','2021-11-16 11:38:29'),
(311,'泽泽社长','','','https://zezeshe.com/',8,4,'2021-11-10 14:45:01','2021-11-16 11:29:47'),
(312,'逗比表情包','','','https://www.dbbqb.com/',7,4,'2021-11-10 14:45:01','2021-11-16 11:29:41'),
(313,'两个BT','','','https://www.bttwo.com/',7,4,'2021-11-10 14:45:01','2021-11-16 11:29:36'),
(314,'电影蜜蜂','','','https://www.idybee.com/',7,4,'2021-11-10 14:45:01','2021-11-16 11:29:31'),
(315,'人人影视','','','https://yyets.dmesg.app/home',7,4,'2021-11-10 14:45:01','2021-11-16 11:29:26'),
(316,'努努影视','','','https://www.nunuyy.cc/',7,4,'2021-11-10 14:45:01','2021-11-16 11:29:20'),
(317,'人人美剧','','','https://www.meiju11.com/',7,4,'2021-11-10 14:45:01','2021-11-16 11:29:09'),
(318,'pianku','','','https://www.pianku.li/',7,4,'2021-11-10 14:45:01','2021-11-16 11:29:16'),
(319,'换脸','','','https://myvoiceyourface.com/',14,4,'2021-11-10 14:45:01','2021-11-16 11:28:57'),
(320,'ECMAScript 6 入门','《ECMAScript 6 入门教程》是一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新引入的语法特性。','','https://es6.ruanyifeng.com/',5,4,'2021-11-10 14:45:01','2021-11-16 11:28:42'),
(321,'Windi CSS','下一代工具类 CSS 框架','','https://cn.windicss.org/',19,4,'2021-11-10 14:45:01','2021-11-16 11:28:37'),
(322,'wow.js','滚动时显示动画。非常Animate.css朋友 :-)\n轻松自定义动画设置：样式、延迟、长度、偏移、迭代...','https://www.delac.io/WOW/img/wow-logo.jpg','https://www.delac.io/WOW/',5,4,'2021-11-10 14:45:01','2021-11-16 11:28:27'),
(323,'.Net Core + DDD基础分层 + 项目基本框架 + 个人总结','','','https://www.cnblogs.com/shijiehaiyang/p/14918544.html',4,4,'2021-11-10 14:45:01','2021-11-16 11:28:21'),
(324,'一文梳理CSS必会知识点','','','https://juejin.cn/post/6854573212337078285',9,4,'2021-11-10 14:45:01','2021-11-16 11:28:15'),
(325,'30个你必须熟记的CSS选择器','','','https://code.tutsplus.com/zh-hans/tutorials/the-30-css-selectors-you-must-memorize--net-16048',9,4,'2021-11-10 14:45:01','2021-11-16 11:28:09'),
(326,'深入理解 TypeScript','','','https://jkchao.github.io/typescript-book-chinese/#why',15,4,'2021-11-10 14:45:01','2021-11-16 11:28:03'),
(327,'Vue Patterns CN','有用的Vue模式，技巧，提示和技巧以及有帮助的精选链接。','','https://zyszys.github.io/vue-patterns-cn/',3,4,'2021-11-10 14:45:01','2021-11-16 11:27:57'),
(328,'代码整洁的 JavaScript','','','https://github.com/beginor/clean-code-javascript',5,4,'2021-11-10 14:45:01','2021-11-15 14:33:46'),
(329,'JavaScript 风格指南','','','https://github.com/alivebao/clean-code-js',5,4,'2021-11-10 14:45:01','2021-11-16 11:27:49'),
(330,'typescript基础史上最强学习文章','','','https://juejin.cn/post/7018805943710253086',15,4,'2021-11-10 14:45:01','2021-11-16 11:27:41'),
(331,'CSS Icons','Open-source CSS, SVG and Figma UI Icons\nAvailable in SVG Sprite, styled-components, NPM & API','','https://css.gg/',9,4,'2021-11-10 14:45:01','2021-11-15 14:33:06'),
(332,'发现导航','','','https://www.nav3.cn/#/light',11,4,'2021-11-10 14:45:01','2021-11-15 14:32:33'),
(333,'50个Vue知识点','','','https://juejin.cn/post/6984210440276410399#heading-21',15,4,'2021-11-10 14:45:01','2021-11-16 11:27:19'),
(334,'daisyUI','Tailwind CSS Components','','https://daisyui.com/',19,4,'2021-11-10 14:45:01','2021-11-16 11:27:11'),
(335,'Vue风格指南','这里是官方的 Vue 特有代码的风格指南。如果在工程中使用 Vue，为了回避错误、小纠结和反模式，该指南是份不错的参考。不过我们也不确信风格指南的所有内容对于所有的团队或工程都是理想的。所以根据过去的经验、周围的技术栈、个人价值观做出有意义的偏差是可取的。','','https://cn.vuejs.org/v2/style-guide/index.html',3,4,'2021-11-10 14:45:01','2021-11-15 14:32:25'),
(336,'SqlSugar','','','https://www.donet5.com/',4,4,'2021-11-10 14:45:01','2021-11-16 11:25:17'),
(337,'使用 FluentValidation 实现数据校验、验重','','','https://www.cnblogs.com/zl33842902/p/13514929.html',15,4,'2021-11-10 14:45:01','2021-11-16 11:25:02'),
(338,'c# asp.net core 3.1 自动注入','','','https://www.cnblogs.com/Byboys/p/13744481.html',15,4,'2021-11-10 14:45:01','2021-11-15 14:32:49'),
(339,'.Net Core3.1下Autofac的使用','','','https://blog.csdn.net/sammy520/article/details/114417432',15,4,'2021-11-10 14:45:01','2021-11-15 14:31:12'),
(340,'获取windows 操作系统下的硬件或操作系统信息等','','','https://www.cnblogs.com/pilgrim/p/15115782.html',15,4,'2021-11-10 14:45:01','2021-11-15 14:32:56'),
(341,'pixabay','Stunning free images & royalty free stock','','https://pixabay.com/',18,4,'2021-11-10 14:45:01','2021-11-16 11:20:08'),
(342,'学会这几招,轻松让你的github脱颖而出','','','https://juejin.cn/post/6997070653010477087',15,4,'2021-11-10 14:45:01','2021-11-15 14:32:18'),
(343,'使用模板生成网页/Pdf/Word/Png/Html的简历','','','https://github.com/liangjingkanji/Resume-Template',14,4,'2021-11-10 14:45:01','2021-11-15 14:32:41'),
(344,'ASP.NET Core定时之Quartz.NET使用','Quartz.NET 是一个功能齐全的开源作业调度系统，可用于从最小的应用程序到大型企业系统。\n\nQuartz.NET是纯净的，它是一个.Net程序集，是非常流行的Java作业调度系统Quartz的C#实现。','','https://www.cnblogs.com/LaoPaoEr/p/15129899.html',15,4,'2021-11-10 14:45:01','2021-11-15 14:33:37'),
(345,'C# 实现发送QQ邮箱功能','','','https://www.cnblogs.com/2002-YiZhiYu/p/15118080.html',15,4,'2021-11-10 14:45:01','2021-11-15 14:32:04'),
(346,'.Net Core5.0中Autofac依赖注入整合多层，项目中可直接用','','','https://www.cnblogs.com/wei325/p/15121451.html#autoid-3-0-0',15,4,'2021-11-10 14:45:01','2021-11-15 14:32:12'),
(347,'Fantastic-admin','一款开箱即用的 Vue 中后台管理系统框架','','https://hooray.gitee.io/fantastic-admin/',19,4,'2021-11-10 14:45:01','2021-11-15 14:31:04'),
(348,'vue-element-admin','A magical vue admin','','https://panjiachen.gitee.io/vue-element-admin-site/zh/',19,4,'2021-11-10 14:45:01','2021-11-15 14:31:55'),
(349,'wallhaven','','','https://wallhaven.cc/',18,4,'2021-11-10 14:45:01','2021-11-16 11:19:39'),
(350,'基于vue3实现的vue3-seamless-scroll无缝滚动','','','https://juejin.cn/post/7001831268811800584',24,4,'2021-11-10 14:45:01','2021-11-15 14:30:03'),
(351,'在vite2和Vue3中配置Mockjs _','','','https://www.cnblogs.com/wdyyy/p/mockjs_vite2.html',15,4,'2021-11-10 14:45:01','2021-11-15 14:31:46'),
(352,'Vue 3.0 训练营','','','https://vue3.github.io/vue3-News/',3,4,'2021-11-10 14:45:01','2021-11-15 14:29:50'),
(353,'宝塔','','','http://129.204.92.64:8888/6904e070/',14,4,'2021-11-10 14:45:01','2021-11-15 14:29:39'),
(354,'Quasar ','','','https://quasar.dev/start/pick-quasar-flavour',19,4,'2021-11-10 14:45:01','2021-11-15 14:29:57'),
(355,'jstips','','','https://www.jstips.co/zh_CN/javascript/',5,4,'2021-11-10 14:45:01','2021-11-15 14:29:33'),
(356,'Pinia','状态管理','','https://pinia.esm.dev/',3,4,'2021-11-10 14:45:01','2021-11-15 14:29:25'),
(357,'Vue-H5-Template','使用 Vue3.0+Typescript+Vant 搭建 h5 开发基础模板，并提供通用型的解决方案。','','https://docs.xwhx.top/',15,4,'2021-11-10 14:45:01','2021-11-15 14:29:20'),
(358,'片段生成器','','','https://snippet-generator.app/',14,4,'2021-11-10 14:45:01','2021-11-15 14:29:10'),
(359,'Vben Admin ','一个开箱即用的前端框架','','https://vvbin.cn/doc-next/',19,4,'2021-11-10 14:45:01','2021-11-15 14:29:02'),
(360,'Vue-Mastery学习笔记','','','https://www.yuque.com/nxtt7g/kompdt',15,4,'2021-11-10 14:45:01','2021-11-15 14:28:56'),
(361,'u.tools','新一代效率工具平台\n自由组合丰富插件，打造随手可取的终极神器','','https://u.tools/',14,4,'2021-11-10 14:45:01','2021-11-15 14:28:49'),
(362,'VARLET','面向Vue3的Material风格移动端组件库','','https://varlet.gitee.io/varlet-ui/#/zh-CN/home',19,4,'2021-11-10 14:45:01','2021-11-15 14:28:42'),
(363,'devhints.io','Rico''s cheatsheets','','https://devhints.io/',13,4,'2021-11-10 14:45:01','2021-11-16 11:18:39'),
(364,'TypeScript 4.0 使用手册','TypeScript语言用于大规模应用的JavaScript开发。 ✔️ TypeScript支持类型，是JavaScript的超集且可以编译成纯JavaScript代码。 ✔️ TypeScript兼容所有浏览器，所有宿主环境，所有操作系统。 ✔️ TypeScript是开源的。','','https://www.bookstack.cn/read/TypeScript-4.0-zh/README.md',13,4,'2021-11-10 14:45:01','2021-11-15 14:28:31'),
(365,'Apifox 使用文档','API 文档、API 调试、API Mock、API 自动化测试一体化协作平台，定位 Postman + Swagger + Mock + JMeter。通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好 API 文档，API 调试、API 数据 Mock、API 自动化测试就可以直接使用，无需再次定义；API 文档和 API 开发调试使用同一个工具，API 调试完成后即可保证和 API 文档定义完全一致。高效、及时、准确！','','https://www.apifox.cn/help/',14,4,'2021-11-10 14:45:01','2021-11-15 14:28:26'),
(366,'Snipaste','Snipaste 不只是截图，善用贴图功能将帮助你提升工作效率','','https://docs.snipaste.com/zh-cn/',14,4,'2021-11-10 14:45:01','2021-11-15 14:28:20'),
(367,'【TypeScript】- 一篇够用的TS总结','','','https://alexwjj.github.io/pages/cf42a74e3cc8f/',15,4,'2021-11-10 14:45:01','2021-11-15 14:28:12'),
(368,'柠檬大师的空间站','97程序员一枚，软件工程专业，现居北京，喜欢捣腾，专攻后端，用其他技术打辅助','https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg','https://leidl.top/',8,4,'2021-11-10 14:45:01','2021-11-15 14:21:59'),
(369,'Loader Gallery','customize and make your own unique loader!','','https://loading.io/spinner/',9,4,'2021-11-10 14:45:01','2021-11-15 14:28:06'),
(370,'程序员导航','','','https://cxy521.com/',11,4,'2021-11-10 14:45:01','2021-11-15 14:17:29'),
(371,'Live Demo','','','https://theoxiong.github.io/vue-search-panel/',24,4,'2021-11-10 14:45:01','2021-11-15 14:17:17'),
(372,'书栈网','','','https://www.bookstack.cn/',10,4,'2021-11-10 14:45:01','2021-11-15 14:16:44'),
(373,'axios','易用、简洁且高效的http库','','http://www.axios-js.com/zh-cn/',3,4,'2021-11-10 14:45:01','2021-11-15 14:16:33'),
(374,'jQuery','','','http://hemin.cn/jq/',19,4,'2021-11-10 14:45:01','2021-11-15 14:16:27'),
(375,'Linux命令大全(手册)','准确，丰富，稳定，在技术之路上为您护航！','','https://www.linuxcool.com/',15,4,'2021-11-10 14:45:01','2021-11-15 14:16:16'),
(376,'JavaScript中的这些骚操作，你都知道吗？','','','https://juejin.cn/post/7007306019307175966',15,4,'2021-11-10 14:45:01','2021-11-15 14:16:10'),
(377,'分享32个JavaScript工作中常用的代码片段','整理一下工作中常用的JavaScript小技巧分享给大家，希望能帮助到各位小伙伴们，在工作中提升开发效率。','','https://segmentfault.com/a/1190000040637925',15,4,'2021-11-10 14:45:01','2021-11-15 14:15:58'),
(378,'Vue3的7种和Vue2的12种组件通信','','','https://juejin.cn/post/6999687348120190983',15,4,'2021-11-10 14:45:01','2021-11-15 14:14:53'),
(379,'v-md-editor','v-md-editor 是基于 Vue 开发的 markdown 编辑器组件','','https://ckang1229.gitee.io/vue-markdown-editor/zh/#%E4%BB%8B%E7%BB%8D',20,4,'2021-11-10 14:45:01','2021-11-15 14:14:18'),
(384,'前端“技师”们强推的效率开发工具汇总','各位程序员“技师”提供的小技巧的汇总。将我们平常累计的一些开发技巧分享给大家，希望能对大家有所帮助','图片链接','https://juejin.cn/post/7021320464836329502#heading-3',15,4,'2021-11-10 14:45:01','2021-11-15 14:14:10'),
(385,'Windows 快捷操作大全','快捷键只介绍能让你成为开发大佬的，类似 Ctrl+C、Ctrl+V 这种大家熟知的，一概省略，咱们只来干货。','....','https://juejin.cn/post/7020574670097219621',15,4,'2021-11-10 14:45:01','2021-11-15 14:14:00'),
(386,'一文让你30分钟快速掌握Vue3','经过了漫长的迭代，Vue 3.0 终于在上 2020-09-18 发布了，带了翻天覆地的变化，使用了 Typescript 进行了大规模的重构，带来了 Composition API RFC 版本，类似 React Hook 一样的写 Vue，可以自定义自己的 hook ，让使用者更加的灵活，接下来总结一下 vue 3.0 带来的部分新特性。','图片链接','https://mp.weixin.qq.com/s/1orWGlOXT2Wn2pJLK6VAIg',15,4,'2021-11-10 14:45:01','2021-11-15 14:13:52'),
(387,'前端进阶之道','针对前端的知识难点进行细致入微的讲解，让你的进阶之路不再崎岖！','图片链接','https://yuchengkai.cn/',15,4,'2021-11-10 14:45:01','2021-11-15 14:13:46'),
(388,'Web 控制台终极指南','一旦掌握了控制台，它将帮助我们更有条理、更快地调试并了解应用程序中发生的一切。所以我会试着用例子总结你需要知道的所有内容','图片链接','https://segmentfault.com/a/1190000040705234',15,4,'2021-11-10 14:45:01','2021-11-15 14:13:36'),
(389,'JSRUN.NET','用代码说话,一惯的风格','图片链接','http://jsrun.net/t',13,4,'2021-11-10 14:45:01','2021-11-15 14:13:27'),
(390,'vue-manage-system','','图片链接','https://github.com/lin-xin/vue-manage-system',24,4,'2021-11-10 14:45:01','2021-11-15 14:13:09'),
(391,'微信Markdown','导航简述','图片链接','https://doocs.gitee.io/md/#/',20,4,'2021-11-10 14:45:01','2021-12-15 15:00:07'),
(392,'cssreference.io','免费的 CSS 视觉指南 通过示例学习：cssreference.io是一个免费的 CSS 视觉指南。它以最流行的属性为特色，并通过插图和动画示例对其进行了解释。','图片链接','https://cssreference.io/',9,4,'2021-11-10 14:45:01','2021-11-15 14:12:53'),
(393,'css-tricks.com','可以包含（在另一个特定 HTML 元素中的特定 HTML 元素）','图片链接','https://css-tricks.com/',9,4,'2021-11-10 14:45:01','2021-11-15 14:12:47'),
(400,'color-ui','简述','图片链接','https://www.color-ui.com/',19,4,'2021-11-10 14:45:01','2021-11-15 14:12:39'),
(402,'codemyui','简述','图片链接','https://codemyui.com/',9,4,'2021-11-10 14:45:01','2021-11-15 14:12:32'),
(403,'学习CSS布局','本站教授的是现在广泛使用于网站布局领域的CSS基础。  我们假设你已经掌握了CSS的选择器、属性和值。并且你可能已经对布局有一定了解，即使亲自去写的话还是会很苦恼。如果你想要从头开始学习HTML和CSS，那么你可以看下这篇教程。不然的话，让我们看看我们是否可以让你在下一个项目少一些烦恼。','图片链接','https://zh.learnlayout.com/',9,4,'2021-11-10 14:45:01','2021-11-15 14:11:34'),
(410,'CSShake','一些 CSS 类 移动你的 DOM！','图片链接','https://elrumordelaluz.github.io/csshake/',9,4,'2021-11-10 14:45:01','2021-11-15 14:11:28'),
(411,'Nuxt3','使用 Vue 3 构建您的下一个应用程序，体验混合渲染、强大的数据获取和新功能。Nuxt 3 是一个开源框架，使 Web 开发变得简单而强大。','图片链接','https://v3.nuxtjs.org/',3,4,'2021-11-10 14:45:01','2021-11-15 14:11:21'),
(412,'Day.js中文网','Day.js是一个极简的JavaScript库，可以为现代浏览器解析、验证、操作和显示日期和时间。','图片链接','https://dayjs.fenxianglu.cn/',5,4,'2021-11-10 14:45:01','2021-11-15 10:17:04'),
(413,'fenxianglu','','图片链接','https://www.fenxianglu.cn/',13,4,'2021-11-10 14:45:01','2021-11-15 10:16:57'),
(414,'Vuex','Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。','图片链接','https://next.vuex.vuejs.org/zh/',3,4,'2021-11-10 14:45:01','2021-11-15 10:16:37'),
(415,'Vue I18n','Vue I18n 是 Vue.js 的国际化插件','图片链接','https://kazupon.github.io/vue-i18n/zh/',24,4,'2021-11-10 14:45:01','2021-11-15 10:16:30'),
(416,'Material Design 框架','Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。 不需要任何设计技能 — 创建叹为观止的应用程序所需的一切都触手可及。','图片链接','https://vuetifyjs.com/zh-Hans/',19,4,'2021-11-10 14:45:01','2021-11-15 10:16:23'),
(417,'Typora+picGo+Gitee搭建图床','Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。 不需要任何设计技能 — 创建叹为观止的应用程序所需的一切都触手可及。','图片链接','https://juejin.cn/post/7011762633691168805',15,4,'2021-11-10 14:45:01','2021-11-15 10:16:14'),
(418,'Axios的封装思想及实践（TS版本）','','图片链接','https://juejin.cn/post/7023006049732919309',15,4,'2021-11-10 14:45:01','2021-11-15 10:16:09'),
(419,'wangEditor','开源 Web 富文本编辑器，开箱即用，配置简单  快速上手demo 演示 ','图片链接','https://juejin.cn/post/7023006049732919309',24,4,'2021-11-10 14:45:01','2021-11-15 10:16:01'),
(420,'Fect UI -Vue','@fect-ui/vue是根据 Geist-ui/vue作为设计依赖对 vue2 版本进行升级的一个Vue3UI 库。项目基于typescript,拥有更完备的类型提示和对编译器的友好支持, 相较 vue2 版本组件库进行了交互的优化。','图片链接','https://vue.miaya.art/Introduce',19,4,'2021-11-10 14:45:01','2021-11-15 10:15:53'),
(421,'CSS Layout','使用 CSS 制作的流行布局和图案','img','https://csslayout.io/',9,4,'2021-11-10 14:45:01','2021-11-15 10:13:01'),
(422,'vue3-progress','进度条','图片链接','https://vue3-progress-demo.netlify.app/',24,4,'2021-11-10 14:45:01','2021-11-11 16:31:09'),
(423,'webPack转vite所遇到的问题','','img','https://blog.csdn.net/WH_Crx/article/details/118106097',15,4,'2021-11-10 14:45:01','2021-11-15 10:12:49'),
(424,'mind-map','vue 图文','图片链接','https://github.com/jCodeLife/mind-map/',24,4,'2021-11-10 14:45:01','2021-11-15 10:12:41'),
(425,'最优 图像优化','在文件尺寸和质量之间选择完美平衡，并且可获取完整在线预览。  您的图像从不会离开您的浏览器。','图片链接','https://zh.recompressor.com/',14,4,'2021-11-10 14:45:01','2021-11-15 10:12:33'),
(426,'Vue Trend','Vue.js Live Demo 的简单、优雅的火花线','img','https://cinwell.com/vue-trend/',24,4,'2021-11-10 14:45:01','2021-11-15 10:12:26'),
(427,'极客猿导航','导航','图片链接','https://nav.geekape.net/',11,4,'2021-11-10 14:45:01','2021-11-11 16:29:35'),
(428,'vue-fullscreen','一个用于将任意页面元素进行全屏切换的vue组件，基于 screenfull.js','图片链接','https://mirari.cc/2017/08/14/%E5%85%A8%E5%B1%8F%E5%88%87%E6%8D%A2%E7%BB%84%E4%BB%B6vue-fullscreen/',24,4,'2021-11-10 14:45:01','2021-11-15 10:12:14'),
(429,'CodePen','CodePen 是一个面向前端设计人员和开发人员的社交开发环境。构建和部署网站，展示您的工作，构建测试用例以学习和调试，并寻找灵感。','图片链接','https://codepen.io/',9,4,'2021-11-10 14:45:01','2021-11-15 10:12:06'),
(430,'GKA','简单的、高效的帧动画生成工具.  使用简单(仅需一行命令) 内置多种图片优化 多类生成模板，支持定制','图片链接','https://gka.js.org/#/',24,4,'2021-11-10 14:45:01','2021-11-15 10:11:54'),
(431,'Sonar','\"Sonar一个Web系统，展现了静态代码扫描的结果，结果是可以自定义的 ,支持多种语言的原理是它的扩展性 \"','图片链接','http://www.sonar.org.cn/',14,4,'2021-11-10 14:45:01','2021-11-15 10:11:18'),
(432,'highcharts','数据可视化','图片链接','http://www.sonar.org.cn/',5,4,'2021-11-10 14:45:01','2021-11-11 16:29:50'),
(433,'chartjs','图表','图片链接','https://www.chartjs.org/',5,4,'2021-11-10 14:45:01','2021-11-11 16:30:31'),
(434,'Apache ECharts','一个基于 JavaScript 的开源可视化图表库','img','https://echarts.apache.org/zh/index.html',5,4,'2021-11-10 14:45:01','2021-11-15 10:10:53'),
(435,'JavaScript Promise迷你书','本书的目的是以目前还在制定中的ECMAScript 6 Promises规范为中心，着重向各位读者介绍JavaScript中对Promise相关技术的支持情况。','img','http://liubin.org/promises-book/#introduction',13,4,'2021-11-10 14:45:01','2021-11-15 10:10:39'),
(436,'EJS','嵌入式 JavaScript 模板。','img','https://ejs.co/#promo',5,4,'2021-11-10 14:45:01','2021-11-15 10:10:14'),
(437,'Redux 中文官网','JS 应用的状态容器，提供可预测的状态管理','图片链接','https://cn.redux.js.org/',5,4,'2021-11-10 14:45:01','2021-11-11 16:30:56'),
(438,'LOCALFORAGE','localForage 是一个 JavaScript 库，通过简单类似 localStorage API 的异步存储来改进你的 Web 应用程序的离线体验。它能存储多种类型的数据，而不仅仅是字符串。','图片链接','https://localforage.docschina.org/#api-getitem',5,4,'2021-11-10 14:45:01','2021-11-11 16:37:43'),
(439,'v-charts','在使用 echarts 生成图表时，经常需要做繁琐的数据类型转化、修改复杂的配置项，v-charts 的出现正是为了解决这个痛点。基于 Vue2.0 和 echarts 封装的 v-charts 图表组件，只需要统一提供一种对前后端都友好的数据格式设置简单的配置项，便可轻松生成常见的图表。','图片链接','https://v-charts.js.org/#/',24,4,'2021-11-10 14:45:01','2021-11-11 16:30:48'),
(440,'pexels','免费图库','图片链接','https://www.pexels.com/zh-cn/',18,4,'2021-11-10 14:45:01','2021-11-11 16:30:40'),
(441,'HELLOGITHUB','分享 GitHub 上 有趣、入门级的开源项目','图片链接','https://hellogithub.com/',13,4,'2021-11-10 14:45:01','2021-11-15 10:09:57'),
(442,'GitHub Corners','Phew, GitHub is over ten years old now... and is unquestionably synonomous with open source. After 10 years, those GitHub ribbons are more than overdue for a cleaner, more modern alternative. This is my take.  By using SVG, these ','图片链接','https://tholman.com/github-corners/',24,4,'2021-11-10 14:45:01','2021-11-11 16:29:15'),
(444,'Vuetable-2','数据表','图片链接','https://www.vuetable.com/#current-version',24,4,'2021-11-10 14:45:01','2021-11-11 16:28:57'),
(445,'v-viewer','vue的图片查看器组件，支持旋转、缩放、缩放等，基于viewer.js','图片链接','https://mirari.cc/v-viewer/',5,4,'2021-11-10 14:45:01','2021-11-11 16:27:33'),
(446,'Vue 3 选框','为你的 Vue 3 应用程序制作的一个简单的动态选取框组件','图片链接','https://vue3-marquee.vercel.app/',24,4,'2021-11-10 14:45:01','2021-11-11 16:25:35'),
(447,' GoGoCode','代码转换从未如此简单 全网最简单易上手，可读性最强的 AST 处理工具！','图片链接','https://gogocode.io/zh',14,4,'2021-11-10 14:45:01','2021-11-11 16:23:36'),
(448,'hammerjs','hammerjs','图片链接','http://hammerjs.github.io/',5,4,'2021-11-10 14:45:01','2021-11-10 14:59:23'),
(462,'Ovilia','','','http://zhangwenli.com/',8,4,'2021-11-15 14:37:19','2021-11-15 14:37:19'),
(463,'carbon','创建和共享源代码的精美图像。 开始在文本区域键入或拖放文件以开始使用。','','https://carbon.now.sh/',14,4,'2021-11-15 14:39:13','2021-11-15 14:39:13'),
(464,'比格张','','','https://bigezhang.com/',11,4,'2021-11-15 14:39:54','2021-11-15 14:39:54'),
(471,'accordionslider','css','','https://accordionslider.com/',9,4,'2021-12-02 15:54:30','2021-12-02 15:54:30'),
(472,'vuex-module-decorators','Typescript/ES7 装饰器使 Vuex 模块变得轻而易举','','https://championswimmer.in/vuex-module-decorators/',3,4,'2021-12-02 15:57:40','2021-12-02 15:57:40'),
(473,'tool.lu','在线工具','','https://tool.lu/',14,4,'2021-12-02 16:09:02','2021-12-02 16:09:02'),
(480,'一条咸鱼与狗的博客','一条咸鱼与狗的博客','','https://purefish.cn/',8,1,'2021-12-03 15:19:28','2021-12-03 15:19:28'),
(481,'图片转码','在线图片转码','','http://www.jsons.cn/img2base64/',18,1,'2021-12-03 15:20:18','2021-12-03 15:20:18'),
(482,'防网易云','','','https://music-player.immortalboy.cn/',8,4,'2021-12-06 11:19:40','2021-12-06 11:19:40'),
(483,'讨厌的CSS','心脏强者和心灵弱者的动画。','','https://tholman.com/obnoxious/',9,4,'2021-12-06 11:22:36','2021-12-06 11:22:36'),
(484,'VueUse','Collection of essential Vue Composition Utilities','','https://vueuse.org/',3,4,'2021-12-06 11:23:45','2021-12-06 11:23:45'),
(485,'Vue.js 的表单验证','熟悉且易于设置的声明式验证 灵活 同步、异步、字段级或表单级验证  使用直观的 API 和较小的占用空间更快地构建更快的表单','','https://vee-validate.logaretm.com/v4/',24,4,'2021-12-06 11:30:47','2021-12-06 11:30:47'),
(486,'v-slot插槽','第十三篇：你会用v-slot插槽？你倒是用啊','','https://juejin.cn/post/7023188569162252295',15,4,'2021-12-06 13:35:36','2021-12-06 13:35:36'),
(487,'Jest','Jest 是一个令人愉快的 JavaScript 测试框架，专注于 简洁明快。','','https://www.jestjs.cn/',3,4,'2021-12-06 13:49:50','2021-12-06 13:49:50'),
(488,'Qui Max','Neumorphic design system for Web','','https://qvant-lab.github.io/qui-max/',24,4,'2021-12-06 13:57:02','2021-12-06 13:57:02'),
(489,'Zepto','Zepto 是一个轻量级的、针对现代高级浏览器的 JavaScript 工具库，它兼容 jQuery 的 API 。 如果你会用 jQuery，那么你就已经会用 Zepto 了。','','https://zeptojs.bootcss.com/',5,4,'2021-12-06 14:02:01','2021-12-06 14:02:01'),
(490,'ANTD PRO VUE','开箱即用的中台前端/设计解决方案','','https://pro.antdv.com/',19,4,'2021-12-06 14:05:18','2021-12-06 14:05:18'),
(491,'getwaves','Make some waves!','','https://getwaves.io/',9,4,'2021-12-06 14:06:48','2021-12-06 14:06:48'),
(492,'Normalize.css','一种现代的、支持 HTML5 的 CSS 重置替代方案','','http://necolas.github.io/normalize.css/',9,4,'2021-12-06 14:07:53','2021-12-06 14:07:53'),
(493,'vue-awesome-swiper','@vuejs 的 Swiper 组件','','https://github.surmon.me/vue-awesome-swiper/',24,4,'2021-12-06 14:13:23','2021-12-06 14:13:23'),
(494,'lru cache','A cache object that deletes the least-recently-used items.','','https://github.com/isaacs/node-lru-cache#readme',3,4,'2021-12-06 14:18:27','2021-12-06 14:18:27'),
(495,'vite-plugin-vue-docs','vite 插件 - 自动生成 vue 组件文档网站。','','https://meetqy.github.io/vite-plugin-vue-docs/#/docs',24,4,'2021-12-06 14:19:40','2021-12-06 14:19:40'),
(496,'制作缩略图','让我们制作缩略图','','http://makethumbnails.com/#options',18,4,'2021-12-06 14:25:34','2021-12-06 14:25:34'),
(497,'c#编程之路','','','https://www.cjavapy.com/75/',13,4,'2021-12-06 14:44:08','2021-12-06 14:44:08'),
(498,'SweetAlert','SweetAlert 使弹出消息变得简单而漂亮。','','https://sweetalert.js.org/',24,4,'2021-12-06 14:49:43','2021-12-06 14:49:43'),
(499,'Docusaurus','Docusaurus 能够帮助你建立并发布 美观的文档网站。','','https://www.docusaurus.cn/docs',13,4,'2021-12-06 14:54:36','2021-12-06 14:54:36'),
(500,'avaScript for','describe','','https://www.javascript.fun/',11,4,'2021-12-06 15:07:29','2021-12-06 15:07:29'),
(501,'bootswatch','describe','','https://bootswatch.com/cosmo/',3,4,'2021-12-06 15:10:26','2021-12-06 15:10:26'),
(502,'icons8','describe','','https://icons8.com/',18,4,'2021-12-06 15:13:29','2021-12-06 15:13:29'),
(503,'CSS Grid Generator','CSS Grid Generator','','https://cssgrid-generator.netlify.app/',9,4,'2021-12-06 15:17:41','2021-12-06 15:17:41'),
(504,'listary','Are Clumsy File Management Systems Slowing Down Your Workflow?','','https://www.listary.com/',14,4,'2021-12-06 15:19:29','2021-12-06 15:19:29'),
(505,'Vue CLI','ue.js 开发的标准工具','','https://cli.vuejs.org/zh/',3,4,'2021-12-06 15:34:42','2021-12-06 15:34:42'),
(506,'c#扩展方法的使用','c#扩展方法的使用','','https://blog.csdn.net/liangmengbk/article/details/112393864',15,4,'2021-12-09 15:03:51','2021-12-09 15:03:51'),
(507,'fastgithub','fastgithub是使用dotnet开发的一款github加速器','','https://www.cnblogs.com/kewei/p/15533079.html',14,4,'2021-12-09 15:07:45','2021-12-09 15:07:45'),
(508,'Simple CSS','简单的 CSS媒体查询生成器 为数百种设备生成 CSS 媒体查询，包括众多 ipad 和 iphone 型号、三星、LG 的安卓设备等等。有时您必须针对特定设备，这只是一个令人不快的事实。','','https://simplecss.eu/',9,4,'2021-12-15 15:14:02','2021-12-15 15:14:02'),
(509,'BootCDN','BootCDN 稳定、快速、免费的前端开源项目 CDN 加速服务','','https://www.bootcdn.cn/',9,4,'2021-12-15 15:44:57','2021-12-15 15:44:57'),
(510,'staticfile CDN','describe','','https://www.staticfile.org/',9,4,'2021-12-15 15:45:41','2021-12-15 15:45:41'),
(511,'convue','convue 是一个基于 vite 和 vue3 开发的一个 vite 的插件，让你拥有一套快速开发项目的体验，类似于 nuxt 和 umi.js。','','https://ziping-li.github.io/convue/zh/index.html',3,4,'2021-12-15 15:54:36','2021-12-15 15:54:36'),
(512,'G6 图可视化引擎','G6 是一个简单、易用、完备的图可视化引擎，它在高定制能力的基础上，提供了一系列设计优雅、便于使用的图可视化解决方案。能帮助开发者搭建属于自己的图可视化、图分析、或图编辑器应用。','','https://antv-g6.gitee.io/zh',19,4,'2021-12-16 14:24:41','2021-12-16 14:24:41'),
(513,'HTML DOM','with vanilla JavaScript','','https://htmldom.dev/',15,4,'2021-12-16 14:27:03','2021-12-16 14:27:03'),
(514,'rolan','即刻提升你的工作效率','','https://getrolan.com/',14,4,'2021-12-16 14:37:05','2021-12-16 14:37:05'),
(515,'极简插件','describe','','https://chrome.zzzmh.cn/#/index',14,4,'2021-12-16 14:46:51','2021-12-16 14:46:51'),
(516,'百页窗','一款专业的文件管理工具','','https://shutters.160.com/',14,4,'2021-12-16 15:25:10','2021-12-16 15:25:10'),
(517,'F2 移动端可视化引擎','F2 是一个专注于移动端，面向常规统计图表，开箱即用的可视化引擎，完美支持 H5 环境同时兼容多种环境（Node, 小程序），完备的图形语法理论，满足你的各种可视化需求，专业的移动设计指引为你带来最佳的移动端图表体验。','','https://antv-f2.gitee.io/zh',19,4,'2021-12-16 15:26:21','2021-12-16 15:26:21'),
(518,'Chrome插件扩展下载网','Chrome插件扩展下载网','','https://www.extfans.com/',14,4,'2021-12-16 15:29:24','2021-12-16 15:29:24'),
(520,'box-shadow 例子','所有这些 box-shadow 都是使用复制的  (点击这里尝试免费演示）。 使用 CSS Scan，您可以轻松检查或复制任何网站的 CSS。','','https://getcssscan.com/css-box-shadow-examples',9,4,'2021-12-24 13:55:12','2021-12-24 13:55:12'),
(521,'arco.design','智能设计体系 连接轻盈体验 # 全面开源的企业级产品设计系统','','https://arco.design/',19,4,'2021-12-27 09:29:51','2021-12-27 09:29:51'),
(523,'Vue 组合式 API','describe','','https://vue3js.cn/vue-composition-api/',3,4,'2022-03-11 10:03:59','2022-03-11 10:03:59'),
(524,'Chart.js','describe','','https://chartjs.bootcss.com/docs/getting-started/',24,4,'2022-03-11 10:04:58','2022-03-11 10:04:58'),
(525,'Cookie的使用（js-cookie插件）','describe','','https://www.cnblogs.com/star-meteor/p/12881296.html',15,4,'2022-03-11 10:13:20','2022-03-11 10:13:20'),
(526,'PicGo','图片上传、管理新体验','','https://picgo.github.io/PicGo-Doc/',14,4,'2022-03-11 10:37:23','2022-03-11 10:37:23'),
(527,'手册网','','','https://www.shouce.ren/',13,4,'2022-03-11 10:38:56','2022-03-11 10:38:56'),
(528,'VS插件Supercharger的安装','describe','','https://www.cnblogs.com/arxive/p/13513057.html',15,4,'2022-03-11 10:39:50','2022-03-11 10:39:50'),
(529,'Axios HTTP','基于 Axios 拓展的 HTTP 模块','','https://zhengxs2018.github.io/axios-http/',3,4,'2022-03-11 11:00:09','2022-03-11 11:00:09'),
(530,'图像编辑','在线图像编辑','','https://pixlr.com/cn/x/#search',14,4,'2022-03-11 11:01:36','2022-03-11 11:01:36'),
(531,'CSI.JS','CSI.JS是一个特别的前端日志系统，帮你快速重建犯罪现场。','','https://github.com/tnfe/csijs',24,4,'2022-03-11 11:13:54','2022-03-11 11:13:54'),
(532,'SunnyUI','winfrom组件文档','','https://gitee.com/yhuse/SunnyUI/wikis/pages?sort_id=3025093&doc_id=1022550',13,4,'2022-03-11 11:20:21','2022-03-11 11:20:21'),
(533,'LOCALFORAGE','改进的离线存储','','http://localforage.docschina.org/',5,4,'2022-03-23 15:16:03','2022-03-23 15:16:03'),
(534,'vite-plugin-vue-layouts','插件','','https://github.com/JohnCampionJr/vite-plugin-vue-layouts',26,4,'2022-03-23 15:20:51','2022-03-23 15:20:51'),
(535,'vite-plugin-vue-type-imports','使您能够导入类型并在您的defineProps和defineEmits','','https://github.com/wheatjs/vite-plugin-vue-type-imports',26,4,'2022-03-23 15:22:44','2022-03-23 15:22:44'),
(536,'迅速了解ES6~ES12的全部特性','迅速了解ES6~ES12的全部特性','','https://juejin.cn/post/7068935394191998990',15,4,'2022-03-23 15:23:24','2022-03-23 15:23:24'),
(537,'ES6-ES12总结','describe','','https://juejin.cn/post/7012519052841074696',15,4,'2022-03-23 15:24:03','2022-03-23 15:24:03'),
(538,'一文读懂 TypeScript 泛型及应用','一文读懂 TypeScript 泛型及应用','','https://juejin.cn/post/6844904184894980104',15,4,'2022-03-23 15:24:44','2022-03-23 15:24:44'),
(539,'Vue 3 Babel JSX 插件','以 JSX 的方式来编写 Vue 代码','','https://github.com/vuejs/babel-plugin-jsx/blob/dev/packages/babel-plugin-jsx/README-zh_CN.md',26,4,'2022-03-23 15:25:59','2022-03-23 15:25:59'),
(540,'vue插件库','快速查找您想要的内容，多动手，您会发现问题如此简单！','','https://www.vue365.cn/',3,4,'2022-03-23 15:26:49','2022-03-23 15:26:49'),
(541,'.NET Core资料精选','describe','','.https://www.cnblogs.com/heyuquan/p/dotnet-architecture-learning-resource.html',15,4,'2022-03-23 17:01:46','2022-03-23 17:01:46'),
(542,'总结了38个ES6-ES12的开发技巧','describe','','https://juejin.cn/post/6995334897065787422',15,4,'2022-03-23 17:02:14','2022-03-23 17:02:14'),
(543,'软件先锋','describe','','https://soft.macxf.com/',14,4,'2022-03-23 17:02:50','2022-03-23 17:02:50'),
(544,'加速器','describe','','http://101.34.95.10:8081/',14,4,'2022-03-23 17:05:19','2022-03-23 17:05:19'),
(545,'JavaScript工具函数','describe','','https://juejin.cn/post/6844904181761835016',15,4,'2022-03-23 17:05:51','2022-03-23 17:05:51'),
(546,'vite-plugin-pages','使用Vite的 Vue 3 / React 应用程序的基于文件系统的路由','','https://github.com/hannoeru/vite-plugin-pages',26,4,'2022-03-24 10:49:04','2022-03-24 10:49:04'),
(547,'ProComponents','让中后台开发更简单','','https://procomponents.ant.design/',24,4,'2022-03-24 10:51:04','2022-03-24 10:51:04'),
(548,'netcore','describe','','https://www.cnblogs.com/Can-daydayup/p/15046838.html',15,4,'2022-03-24 10:51:51','2022-03-24 10:51:51'),
(549,'Shell脚本编程30分钟入门','describe','','https://github.com/qinjx/30min_guides/blob/master/shell.md',15,4,'2022-03-24 10:52:25','2022-03-24 10:52:25'),
(550,'C#/.NET/.NET Core推荐学习书籍','describe','','https://www.cnblogs.com/Can-daydayup/p/14386782.html',15,4,'2022-03-24 10:54:41','2022-03-24 10:54:41'),
(551,'unplugin-icons','describe','','https://github.com/antfu/unplugin-icons',26,4,'2022-03-24 10:59:15','2022-03-24 10:59:15'),
(552,'github 的使用技巧 ','describe','','https://juejin.cn/post/7069790758022152206',15,4,'2022-03-24 10:59:40','2022-03-24 10:59:40'),
(553,'WLib','WLib是一组对C#.NET和ArcGIS Engine开发常用代码进行封装的基础库和控件库；','','https://github.com/Windr07/WLib',4,4,'2022-03-24 11:02:43','2022-03-24 11:02:43'),
(554,'Chrome 开发者工具','describe','','https://leeon.gitbooks.io/devtools/content/',15,4,'2022-03-24 11:03:39','2022-03-24 11:03:39'),
(555,'接口大全','describe','','https://www.free-api.com/',11,4,'2022-03-24 11:05:56','2022-03-24 11:05:56'),
(556,'理解ASP.NET Core','describe','','https://www.cnblogs.com/xiaoxiaotank/p/15185288.html',15,4,'2022-04-02 10:39:59','2022-04-02 10:39:59'),
(557,'.NET Core中的鉴权授权正确方式(.NET5)','describe','','https://www.cnblogs.com/wei325/p/15575141.html',15,4,'2022-04-02 10:41:23','2022-04-02 10:41:23'),
(558,'图标资源','资源库','','https://iconpark.oceanengine.com/home',14,4,'2022-04-02 10:46:29','2022-04-02 10:46:29'),
(559,'carbon','代码片段','','https://carbon.now.sh/',14,4,'2022-04-02 10:48:24','2022-04-02 10:48:24');
/*!40000 ALTER TABLE `sn_navigation` ENABLE KEYS */;

-- 
-- Definition of sn_one
-- 

DROP TABLE IF EXISTS `sn_one`;
CREATE TABLE IF NOT EXISTS `sn_one` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `text` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容',
  `img` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图片',
  `read` int(11) NOT NULL COMMENT '阅读数',
  `give` int(11) NOT NULL COMMENT '点赞',
  `user_id` int(11) NOT NULL COMMENT '作者',
  `comment_id` int(11) unsigned NOT NULL COMMENT '评论',
  `type_id` int(11) NOT NULL COMMENT '分类',
  `time_create` datetime NOT NULL COMMENT '时间',
  `time_modified` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `sn_one_type` (`type_id`),
  KEY `one_user_id` (`user_id`),
  CONSTRAINT `one_type_id` FOREIGN KEY (`type_id`) REFERENCES `sn_one_type` (`id`),
  CONSTRAINT `one_user_id` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_one
-- 

/*!40000 ALTER TABLE `sn_one` DISABLE KEYS */;
INSERT INTO `sn_one`(`id`,`title`,`text`,`img`,`read`,`give`,`user_id`,`comment_id`,`type_id`,`time_create`,`time_modified`) VALUES
(8,'vol.001 舔狗日记','没事，你有对象不重要，你可以偶尔回一下我的信息好吗，一天一条也行，让我知道你还在。','321321',8,9,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(9,'vol.002 舔狗日记','时隔30个小时，你终于发了信息给我，你说“宝贝，我想你了。”，我很开心，我终于以为我的舔狗日子到了，可没想到信息发出来两秒都没有，你就撤回了，你说发错了，当我说准备要回没关系的时候，我看见了红色的感叹号。','321321',1,0,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(10,'vol.003 舔狗日记','蒋介石因为宋美龄的一句喜欢梧桐，他便种满了整个南京。而我因为你的一句不喜欢小偷，我便放过了整个上海的电动车。','321321',1,0,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(11,'vol.004 舔狗日记','我今天送了你一支口红，你拿到之后很开心，在他的嘴巴上亲了一下，或许他送你口红的时候，你也会在我的嘴巴上亲一下吧。','321321',4,1,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(12,'vol.005 舔狗日记','别的妹妹叫你打游戏，你让人家语音给你发了句哥哥，你就陪她打一天。我叫你打游戏，你回了我一句 70/h。','321321',6,0,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(13,'vol.006 舔狗日记','今天在楼上窗户上看见你和他在公园里接吻，我看见哭了出来，并打电话给你，想问问你为什么？但你说怎么了，声音是那么好听。于是我说“以后你和他接吻的时候，能不能用我送给你的口红啊？”','321321',5,1,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(14,'vol.007 舔狗日记','今天上班不是太忙，百无聊赖，又翻出了你的相片，看了又看。今天是我认识你的第302天，也是我爱你的第302天，可是这些你并不知道，也许你知道了，也不会在意吧。 此刻的我好想你！','321321',0,0,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(15,'vol.008 舔狗日记','你好像从来没有对我说过晚安，我在我们的聊天记录里搜索了关键字：“晚安”，你说过一次：我早晚安排人弄死你。','321321',0,0,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(16,'vol.009 舔狗日记','她好像从来没有主动说过爱我，我搜索了一下关键字“爱”。在我们的聊天记录里，她只说过一次：爱奇艺会员借我一下。','321321',5,0,4,0,4,'2020-12-18 00:00:00','2020-12-18 00:00:00'),
(17,'vol.010 毒鸡汤','如果人生是一部电影，那你就是，中间弹出来的广告。','string',7,1,4,0,4,'2020-12-23 00:00:00','2020-12-18 00:00:00'),
(20,'vol.011 舔狗日记','现在已经凌晨一点多了，我望着手机屏幕迟迟没有他的消息：你知道吗？我等了一晚上你的消息。他终于回复我了：是我让你等的？','无',5,3,4,0,4,'2020-12-23 00:00:00','2020-12-18 00:00:00'),
(21,'vol.012 舔狗日记','今天你又来我们班看美女了，路过的时候瞥了一眼坐在第一排的我，我就知道你心里还是有我的。啊！真是美好的一天！','无',14,2,4,0,4,'2021-01-03 00:00:00','2020-12-18 00:00:00'),
(22,'vol.013 毒鸡汤','别以为你一无所有，至少你还有丑！','无',11,0,4,0,4,'2021-01-03 00:00:00','2020-12-18 00:00:00'),
(31,'vol.014 舔狗日记','今天打单子赚了56，给你转了52自己留了4块钱。我花两块买了两包泡面，用剩下的两块钱买了一瓶矿泉水，自己烧水泡面吃，而你用那52块钱想都没想的给你别的哥哥买了皮肤。 我太开心了，因为你用上我的钱了，以后我要赚更多的钱给你','无',11,2,4,0,4,'2021-07-20 00:00:00','2020-12-18 00:00:00'),
(33,'vol.015 舔狗日记','今天你说了要和我打电话，我等了一天，马上十二点了才打过来，我有点不高兴就挂了，你骂了句给脸不要脸。我想了一下，哎呀你还会关心我的脸，多么善良的女孩子，我发誓还能再等一天电话','无',7,3,4,0,4,'2021-09-02 00:00:00','2020-12-18 00:00:00'),
(34,'vol.016 舔狗日记','你好像成熟了，你学会隐忍，开始压抑自己对我的感情。这很好……可是我觉得自己被你忽略了……你好像看不见我。这不可能，对吗？','无',12,4,4,0,4,'2021-09-02 00:00:00','2020-12-18 00:00:00');
/*!40000 ALTER TABLE `sn_one` ENABLE KEYS */;

-- 
-- Definition of sn_setblog
-- 

DROP TABLE IF EXISTS `sn_setblog`;
CREATE TABLE IF NOT EXISTS `sn_setblog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '设置的内容名称',
  `router_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '路由链接',
  `isopen` tinyint(1) NOT NULL COMMENT '是否启用',
  `type_id` int(5) NOT NULL COMMENT '分类',
  `user_id` int(5) NOT NULL COMMENT '关联用户表',
  PRIMARY KEY (`id`),
  KEY `setblog_user_id` (`user_id`),
  KEY `setblog_type_id` (`type_id`),
  CONSTRAINT `setblog_type_id` FOREIGN KEY (`type_id`) REFERENCES `sn_setblog_type` (`id`),
  CONSTRAINT `setblog_user_id` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_setblog
-- 

/*!40000 ALTER TABLE `sn_setblog` DISABLE KEYS */;
INSERT INTO `sn_setblog`(`id`,`name`,`router_url`,`isopen`,`type_id`,`user_id`) VALUES
(1,'SetPage','df',0,1,4),
(2,'1','5',1,0,4);
/*!40000 ALTER TABLE `sn_setblog` ENABLE KEYS */;

-- 
-- Definition of sn_user_friends
-- 

DROP TABLE IF EXISTS `sn_user_friends`;
CREATE TABLE IF NOT EXISTS `sn_user_friends` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL COMMENT '用户id',
  `user_friends_id` int(11) DEFAULT NULL COMMENT '好友id',
  `user_note` varchar(20) DEFAULT NULL COMMENT '好友备注',
  `user_status` varchar(20) DEFAULT NULL COMMENT '好友状态',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_user_friends
-- 

/*!40000 ALTER TABLE `sn_user_friends` DISABLE KEYS */;
INSERT INTO `sn_user_friends`(`id`,`user_id`,`user_friends_id`,`user_note`,`user_status`) VALUES
(1,1,2,'小张','在线');
/*!40000 ALTER TABLE `sn_user_friends` ENABLE KEYS */;

-- 
-- Definition of sn_user_talk
-- 

DROP TABLE IF EXISTS `sn_user_talk`;
CREATE TABLE IF NOT EXISTS `sn_user_talk` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `talk_text` varchar(255) DEFAULT NULL COMMENT '说说内容',
  `talk_time` date DEFAULT NULL COMMENT '发表时间',
  `talk_read` int(11) DEFAULT NULL,
  `talk_give` int(11) DEFAULT NULL,
  `comment_id` int(11) DEFAULT NULL COMMENT '评论id',
  PRIMARY KEY (`id`),
  KEY `sn_user_talk_userId` (`user_id`),
  CONSTRAINT `sn_user_talk_userId` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_user_talk
-- 

/*!40000 ALTER TABLE `sn_user_talk` DISABLE KEYS */;
INSERT INTO `sn_user_talk`(`id`,`user_id`,`talk_text`,`talk_time`,`talk_read`,`talk_give`,`comment_id`) VALUES
(12,4,'omorrow is always fresh, with no mistakes in it. 明天始终崭新，无错可言。','2020-10-19 00:00:00',0,0,0),
(13,4,'人生有梦,各自精彩','2020-10-19 00:00:00',0,0,0),
(15,4,'Sometimes you have to sacrifice to do the right thing. 有时候，为了做成正确的事，你必须付出代价。','2020-10-20 00:00:00',0,0,0),
(16,4,'我就是这样,就是和你不一样','2020-10-23 00:00:00',0,0,0),
(17,4,'A brave man never surrenders. 勇者永不屈服。','2020-10-27 00:00:00',0,0,0),
(18,4,'The strongest person is the person who isn''t scared to be alone. 强大的人不会惧怕孤独。','2020-11-11 00:00:00',0,0,0),
(19,4,'Real love is always worth waiting for. 真爱永远值得等待。','2020-11-24 00:00:00',0,0,0),
(20,4,'“嗨，同志！您知道列宁格勒和斯大林格勒在哪吗？我在地图上找不到它。” “没有了，再也没有了，我们失败了，白匪和资本家再一次骑到了我们的头上，如果你要追随那颗红星，去东方吧，穿越第聂伯河，翻过乌拉尔山脉，西伯利亚平原的尽头，那里还燃烧着星星之火。”','2020-12-26 00:00:00',0,0,0);
/*!40000 ALTER TABLE `sn_user_talk` ENABLE KEYS */;

-- 
-- Definition of sn_video
-- 

DROP TABLE IF EXISTS `sn_video`;
CREATE TABLE IF NOT EXISTS `sn_video` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '标题',
  `img` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '图片',
  `url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '链接路径',
  `type_id` int(11) NOT NULL COMMENT '分类',
  `user_id` int(11) NOT NULL,
  `time_create` datetime NOT NULL COMMENT '时间',
  `time_modified` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `video_type_id` (`type_id`),
  KEY `video_user_id` (`user_id`),
  CONSTRAINT `video_type_id` FOREIGN KEY (`type_id`) REFERENCES `sn_video_type` (`id`),
  CONSTRAINT `video_user_id` FOREIGN KEY (`user_id`) REFERENCES `sn_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_video
-- 

/*!40000 ALTER TABLE `sn_video` DISABLE KEYS */;
INSERT INTO `sn_video`(`id`,`title`,`img`,`url`,`type_id`,`user_id`,`time_create`,`time_modified`) VALUES
(25,'我们的故事，英雄联盟！','https://s1.ax1x.com/2020/11/11/BX2acT.png','//player.bilibili.com/player.html?aid=45028887&bvid=BV1zb411b7JK&cid=78863318&page=1',1,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(26,'故事开始的地方——为你的本命献上弹幕吧！','https://s1.ax1x.com/2020/11/11/BX2N90.jpg','//player.bilibili.com/player.html?aid=25180028&bvid=BV18s411j7CL&cid=42677566&page=1',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(27,'用战斗来祭奠这个世界 ！！','https://s1.ax1x.com/2020/11/11/BX2BB4.jpg','//player.bilibili.com/player.html?aid=1328701&bvid=BV1px411N7Yd&cid=2015358&page=1',1,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(28,'前方高能！让世界感受这场视觉盛宴吧！','https://s1.ax1x.com/2020/11/11/BX20uF.jpg','//player.bilibili.com/player.html?aid=50331935&bvid=BV1x441187u5&cid=92865323&page=1',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(29,'这才是忍者世界的巅峰战力！','https://s1.ax1x.com/2020/11/11/BX2U3V.jpg','//player.bilibili.com/player.html?aid=71840112&bvid=BV1HE41167kR&cid=124483833&page=1',1,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(30,'这个故事 还没有完结','https://s1.ax1x.com/2020/11/11/BX2JNn.jpg','//player.bilibili.com/player.html?aid=66382748&bvid=BV1J441117u7&cid=115130259&page=1',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(31,'感受国服配音的魅力吧！ 你的热血从未结霜！！','https://s1.ax1x.com/2020/11/11/BX2Yhq.jpg','//player.bilibili.com/player.html?aid=18767799&bvid=BV1WW411e7wq&cid=30610512&page=1',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(32,'敌人虽众，一击皆斩！','https://s1.ax1x.com/2020/11/11/BX2JNn.jpg','//player.bilibili.com/player.html?aid=22446917&bvid=BV1SW41157WM&cid=37190046&page=1',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(33,'【英雄联盟/CG/燃向】 召唤师 如果没有你们 何为英雄 何为联盟','https://s3.ax1x.com/2020/11/13/Dpmoee.jpg','//player.bilibili.com/player.html?aid=78147108&bvid=BV1fJ411v7Q6&cid=133666781&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(34,'【超燃巨作/视听盛宴】我...已被这优雅蒙蔽了双眼... 「英雄联盟系列混剪」','https://s3.ax1x.com/2020/11/13/DpnyX8.jpg','//player.bilibili.com/player.html?aid=49445129&bvid=BV1gb411j7r4&cid=86578090&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(35,'那不屈的嘶吼和永不低头的信念使我们迎难而上','https://s3.ax1x.com/2020/11/13/Dputg0.png','//player.bilibili.com/player.html?aid=49661297&bvid=BV1ib41157zQ&cid=86951456&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(36,'这就是英雄联盟的魅力！','https://s3.ax1x.com/2020/11/13/DpKDL8.jpg','//player.bilibili.com/player.html?aid=47199816&bvid=BV1nb41147HD&cid=82660090&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"',2,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(37,'【火影忍者百万填词】一袋米要扛几楼','https://s3.ax1x.com/2020/11/13/DpQAN4.jpg','//player.bilibili.com/player.html?aid=56970467&bvid=BV1Px411d7em&cid=99503508&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"',1,4,'2020-07-28 00:00:00','2020-07-28 00:00:00'),
(38,'『忍び的时代真的结束了吗？』让鸡皮疙瘩和肾上腺素','https://s3.ax1x.com/2020/11/13/DpQxaD.png','//player.bilibili.com/player.html?aid=81848177&bvid=BV1HJ411j771&cid=140045131&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"',1,4,'2020-07-28 00:00:00','2020-07-28 00:00:00');
/*!40000 ALTER TABLE `sn_video` ENABLE KEYS */;

-- 
-- Definition of sn_video_type
-- 

DROP TABLE IF EXISTS `sn_video_type`;
CREATE TABLE IF NOT EXISTS `sn_video_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- 
-- Dumping data for table sn_video_type
-- 

/*!40000 ALTER TABLE `sn_video_type` DISABLE KEYS */;
INSERT INTO `sn_video_type`(`id`,`name`) VALUES
(1,'火影'),
(2,'LOL');
/*!40000 ALTER TABLE `sn_video_type` ENABLE KEYS */;


/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;


-- Dump completed on 2022-09-29 14:19:57
-- Total time: 0:0:0:0:176 (d:h:m:s:ms)
